2023-09-08 17:25:25:604 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 17:25:25:649 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 17:25:27:435 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 17:25:27:447 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 17:25:27:475 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT RETURN expr (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)}) (ALT RETURN (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID COR_IZQ (= index expr) COR_DER IGUAL (= listan expr) { $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 17:25:27:476 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 17:25:27:562 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=648> left=expr<tokenIndex=652,p=20> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=760> left=expr<tokenIndex=764,p=14> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=802> expr<tokenIndex=804> PAR_DER<tokenIndex=806> { $e = $expr.e } 
        | conversionstmt<tokenIndex=812> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=817> PUNTO<tokenIndex=819> COUNT<tokenIndex=821> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | ID<tokenIndex=826> PUNTO<tokenIndex=828> ISEMPTY<tokenIndex=830> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=838> { $e = $list.p} 
        | COR_IZQ<tokenIndex=844> listParams<tokenIndex=846> COR_DER<tokenIndex=848> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=854>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=860>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=866> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=872> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=878> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MULT<tokenIndex=665>|DIV<tokenIndex=667>|MOD<tokenIndex=669>) right=expr<tokenIndex=674,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(SUM<tokenIndex=687>|RES<tokenIndex=689>) right=expr<tokenIndex=694,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAYIG<tokenIndex=707>|MAYOR<tokenIndex=709>) right=expr<tokenIndex=714,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MENIG<tokenIndex=727>|MENOR<tokenIndex=729>) right=expr<tokenIndex=734,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=747>|DIFE<tokenIndex=749>) right=expr<tokenIndex=754,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=AND<tokenIndex=776> right=expr<tokenIndex=780,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=OR<tokenIndex=792> right=expr<tokenIndex=796,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 17:25:27:695 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 648))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 652) (= p 20)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 760))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 764) (= p 14)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 802))) (expr (ELEMENT_OPTIONS (= tokenIndex 804))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 806))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 812))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 817))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 819))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 821))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 826))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 828))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 830))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 838)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 844))) (listParams (ELEMENT_OPTIONS (= tokenIndex 846))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 848))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 854))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 860))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 866))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 872))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 878))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 665))) (DIV (ELEMENT_OPTIONS (= tokenIndex 667))) (MOD (ELEMENT_OPTIONS (= tokenIndex 669))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 674) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 687))) (RES (ELEMENT_OPTIONS (= tokenIndex 689))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 694) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 707))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 709))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 714) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 727))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 729))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 734) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 747))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 749))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 754) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 776)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 780) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 792)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 796) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 17:25:27:696 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=979> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=971> expr<tokenIndex=973> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 17:25:27:704 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 979))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 971))) (expr (ELEMENT_OPTIONS (= tokenIndex 973))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 17:25:27:705 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1008> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=998> expr<tokenIndex=1000> COR_DER<tokenIndex=1002> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-08 17:25:27:708 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1008))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 998))) (expr (ELEMENT_OPTIONS (= tokenIndex 1000))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 1002))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-08 17:25:27:755 grammar LogManager.java:25 import INT=1
2023-09-08 17:25:27:755 grammar LogManager.java:25 import FLOAT=2
2023-09-08 17:25:27:756 grammar LogManager.java:25 import BOOL=3
2023-09-08 17:25:27:756 grammar LogManager.java:25 import STR=4
2023-09-08 17:25:27:758 grammar LogManager.java:25 import TRU=5
2023-09-08 17:25:27:759 grammar LogManager.java:25 import FAL=6
2023-09-08 17:25:27:760 grammar LogManager.java:25 import PRINT=7
2023-09-08 17:25:27:772 grammar LogManager.java:25 import IF=8
2023-09-08 17:25:27:772 grammar LogManager.java:25 import ELSE=9
2023-09-08 17:25:27:772 grammar LogManager.java:25 import WHILE=10
2023-09-08 17:25:27:772 grammar LogManager.java:25 import FOR=11
2023-09-08 17:25:27:772 grammar LogManager.java:25 import IN=12
2023-09-08 17:25:27:773 grammar LogManager.java:25 import VAR=13
2023-09-08 17:25:27:773 grammar LogManager.java:25 import LET=14
2023-09-08 17:25:27:773 grammar LogManager.java:25 import NIL=15
2023-09-08 17:25:27:773 grammar LogManager.java:25 import BREAK=16
2023-09-08 17:25:27:773 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 17:25:27:773 grammar LogManager.java:25 import APPEND=18
2023-09-08 17:25:27:773 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 17:25:27:774 grammar LogManager.java:25 import REMOVE=20
2023-09-08 17:25:27:774 grammar LogManager.java:25 import AT=21
2023-09-08 17:25:27:775 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 17:25:27:775 grammar LogManager.java:25 import COUNT=23
2023-09-08 17:25:27:775 grammar LogManager.java:25 import ARRAY=24
2023-09-08 17:25:27:775 grammar LogManager.java:25 import RETURN=25
2023-09-08 17:25:27:775 grammar LogManager.java:25 import NUMBER=26
2023-09-08 17:25:27:775 grammar LogManager.java:25 import STRING=27
2023-09-08 17:25:27:776 grammar LogManager.java:25 import ID=28
2023-09-08 17:25:27:776 grammar LogManager.java:25 import DIFE=29
2023-09-08 17:25:27:776 grammar LogManager.java:25 import IG_IG=30
2023-09-08 17:25:27:777 grammar LogManager.java:25 import NOT=31
2023-09-08 17:25:27:777 grammar LogManager.java:25 import OR=32
2023-09-08 17:25:27:778 grammar LogManager.java:25 import AND=33
2023-09-08 17:25:27:778 grammar LogManager.java:25 import IGUAL=34
2023-09-08 17:25:27:778 grammar LogManager.java:25 import MAYIG=35
2023-09-08 17:25:27:779 grammar LogManager.java:25 import MENIG=36
2023-09-08 17:25:27:779 grammar LogManager.java:25 import MAYOR=37
2023-09-08 17:25:27:779 grammar LogManager.java:25 import MENOR=38
2023-09-08 17:25:27:779 grammar LogManager.java:25 import MULT=39
2023-09-08 17:25:27:779 grammar LogManager.java:25 import DIV=40
2023-09-08 17:25:27:779 grammar LogManager.java:25 import SUM=41
2023-09-08 17:25:27:779 grammar LogManager.java:25 import RES=42
2023-09-08 17:25:27:782 grammar LogManager.java:25 import MOD=43
2023-09-08 17:25:27:782 grammar LogManager.java:25 import PAR_IZQ=44
2023-09-08 17:25:27:783 grammar LogManager.java:25 import PAR_DER=45
2023-09-08 17:25:27:783 grammar LogManager.java:25 import LLAVE_IZQ=46
2023-09-08 17:25:27:783 grammar LogManager.java:25 import LLAVE_DER=47
2023-09-08 17:25:27:784 grammar LogManager.java:25 import DOSPUNTOS=48
2023-09-08 17:25:27:784 grammar LogManager.java:25 import COR_IZQ=49
2023-09-08 17:25:27:784 grammar LogManager.java:25 import COR_DER=50
2023-09-08 17:25:27:785 grammar LogManager.java:25 import COMA=51
2023-09-08 17:25:27:785 grammar LogManager.java:25 import CIERRAPREGUNTA=52
2023-09-08 17:25:27:785 grammar LogManager.java:25 import PUNTOCOMA=53
2023-09-08 17:25:27:785 grammar LogManager.java:25 import PUNTO=54
2023-09-08 17:25:27:785 grammar LogManager.java:25 import WHITESPACE=55
2023-09-08 17:25:27:785 grammar LogManager.java:25 import COMMENT=56
2023-09-08 17:25:27:786 grammar LogManager.java:25 import LINE_COMMENT=57
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'Int'=1
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'Float'=2
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'String'=4
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'true'=5
2023-09-08 17:25:27:786 grammar LogManager.java:25 import 'false'=6
2023-09-08 17:25:27:787 grammar LogManager.java:25 import 'print'=7
2023-09-08 17:25:27:787 grammar LogManager.java:25 import 'if'=8
2023-09-08 17:25:27:787 grammar LogManager.java:25 import 'else'=9
2023-09-08 17:25:27:787 grammar LogManager.java:25 import 'while'=10
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'for'=11
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'in'=12
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'var'=13
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'let'=14
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'nil'=15
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'break'=16
2023-09-08 17:25:27:788 grammar LogManager.java:25 import 'continue'=17
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'append'=18
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'remove'=20
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'at'=21
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'isEmpty'=22
2023-09-08 17:25:27:789 grammar LogManager.java:25 import 'count'=23
2023-09-08 17:25:27:790 grammar LogManager.java:25 import 'array'=24
2023-09-08 17:25:27:790 grammar LogManager.java:25 import 'return'=25
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '!='=29
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '=='=30
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '!'=31
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '||'=32
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '&&'=33
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '='=34
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '>='=35
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '<='=36
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '>'=37
2023-09-08 17:25:27:791 grammar LogManager.java:25 import '<'=38
2023-09-08 17:25:27:792 grammar LogManager.java:25 import '*'=39
2023-09-08 17:25:27:792 grammar LogManager.java:25 import '/'=40
2023-09-08 17:25:27:792 grammar LogManager.java:25 import '+'=41
2023-09-08 17:25:27:792 grammar LogManager.java:25 import '-'=42
2023-09-08 17:25:27:792 grammar LogManager.java:25 import '%'=43
2023-09-08 17:25:27:793 grammar LogManager.java:25 import '('=44
2023-09-08 17:25:27:793 grammar LogManager.java:25 import ')'=45
2023-09-08 17:25:27:793 grammar LogManager.java:25 import '{'=46
2023-09-08 17:25:27:793 grammar LogManager.java:25 import '}'=47
2023-09-08 17:25:27:793 grammar LogManager.java:25 import ':'=48
2023-09-08 17:25:27:793 grammar LogManager.java:25 import '['=49
2023-09-08 17:25:27:793 grammar LogManager.java:25 import ']'=50
2023-09-08 17:25:27:794 grammar LogManager.java:25 import ','=51
2023-09-08 17:25:27:794 grammar LogManager.java:25 import '?'=52
2023-09-08 17:25:27:794 grammar LogManager.java:25 import ';'=53
2023-09-08 17:25:27:794 grammar LogManager.java:25 import '.'=54
2023-09-08 17:25:27:795 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, NUMBER=26, STRING=27, ID=28, DIFE=29, IG_IG=30, NOT=31, OR=32, AND=33, IGUAL=34, MAYIG=35, MENIG=36, MAYOR=37, MENOR=38, MULT=39, DIV=40, SUM=41, RES=42, MOD=43, PAR_IZQ=44, PAR_DER=45, LLAVE_IZQ=46, LLAVE_DER=47, DOSPUNTOS=48, COR_IZQ=49, COR_DER=50, COMA=51, CIERRAPREGUNTA=52, PUNTOCOMA=53, PUNTO=54, WHITESPACE=55, COMMENT=56, LINE_COMMENT=57, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, '!='=29, '=='=30, '!'=31, '||'=32, '&&'=33, '='=34, '>='=35, '<='=36, '>'=37, '<'=38, '*'=39, '/'=40, '+'=41, '-'=42, '%'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '['=49, ']'=50, ','=51, '?'=52, ';'=53, '.'=54}
2023-09-08 17:25:27:798 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, RETURN=25, NUMBER=26, STRING=27, ID=28, DIFE=29, IG_IG=30, NOT=31, OR=32, AND=33, IGUAL=34, MAYIG=35, MENIG=36, MAYOR=37, MENOR=38, MULT=39, DIV=40, SUM=41, RES=42, MOD=43, PAR_IZQ=44, PAR_DER=45, LLAVE_IZQ=46, LLAVE_DER=47, DOSPUNTOS=48, COR_IZQ=49, COR_DER=50, COMA=51, CIERRAPREGUNTA=52, PUNTOCOMA=53, PUNTO=54, WHITESPACE=55, COMMENT=56, LINE_COMMENT=57}
2023-09-08 17:25:27:798 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, 'return'=25, '!='=29, '=='=30, '!'=31, '||'=32, '&&'=33, '='=34, '>='=35, '<='=36, '>'=37, '<'=38, '*'=39, '/'=40, '+'=41, '-'=42, '%'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '['=49, ']'=50, ','=51, '?'=52, ';'=53, '.'=54}
2023-09-08 17:25:28:228 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 17:25:28:235 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 25, 28}, {<EOF>, 47}]
2023-09-08 17:25:28:236 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:236 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 17:25:28:236 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:236 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:236 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 17:25:28:236 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:237 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:237 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 17:25:28:238 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:238 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:238 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 17:25:28:238 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:238 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:238 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 17:25:28:239 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:239 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:239 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 17:25:28:239 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:239 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:239 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 17:25:28:240 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:240 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:240 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 17:25:28:240 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:240 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:241 LL1 LogManager.java:25 
DECISION 9 in rule instruction
2023-09-08 17:25:28:241 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:241 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:241 LL1 LogManager.java:25 
DECISION 10 in rule instruction
2023-09-08 17:25:28:241 LL1 LogManager.java:25 look=[53, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:241 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:241 LL1 LogManager.java:25 
DECISION 11 in rule instruction
2023-09-08 17:25:28:242 LL1 LogManager.java:25 look=[7, 8, {13..14}, 28, 10, 11, 16, 17, 28, 28, 28, 25, 25]
2023-09-08 17:25:28:242 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:242 LL1 LogManager.java:25 
DECISION 12 in rule blockelsif
2023-09-08 17:25:28:243 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 25, 28, 47}]
2023-09-08 17:25:28:243 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:243 LL1 LogManager.java:25 
DECISION 13 in rule ifstmt
2023-09-08 17:25:28:243 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 17:25:28:244 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:244 LL1 LogManager.java:25 
DECISION 14 in rule declarationstmt
2023-09-08 17:25:28:244 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 17:25:28:244 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:244 LL1 LogManager.java:25 
DECISION 15 in rule asignationstmt
2023-09-08 17:25:28:244 LL1 LogManager.java:25 look=[28, 28, 28]
2023-09-08 17:25:28:244 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:244 LL1 LogManager.java:25 
DECISION 16 in rule types
2023-09-08 17:25:28:244 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 17:25:28:244 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:244 LL1 LogManager.java:25 
DECISION 17 in rule typesmatriz
2023-09-08 17:25:28:244 LL1 LogManager.java:25 look=[49, {1..4}]
2023-09-08 17:25:28:244 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:244 LL1 LogManager.java:25 
DECISION 18 in rule exprFor
2023-09-08 17:25:28:245 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 26..28, 31, 42, 44, 49}, {1..2, 4..6, 15, 26..28, 31, 42, 44, 49}]
2023-09-08 17:25:28:245 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:245 LL1 LogManager.java:25 
DECISION 19 in rule expr
2023-09-08 17:25:28:245 LL1 LogManager.java:25 look=[42, 31, 44, {1..2, 4}, 28, 28, 28, 49, 26, 27, 5, 6, 15]
2023-09-08 17:25:28:245 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:317 LL1 LogManager.java:25 
DECISION 20 in rule expr
2023-09-08 17:25:28:318 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 17:25:28:318 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:318 LL1 LogManager.java:25 
DECISION 21 in rule expr
2023-09-08 17:25:28:320 LL1 LogManager.java:25 look=[null, null]
2023-09-08 17:25:28:320 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:320 LL1 LogManager.java:25 
DECISION 22 in rule conversionstmt
2023-09-08 17:25:28:320 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 17:25:28:320 LL1 LogManager.java:25 LL(1)? true
2023-09-08 17:25:28:320 LL1 LogManager.java:25 
DECISION 23 in rule exprvector
2023-09-08 17:25:28:320 LL1 LogManager.java:25 look=[49, 49, 28]
2023-09-08 17:25:28:320 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:320 LL1 LogManager.java:25 
DECISION 24 in rule listParams
2023-09-08 17:25:28:320 LL1 LogManager.java:25 look=[null, {45, 50}]
2023-09-08 17:25:28:320 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:320 LL1 LogManager.java:25 
DECISION 25 in rule listArray
2023-09-08 17:25:28:320 LL1 LogManager.java:25 look=[null, null]
2023-09-08 17:25:28:321 LL1 LogManager.java:25 LL(1)? false
2023-09-08 17:25:28:341 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 17:25:28:402 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 17:25:28:403 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 17:25:28:433 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 17:25:28:437 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 17:25:28:437 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 17:25:28:454 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 17:25:28:455 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 17:25:28:455 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 17:25:28:467 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 17:25:28:467 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 17:25:28:467 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 17:25:28:467 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 17:25:28:468 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 17:25:28:468 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 17:25:28:469 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 17:25:28:469 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 17:25:28:469 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 17:25:28:470 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 17:25:28:470 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 17:25:28:470 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 17:25:28:471 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 17:25:28:471 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 17:25:28:471 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 17:25:28:472 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 17:25:28:472 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 17:25:28:472 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 17:25:28:473 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 17:25:28:473 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:22]
2023-09-08 17:25:28:473 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,45:52].[@-1,37:40='line',<0>,45:58]
2023-09-08 17:25:28:474 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,45:65].[@-1,50:52='pos',<0>,45:71]
2023-09-08 17:25:28:476 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 17:25:28:476 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:25]
2023-09-08 17:25:28:476 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,46:58].[@-1,43:46='line',<0>,46:67]
2023-09-08 17:25:28:478 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,46:74].[@-1,59:61='pos',<0>,46:83]
2023-09-08 17:25:28:483 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 17:25:28:483 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:53]
2023-09-08 17:25:28:484 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,47:84].[@-1,35:38='line',<0>,47:87]
2023-09-08 17:25:28:484 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,47:94].[@-1,45:47='pos',<0>,47:97]
2023-09-08 17:25:28:484 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,47:103].[@-1,54:57='text',<0>,47:106]
2023-09-08 17:25:28:484 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,47:113].[@-1,66:66='e',<0>,47:118]
2023-09-08 17:25:28:485 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-08 17:25:28:485 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:52]
2023-09-08 17:25:28:485 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,48:87].[@-1,39:42='line',<0>,48:90]
2023-09-08 17:25:28:486 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,48:97].[@-1,49:51='pos',<0>,48:100]
2023-09-08 17:25:28:486 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,48:106].[@-1,58:61='text',<0>,48:109]
2023-09-08 17:25:28:488 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 17:25:28:489 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:66]
2023-09-08 17:25:28:489 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,49:99].[@-1,37:40='line',<0>,49:102]
2023-09-08 17:25:28:490 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,49:109].[@-1,47:49='pos',<0>,49:112]
2023-09-08 17:25:28:490 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,49:118].[@-1,56:59='text',<0>,49:121]
2023-09-08 17:25:28:490 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,49:128].[@-1,68:68='e',<0>,49:133]
2023-09-08 17:25:28:493 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)
2023-09-08 17:25:28:493 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,50:28]
2023-09-08 17:25:28:494 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,50:59].[@-1,39:42='line',<0>,50:66]
2023-09-08 17:25:28:495 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,50:73].[@-1,53:55='pos',<0>,50:80]
2023-09-08 17:25:28:495 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,50:86].[@-1,64:64='e',<0>,50:91]
2023-09-08 17:25:28:501 action-translator LogManager.java:25 translate $inst = instructions.NewReturn($RETURN.line, $RETURN.pos, nil)
2023-09-08 17:25:28:502 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,51:23]
2023-09-08 17:25:28:502 action-translator LogManager.java:25 qattr [@-1,32:37='RETURN',<0>,51:54].[@-1,39:42='line',<0>,51:61]
2023-09-08 17:25:28:503 action-translator LogManager.java:25 qattr [@-1,46:51='RETURN',<0>,51:68].[@-1,53:55='pos',<0>,51:75]
2023-09-08 17:25:28:556 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 17:25:28:557 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,55:37]
2023-09-08 17:25:28:558 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,55:67].[@-1,38:41='line',<0>,55:73]
2023-09-08 17:25:28:558 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,55:79].[@-1,50:52='pos',<0>,55:85]
2023-09-08 17:25:28:558 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,55:90].[@-1,66:66='l',<0>,55:101]
2023-09-08 17:25:28:559 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 17:25:28:559 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,61:5]
2023-09-08 17:25:28:560 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 17:25:28:560 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,68:13]
2023-09-08 17:25:28:560 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,68:29]
2023-09-08 17:25:28:566 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 17:25:28:566 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,74:38]
2023-09-08 17:25:28:566 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,74:67].[@-1,34:37='line',<0>,74:70]
2023-09-08 17:25:28:566 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,74:77].[@-1,44:46='pos',<0>,74:80]
2023-09-08 17:25:28:569 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,74:86].[@-1,55:55='e',<0>,74:91]
2023-09-08 17:25:28:569 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,74:95].[@-1,65:67='blk',<0>,74:101]
2023-09-08 17:25:28:570 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 17:25:28:570 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,75:84]
2023-09-08 17:25:28:571 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,75:113].[@-1,33:36='line',<0>,75:116]
2023-09-08 17:25:28:571 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,75:123].[@-1,43:45='pos',<0>,75:126]
2023-09-08 17:25:28:572 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,75:132].[@-1,54:54='e',<0>,75:137]
2023-09-08 17:25:28:572 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,75:141].[@-1,65:67='blk',<0>,75:148]
2023-09-08 17:25:28:572 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,75:154].[@-1,80:82='blk',<0>,75:163]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 17:25:28:573 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,76:60]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,76:89].[@-1,33:36='line',<0>,76:92]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,76:99].[@-1,43:45='pos',<0>,76:102]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,76:108].[@-1,54:54='e',<0>,76:113]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,76:117].[@-1,65:67='blk',<0>,76:124]
2023-09-08 17:25:28:573 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,76:130].[@-1,82:86='blkif',<0>,76:141]
2023-09-08 17:25:28:574 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 17:25:28:575 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,80:41]
2023-09-08 17:25:28:575 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,80:76].[@-1,43:46='line',<0>,80:82]
2023-09-08 17:25:28:575 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,80:89].[@-1,56:58='pos',<0>,80:95]
2023-09-08 17:25:28:575 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,80:101].[@-1,67:67='e',<0>,80:106]
2023-09-08 17:25:28:575 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,80:110].[@-1,77:79='blk',<0>,80:116]
2023-09-08 17:25:28:576 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 17:25:28:576 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,84:47]
2023-09-08 17:25:28:576 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,84:78].[@-1,36:39='line',<0>,84:82]
2023-09-08 17:25:28:578 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,84:89].[@-1,47:49='pos',<0>,84:93]
2023-09-08 17:25:28:578 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,84:99].[@-1,56:59='text',<0>,84:102]
2023-09-08 17:25:28:578 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,84:109].[@-1,71:71='e',<0>,84:117]
2023-09-08 17:25:28:578 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,84:121].[@-1,81:83='blk',<0>,84:127]
2023-09-08 17:25:28:592 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 17:25:28:592 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:39]
2023-09-08 17:25:28:592 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,88:74].[@-1,41:44='line',<0>,88:78]
2023-09-08 17:25:28:593 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,88:85].[@-1,52:54='pos',<0>,88:89]
2023-09-08 17:25:28:593 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,88:95].[@-1,61:64='text',<0>,88:98]
2023-09-08 17:25:28:593 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,88:110].[@-1,79:80='ty',<0>,88:116]
2023-09-08 17:25:28:594 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,88:121].[@-1,89:89='e',<0>,88:126]
2023-09-08 17:25:28:594 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 17:25:28:594 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:22]
2023-09-08 17:25:28:595 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,89:57].[@-1,41:44='line',<0>,89:61]
2023-09-08 17:25:28:595 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,89:68].[@-1,52:54='pos',<0>,89:72]
2023-09-08 17:25:28:595 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,89:78].[@-1,61:64='text',<0>,89:81]
2023-09-08 17:25:28:595 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,89:117].[@-1,102:102='e',<0>,89:122]
2023-09-08 17:25:28:596 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 17:25:28:596 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,90:42]
2023-09-08 17:25:28:596 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,90:77].[@-1,41:44='line',<0>,90:81]
2023-09-08 17:25:28:598 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,90:88].[@-1,52:54='pos',<0>,90:92]
2023-09-08 17:25:28:599 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,90:98].[@-1,61:64='text',<0>,90:101]
2023-09-08 17:25:28:600 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,90:113].[@-1,79:80='ty',<0>,90:119]
2023-09-08 17:25:28:600 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 17:25:28:600 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,91:60]
2023-09-08 17:25:28:600 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,91:101].[@-1,47:50='line',<0>,91:105]
2023-09-08 17:25:28:601 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,91:112].[@-1,58:60='pos',<0>,91:116]
2023-09-08 17:25:28:601 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,91:122].[@-1,67:70='text',<0>,91:125]
2023-09-08 17:25:28:601 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,91:137].[@-1,85:86='ty',<0>,91:143]
2023-09-08 17:25:28:601 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,91:148].[@-1,101:105='exprv',<0>,91:159]
2023-09-08 17:25:28:602 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 17:25:28:602 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,92:44]
2023-09-08 17:25:28:602 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,92:85].[@-1,47:50='line',<0>,92:89]
2023-09-08 17:25:28:602 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,92:96].[@-1,58:60='pos',<0>,92:100]
2023-09-08 17:25:28:602 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,92:106].[@-1,67:70='text',<0>,92:109]
2023-09-08 17:25:28:602 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,92:121].[@-1,91:92='tm',<0>,92:133]
2023-09-08 17:25:28:603 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,92:138].[@-1,101:101='e',<0>,92:143]
2023-09-08 17:25:28:603 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 17:25:28:603 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,93:38]
2023-09-08 17:25:28:603 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,93:73].[@-1,41:44='line',<0>,93:77]
2023-09-08 17:25:28:604 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,93:84].[@-1,52:54='pos',<0>,93:88]
2023-09-08 17:25:28:604 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,93:94].[@-1,61:64='text',<0>,93:97]
2023-09-08 17:25:28:604 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,93:110].[@-1,80:81='ty',<0>,93:116]
2023-09-08 17:25:28:604 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,93:121].[@-1,90:90='e',<0>,93:126]
2023-09-08 17:25:28:604 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 17:25:28:605 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,94:22]
2023-09-08 17:25:28:605 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,94:57].[@-1,41:44='line',<0>,94:61]
2023-09-08 17:25:28:605 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,94:68].[@-1,52:54='pos',<0>,94:72]
2023-09-08 17:25:28:605 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,94:78].[@-1,61:64='text',<0>,94:81]
2023-09-08 17:25:28:605 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,94:118].[@-1,103:103='e',<0>,94:123]
2023-09-08 17:25:28:606 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 17:25:28:608 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,98:18]
2023-09-08 17:25:28:608 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,98:53].[@-1,40:43='line',<0>,98:56]
2023-09-08 17:25:28:608 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,98:63].[@-1,50:52='pos',<0>,98:66]
2023-09-08 17:25:28:609 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,98:72].[@-1,59:62='text',<0>,98:75]
2023-09-08 17:25:28:609 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,98:82].[@-1,71:71='e',<0>,98:87]
2023-09-08 17:25:28:610 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacionIndexVector($ID.line, $ID.pos, $ID.text, $index.e, $listan.e) 
2023-09-08 17:25:28:610 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,99:52]
2023-09-08 17:25:28:610 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,99:98].[@-1,51:54='line',<0>,99:101]
2023-09-08 17:25:28:611 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,99:108].[@-1,61:63='pos',<0>,99:111]
2023-09-08 17:25:28:611 action-translator LogManager.java:25 qattr [@-1,67:68='ID',<0>,99:117].[@-1,70:73='text',<0>,99:120]
2023-09-08 17:25:28:611 action-translator LogManager.java:25 qattr [@-1,77:81='index',<0>,99:127].[@-1,83:83='e',<0>,99:133]
2023-09-08 17:25:28:611 action-translator LogManager.java:25 qattr [@-1,87:92='listan',<0>,99:137].[@-1,94:94='e',<0>,99:144]
2023-09-08 17:25:28:619 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 17:25:28:620 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,100:30]
2023-09-08 17:25:28:620 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,100:74].[@-1,48:51='line',<0>,100:77]
2023-09-08 17:25:28:620 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,100:84].[@-1,58:60='pos',<0>,100:87]
2023-09-08 17:25:28:622 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,100:93].[@-1,67:70='text',<0>,100:96]
2023-09-08 17:25:28:622 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,100:103].[@-1,79:79='e',<0>,100:108]
2023-09-08 17:25:28:622 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,100:112].[@-1,86:89='text',<0>,100:115]
2023-09-08 17:25:28:624 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 17:25:28:624 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,104:8]
2023-09-08 17:25:28:624 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 17:25:28:624 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,105:10]
2023-09-08 17:25:28:624 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 17:25:28:625 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,106:8]
2023-09-08 17:25:28:625 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 17:25:28:625 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,107:9]
2023-09-08 17:25:28:626 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 17:25:28:626 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,114:46].[@-1,196:197='tm',<0>,114:51]
2023-09-08 17:25:28:626 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,115:33]
2023-09-08 17:25:28:626 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 17:25:28:628 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,118:13]
2023-09-08 17:25:28:628 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,119:49].[@-1,92:93='ty',<0>,119:55]
2023-09-08 17:25:28:629 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,120:13]
2023-09-08 17:25:28:629 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,120:26]
2023-09-08 17:25:28:633 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 17:25:28:633 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,125:44]
2023-09-08 17:25:28:633 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,125:73].[@-1,37:41='start',<0>,125:80]
2023-09-08 17:25:28:633 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,125:98].[@-1,62:66='start',<0>,125:105]
2023-09-08 17:25:28:634 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,125:125].[@-1,89:89='e',<0>,125:132]
2023-09-08 17:25:28:634 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,125:136].[@-1,100:100='e',<0>,125:143]
2023-09-08 17:25:28:634 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 17:25:28:634 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,126:7]
2023-09-08 17:25:28:634 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,126:12].[@-1,11:11='e',<0>,126:17]
2023-09-08 17:25:28:643 action-translator LogManager.java:25 translate 
2023-09-08 17:25:28:644 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 17:25:28:645 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 17:25:28:645 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 17:25:28:645 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 17:25:28:645 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 17:25:28:645 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 17:25:28:645 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-08 17:25:28:646 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-08 17:25:28:649 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-08 17:25:28:650 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-08 17:25:28:650 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-08 17:25:28:651 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 17:25:28:651 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-08 17:25:28:652 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-08 17:25:28:652 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 17:25:28:652 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-08 17:25:28:652 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-08 17:25:28:653 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 17:25:28:653 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:75]
2023-09-08 17:25:28:654 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:101].[@-1,31:34='line',<0>,6:104]
2023-09-08 17:25:28:654 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:111].[@-1,41:43='pos',<0>,6:114]
2023-09-08 17:25:28:654 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,6:120].[@-1,50:53='text',<0>,6:123]
2023-09-08 17:25:28:654 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)
2023-09-08 17:25:28:655 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:77]
2023-09-08 17:25:28:655 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,7:105].[@-1,33:36='line',<0>,7:108]
2023-09-08 17:25:28:655 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,7:115].[@-1,43:45='pos',<0>,7:118]
2023-09-08 17:25:28:655 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,7:124].[@-1,52:55='text',<0>,7:127]
2023-09-08 17:25:28:655 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 17:25:28:655 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:43]
2023-09-08 17:25:28:655 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,8:48].[@-1,12:12='p',<0>,8:53]
2023-09-08 17:25:28:658 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 17:25:28:658 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:87]
2023-09-08 17:25:28:659 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,9:113].[@-1,36:39='line',<0>,9:121]
2023-09-08 17:25:28:659 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,9:128].[@-1,51:53='pos',<0>,9:136]
2023-09-08 17:25:28:659 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,9:142].[@-1,68:68='l',<0>,9:153]
2023-09-08 17:25:28:661 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 17:25:28:662 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,12:30].[@-1,39:42='text',<0>,12:37]
2023-09-08 17:25:28:662 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,13:43].[@-1,102:105='text',<0>,13:50]
2023-09-08 17:25:28:662 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,17:13]
2023-09-08 17:25:28:669 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,17:43].[@-1,240:243='line',<0>,17:50]
2023-09-08 17:25:28:669 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,17:56].[@-1,253:255='pos',<0>,17:63]
2023-09-08 17:25:28:670 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,19:37].[@-1,341:344='text',<0>,19:44]
2023-09-08 17:25:28:670 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,23:13]
2023-09-08 17:25:28:671 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,23:43].[@-1,474:477='line',<0>,23:50]
2023-09-08 17:25:28:671 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,23:56].[@-1,487:489='pos',<0>,23:63]
2023-09-08 17:25:28:672 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 17:25:28:672 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,28:16].[@-1,25:28='text',<0>,28:23]
2023-09-08 17:25:28:672 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,29:9]
2023-09-08 17:25:28:674 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,29:39].[@-1,77:80='line',<0>,29:46]
2023-09-08 17:25:28:674 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,29:53].[@-1,91:93='pos',<0>,29:60]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 17:25:28:676 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 17:25:28:676 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-08 17:25:28:676 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 17:25:28:677 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:32]
2023-09-08 17:25:28:677 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,33:62].[@-1,36:39='line',<0>,33:66]
2023-09-08 17:25:28:677 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,33:73].[@-1,47:49='pos',<0>,33:77]
2023-09-08 17:25:28:678 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 17:25:28:679 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:685 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:160]
2023-09-08 17:25:28:687 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:190].[@-1,37:41='start',<0>,36:195]
2023-09-08 17:25:28:687 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:213].[@-1,60:64='start',<0>,36:218]
2023-09-08 17:25:28:689 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:238].[@-1,85:85='e',<0>,36:243]
2023-09-08 17:25:28:693 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:247].[@-1,92:95='text',<0>,36:250]
2023-09-08 17:25:28:694 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:257].[@-1,105:105='e',<0>,36:263]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 17:25:28:705 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:705 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:149]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:179].[@-1,37:41='start',<0>,37:184]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:202].[@-1,60:64='start',<0>,37:207]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:227].[@-1,85:85='e',<0>,37:232]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:236].[@-1,92:95='text',<0>,37:239]
2023-09-08 17:25:28:705 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:246].[@-1,105:105='e',<0>,37:252]
2023-09-08 17:25:28:707 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 17:25:28:708 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:709 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-08 17:25:28:709 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-08 17:25:28:709 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-08 17:25:28:710 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-08 17:25:28:718 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-08 17:25:28:720 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-08 17:25:28:722 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 17:25:28:722 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:722 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:153]
2023-09-08 17:25:28:722 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:183].[@-1,37:41='start',<0>,39:188]
2023-09-08 17:25:28:723 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:206].[@-1,60:64='start',<0>,39:211]
2023-09-08 17:25:28:723 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:231].[@-1,85:85='e',<0>,39:236]
2023-09-08 17:25:28:723 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:240].[@-1,92:95='text',<0>,39:243]
2023-09-08 17:25:28:723 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:250].[@-1,105:105='e',<0>,39:256]
2023-09-08 17:25:28:723 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 17:25:28:724 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:724 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:152]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:182].[@-1,37:41='start',<0>,40:187]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:205].[@-1,60:64='start',<0>,40:210]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:230].[@-1,85:85='e',<0>,40:235]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:239].[@-1,92:95='text',<0>,40:242]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:249].[@-1,105:105='e',<0>,40:255]
2023-09-08 17:25:28:725 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-08 17:25:28:726 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:726 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:127]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:157].[@-1,37:41='start',<0>,41:162]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:180].[@-1,60:64='start',<0>,41:185]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:205].[@-1,85:85='e',<0>,41:210]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:214].[@-1,92:95='text',<0>,41:217]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:224].[@-1,105:105='e',<0>,41:230]
2023-09-08 17:25:28:726 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 17:25:28:727 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 17:25:28:727 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:126]
2023-09-08 17:25:28:727 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:156].[@-1,37:41='start',<0>,42:161]
2023-09-08 17:25:28:727 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:179].[@-1,60:64='start',<0>,42:184]
2023-09-08 17:25:28:728 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:204].[@-1,85:85='e',<0>,42:209]
2023-09-08 17:25:28:728 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:213].[@-1,92:95='text',<0>,42:216]
2023-09-08 17:25:28:728 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:223].[@-1,105:105='e',<0>,42:229]
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-08 17:25:28:732 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 17:25:28:734 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 17:25:28:735 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,172:29]
2023-09-08 17:25:28:735 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,172:58].[@-1,35:38='line',<0>,172:62]
2023-09-08 17:25:28:735 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,172:69].[@-1,46:48='pos',<0>,172:73]
2023-09-08 17:25:28:735 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,172:79].[@-1,57:57='e',<0>,172:84]
2023-09-08 17:25:28:735 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 17:25:28:736 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,173:31]
2023-09-08 17:25:28:736 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,173:62].[@-1,39:42='line',<0>,173:68]
2023-09-08 17:25:28:736 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,173:75].[@-1,52:54='pos',<0>,173:81]
2023-09-08 17:25:28:738 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,173:87].[@-1,63:63='e',<0>,173:92]
2023-09-08 17:25:28:739 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 17:25:28:739 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,174:29]
2023-09-08 17:25:28:739 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,174:61].[@-1,38:41='line',<0>,174:65]
2023-09-08 17:25:28:739 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,174:72].[@-1,49:51='pos',<0>,174:76]
2023-09-08 17:25:28:740 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,174:82].[@-1,60:60='e',<0>,174:87]
2023-09-08 17:25:28:741 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 17:25:28:741 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,178:31]
2023-09-08 17:25:28:741 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,178:62].[@-1,41:44='line',<0>,178:70]
2023-09-08 17:25:28:741 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,178:77].[@-1,56:58='pos',<0>,178:85]
2023-09-08 17:25:28:741 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,178:91].[@-1,73:73='l',<0>,178:102]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 17:25:28:742 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,179:20]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,179:51].[@-1,41:44='line',<0>,179:59]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,179:66].[@-1,56:58='pos',<0>,179:74]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 17:25:28:742 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,180:7]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,180:42].[@-1,40:43='line',<0>,180:45]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,180:52].[@-1,50:52='pos',<0>,180:55]
2023-09-08 17:25:28:742 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,180:61].[@-1,59:62='text',<0>,180:64]
2023-09-08 17:25:28:743 action-translator LogManager.java:25 translate 
2023-09-08 17:25:28:744 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 17:25:28:744 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 17:25:28:744 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 17:25:28:744 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 17:25:28:744 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 17:25:28:744 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 17:25:28:745 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 17:25:28:745 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 17:25:28:745 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 17:25:28:745 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 17:25:28:745 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 17:25:28:753 action-translator LogManager.java:25 translate 
2023-09-08 17:25:28:753 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 17:25:28:753 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-08 17:25:28:754 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:66].[@-1,36:39='line',<0>,2:69]
2023-09-08 17:25:28:754 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:76].[@-1,46:48='pos',<0>,2:79]
2023-09-08 17:25:28:754 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:85].[@-1,55:58='text',<0>,2:88]
2023-09-08 17:25:28:754 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 17:25:28:754 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 17:25:28:755 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:131]
2023-09-08 17:25:28:755 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:163].[@-1,39:43='start',<0>,5:168]
2023-09-08 17:25:28:755 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:186].[@-1,62:66='start',<0>,5:191]
2023-09-08 17:25:28:755 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:211].[@-1,87:87='p',<0>,5:216]
2023-09-08 17:25:28:756 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:220].[@-1,96:96='e',<0>,5:225]
2023-09-08 17:25:28:756 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 17:25:29:656 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 17:25:29:656 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 17:25:30:510 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 17:25:30:510 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

