2023-09-04 13:47:51:023 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-04 13:47:51:047 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-04 13:47:51:623 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 13:47:51:631 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 13:47:51:635 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 13:47:51:635 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-04 13:47:51:670 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=433> left=expr<tokenIndex=437,p=19> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=545> left=expr<tokenIndex=549,p=13> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=587> expr<tokenIndex=589> PAR_DER<tokenIndex=591> { $e = $expr.e } 
        | conversionstmt<tokenIndex=597> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=603> op=(SUM<tokenIndex=608>|RES<tokenIndex=610>) IGUAL<tokenIndex=613> expr<tokenIndex=615,p=8> {$e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)} 
        | list=listArray<tokenIndex=623> { $e = $list.p} 
        | COR_IZQ<tokenIndex=629> listParams<tokenIndex=631> COR_DER<tokenIndex=633> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=639>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=645>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=651> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=657> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=663> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MULT<tokenIndex=450>|DIV<tokenIndex=452>|MOD<tokenIndex=454>) right=expr<tokenIndex=459,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(SUM<tokenIndex=472>|RES<tokenIndex=474>) right=expr<tokenIndex=479,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAYIG<tokenIndex=492>|MAYOR<tokenIndex=494>) right=expr<tokenIndex=499,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MENIG<tokenIndex=512>|MENOR<tokenIndex=514>) right=expr<tokenIndex=519,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=532>|DIFE<tokenIndex=534>) right=expr<tokenIndex=539,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=561> right=expr<tokenIndex=565,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=577> right=expr<tokenIndex=581,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-04 13:47:51:718 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 433))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 437) (= p 19)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 545))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 549) (= p 13)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 587))) (expr (ELEMENT_OPTIONS (= tokenIndex 589))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 591))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 597))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 603))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 608))) (RES (ELEMENT_OPTIONS (= tokenIndex 610))))) (IGUAL (ELEMENT_OPTIONS (= tokenIndex 613))) (expr (ELEMENT_OPTIONS (= tokenIndex 615) (= p 8))) {$e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 623)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 629))) (listParams (ELEMENT_OPTIONS (= tokenIndex 631))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 633))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 639))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 645))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 651))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 657))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 663))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 450))) (DIV (ELEMENT_OPTIONS (= tokenIndex 452))) (MOD (ELEMENT_OPTIONS (= tokenIndex 454))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 459) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 472))) (RES (ELEMENT_OPTIONS (= tokenIndex 474))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 479) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 492))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 494))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 499) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 512))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 514))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 519) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 532))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 534))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 539) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 561)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 565) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 577)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 581) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-04 13:47:51:719 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=732> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=724> expr<tokenIndex=726> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-04 13:47:51:722 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 732))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 724))) (expr (ELEMENT_OPTIONS (= tokenIndex 726))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-04 13:47:51:723 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=761> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=751> expr<tokenIndex=753> COR_DER<tokenIndex=755> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-04 13:47:51:725 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 761))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 751))) (expr (ELEMENT_OPTIONS (= tokenIndex 753))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 755))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-04 13:47:51:741 grammar LogManager.java:25 import INT=1
2023-09-04 13:47:51:741 grammar LogManager.java:25 import FLOAT=2
2023-09-04 13:47:51:741 grammar LogManager.java:25 import BOOL=3
2023-09-04 13:47:51:741 grammar LogManager.java:25 import STR=4
2023-09-04 13:47:51:741 grammar LogManager.java:25 import TRU=5
2023-09-04 13:47:51:742 grammar LogManager.java:25 import FAL=6
2023-09-04 13:47:51:742 grammar LogManager.java:25 import PRINT=7
2023-09-04 13:47:51:742 grammar LogManager.java:25 import IF=8
2023-09-04 13:47:51:742 grammar LogManager.java:25 import ELSE=9
2023-09-04 13:47:51:742 grammar LogManager.java:25 import WHILE=10
2023-09-04 13:47:51:742 grammar LogManager.java:25 import FOR=11
2023-09-04 13:47:51:742 grammar LogManager.java:25 import IN=12
2023-09-04 13:47:51:742 grammar LogManager.java:25 import VAR=13
2023-09-04 13:47:51:742 grammar LogManager.java:25 import LET=14
2023-09-04 13:47:51:742 grammar LogManager.java:25 import NIL=15
2023-09-04 13:47:51:742 grammar LogManager.java:25 import NUMBER=16
2023-09-04 13:47:51:742 grammar LogManager.java:25 import STRING=17
2023-09-04 13:47:51:742 grammar LogManager.java:25 import ID=18
2023-09-04 13:47:51:743 grammar LogManager.java:25 import DIFE=19
2023-09-04 13:47:51:743 grammar LogManager.java:25 import IG_IG=20
2023-09-04 13:47:51:743 grammar LogManager.java:25 import NOT=21
2023-09-04 13:47:51:743 grammar LogManager.java:25 import OR=22
2023-09-04 13:47:51:743 grammar LogManager.java:25 import AND=23
2023-09-04 13:47:51:743 grammar LogManager.java:25 import IGUAL=24
2023-09-04 13:47:51:743 grammar LogManager.java:25 import MAYIG=25
2023-09-04 13:47:51:743 grammar LogManager.java:25 import MENIG=26
2023-09-04 13:47:51:743 grammar LogManager.java:25 import MAYOR=27
2023-09-04 13:47:51:743 grammar LogManager.java:25 import MENOR=28
2023-09-04 13:47:51:744 grammar LogManager.java:25 import MULT=29
2023-09-04 13:47:51:744 grammar LogManager.java:25 import DIV=30
2023-09-04 13:47:51:744 grammar LogManager.java:25 import SUM=31
2023-09-04 13:47:51:744 grammar LogManager.java:25 import RES=32
2023-09-04 13:47:51:744 grammar LogManager.java:25 import MOD=33
2023-09-04 13:47:51:744 grammar LogManager.java:25 import PAR_IZQ=34
2023-09-04 13:47:51:744 grammar LogManager.java:25 import PAR_DER=35
2023-09-04 13:47:51:744 grammar LogManager.java:25 import LLAVE_IZQ=36
2023-09-04 13:47:51:744 grammar LogManager.java:25 import LLAVE_DER=37
2023-09-04 13:47:51:744 grammar LogManager.java:25 import DOSPUNTOS=38
2023-09-04 13:47:51:744 grammar LogManager.java:25 import COR_IZQ=39
2023-09-04 13:47:51:744 grammar LogManager.java:25 import COR_DER=40
2023-09-04 13:47:51:744 grammar LogManager.java:25 import COMA=41
2023-09-04 13:47:51:744 grammar LogManager.java:25 import CIERRAPREGUNTA=42
2023-09-04 13:47:51:744 grammar LogManager.java:25 import PUNTO=43
2023-09-04 13:47:51:745 grammar LogManager.java:25 import WHITESPACE=44
2023-09-04 13:47:51:745 grammar LogManager.java:25 import COMMENT=45
2023-09-04 13:47:51:745 grammar LogManager.java:25 import LINE_COMMENT=46
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'Int'=1
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'Float'=2
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'Bool'=3
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'String'=4
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'true'=5
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'false'=6
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'print'=7
2023-09-04 13:47:51:745 grammar LogManager.java:25 import 'if'=8
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'else'=9
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'while'=10
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'for'=11
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'in'=12
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'var'=13
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'let'=14
2023-09-04 13:47:51:746 grammar LogManager.java:25 import 'nil'=15
2023-09-04 13:47:51:746 grammar LogManager.java:25 import '!='=19
2023-09-04 13:47:51:746 grammar LogManager.java:25 import '=='=20
2023-09-04 13:47:51:746 grammar LogManager.java:25 import '!'=21
2023-09-04 13:47:51:746 grammar LogManager.java:25 import '||'=22
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '&&'=23
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '='=24
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '>='=25
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '<='=26
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '>'=27
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '<'=28
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '*'=29
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '/'=30
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '+'=31
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '-'=32
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '%'=33
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '('=34
2023-09-04 13:47:51:747 grammar LogManager.java:25 import ')'=35
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '{'=36
2023-09-04 13:47:51:747 grammar LogManager.java:25 import '}'=37
2023-09-04 13:47:51:747 grammar LogManager.java:25 import ':'=38
2023-09-04 13:47:51:748 grammar LogManager.java:25 import '['=39
2023-09-04 13:47:51:748 grammar LogManager.java:25 import ']'=40
2023-09-04 13:47:51:748 grammar LogManager.java:25 import ','=41
2023-09-04 13:47:51:748 grammar LogManager.java:25 import '?'=42
2023-09-04 13:47:51:748 grammar LogManager.java:25 import '.'=43
2023-09-04 13:47:51:748 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, NUMBER=16, STRING=17, ID=18, DIFE=19, IG_IG=20, NOT=21, OR=22, AND=23, IGUAL=24, MAYIG=25, MENIG=26, MAYOR=27, MENOR=28, MULT=29, DIV=30, SUM=31, RES=32, MOD=33, PAR_IZQ=34, PAR_DER=35, LLAVE_IZQ=36, LLAVE_DER=37, DOSPUNTOS=38, COR_IZQ=39, COR_DER=40, COMA=41, CIERRAPREGUNTA=42, PUNTO=43, WHITESPACE=44, COMMENT=45, LINE_COMMENT=46, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, '!='=19, '=='=20, '!'=21, '||'=22, '&&'=23, '='=24, '>='=25, '<='=26, '>'=27, '<'=28, '*'=29, '/'=30, '+'=31, '-'=32, '%'=33, '('=34, ')'=35, '{'=36, '}'=37, ':'=38, '['=39, ']'=40, ','=41, '?'=42, '.'=43}
2023-09-04 13:47:51:755 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, NUMBER=16, STRING=17, ID=18, DIFE=19, IG_IG=20, NOT=21, OR=22, AND=23, IGUAL=24, MAYIG=25, MENIG=26, MAYOR=27, MENOR=28, MULT=29, DIV=30, SUM=31, RES=32, MOD=33, PAR_IZQ=34, PAR_DER=35, LLAVE_IZQ=36, LLAVE_DER=37, DOSPUNTOS=38, COR_IZQ=39, COR_DER=40, COMA=41, CIERRAPREGUNTA=42, PUNTO=43, WHITESPACE=44, COMMENT=45, LINE_COMMENT=46}
2023-09-04 13:47:51:755 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, '!='=19, '=='=20, '!'=21, '||'=22, '&&'=23, '='=24, '>='=25, '<='=26, '>'=27, '<'=28, '*'=29, '/'=30, '+'=31, '-'=32, '%'=33, '('=34, ')'=35, '{'=36, '}'=37, ':'=38, '['=39, ']'=40, ','=41, '?'=42, '.'=43}
2023-09-04 13:47:51:805 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-04 13:47:51:805 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 18}, {<EOF>, 37}]
2023-09-04 13:47:51:806 LL1 LogManager.java:25 LL(1)? true
2023-09-04 13:47:51:806 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-04 13:47:51:806 LL1 LogManager.java:25 look=[7, 8, {13..14}, 18, 10, 11]
2023-09-04 13:47:51:806 LL1 LogManager.java:25 LL(1)? true
2023-09-04 13:47:51:806 LL1 LogManager.java:25 
DECISION 2 in rule blockelsif
2023-09-04 13:47:51:807 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 18, 37}]
2023-09-04 13:47:51:807 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:807 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-09-04 13:47:51:807 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-04 13:47:51:807 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:807 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-09-04 13:47:51:807 LL1 LogManager.java:25 look=[13, 13, 13, 14, 14]
2023-09-04 13:47:51:807 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:807 LL1 LogManager.java:25 
DECISION 5 in rule types
2023-09-04 13:47:51:807 LL1 LogManager.java:25 look=[1, 2, 4, 3, 39]
2023-09-04 13:47:51:807 LL1 LogManager.java:25 LL(1)? true
2023-09-04 13:47:51:807 LL1 LogManager.java:25 
DECISION 6 in rule exprFor
2023-09-04 13:47:51:807 LL1 LogManager.java:25 look=[{1..2, 4..6, 15..18, 21, 32, 34, 39}, {1..2, 4..6, 15..18, 21, 32, 34, 39}]
2023-09-04 13:47:51:808 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:808 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-09-04 13:47:51:808 LL1 LogManager.java:25 look=[32, 21, 34, {1..2, 4}, 18, 18, 39, 16, 17, 5, 6, 15]
2023-09-04 13:47:51:808 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:808 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-09-04 13:47:51:808 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-04 13:47:51:808 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:808 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-09-04 13:47:51:808 LL1 LogManager.java:25 look=[null, null]
2023-09-04 13:47:51:809 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:809 LL1 LogManager.java:25 
DECISION 10 in rule conversionstmt
2023-09-04 13:47:51:809 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-04 13:47:51:809 LL1 LogManager.java:25 LL(1)? true
2023-09-04 13:47:51:809 LL1 LogManager.java:25 
DECISION 11 in rule listParams
2023-09-04 13:47:51:809 LL1 LogManager.java:25 look=[null, {35, 40}]
2023-09-04 13:47:51:809 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:809 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2023-09-04 13:47:51:809 LL1 LogManager.java:25 look=[null, null]
2023-09-04 13:47:51:809 LL1 LogManager.java:25 LL(1)? false
2023-09-04 13:47:51:816 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-04 13:47:51:833 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-04 13:47:51:833 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-04 13:47:51:835 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-04 13:47:51:837 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-04 13:47:51:837 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-04 13:47:51:840 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-04 13:47:51:841 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-04 13:47:51:841 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-04 13:47:51:843 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-04 13:47:51:843 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-09-04 13:47:51:843 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-09-04 13:47:51:843 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-04 13:47:51:844 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-04 13:47:51:844 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-04 13:47:51:845 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-04 13:47:51:845 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-09-04 13:47:51:845 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-09-04 13:47:51:846 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-04 13:47:51:846 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:19]
2023-09-04 13:47:51:846 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:27].[@-1,25:28='asig',<0>,42:42]
2023-09-04 13:47:51:846 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-04 13:47:51:847 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-04 13:47:51:847 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-04 13:47:51:847 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-04 13:47:51:847 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-04 13:47:51:847 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-04 13:47:51:850 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-04 13:47:51:850 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,48:37]
2023-09-04 13:47:51:850 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,48:67].[@-1,38:41='line',<0>,48:73]
2023-09-04 13:47:51:850 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,48:79].[@-1,50:52='pos',<0>,48:85]
2023-09-04 13:47:51:851 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,48:90].[@-1,66:66='l',<0>,48:101]
2023-09-04 13:47:51:851 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-04 13:47:51:851 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,54:5]
2023-09-04 13:47:51:852 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-04 13:47:51:852 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,61:13]
2023-09-04 13:47:51:852 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,61:29]
2023-09-04 13:47:51:855 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-04 13:47:51:855 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,67:38]
2023-09-04 13:47:51:856 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,67:67].[@-1,34:37='line',<0>,67:70]
2023-09-04 13:47:51:856 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,67:77].[@-1,44:46='pos',<0>,67:80]
2023-09-04 13:47:51:856 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,67:86].[@-1,55:55='e',<0>,67:91]
2023-09-04 13:47:51:856 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,67:95].[@-1,65:67='blk',<0>,67:101]
2023-09-04 13:47:51:857 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-04 13:47:51:857 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,68:84]
2023-09-04 13:47:51:857 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,68:113].[@-1,33:36='line',<0>,68:116]
2023-09-04 13:47:51:858 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,68:123].[@-1,43:45='pos',<0>,68:126]
2023-09-04 13:47:51:858 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,68:132].[@-1,54:54='e',<0>,68:137]
2023-09-04 13:47:51:858 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,68:141].[@-1,65:67='blk',<0>,68:148]
2023-09-04 13:47:51:858 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,68:154].[@-1,80:82='blk',<0>,68:163]
2023-09-04 13:47:51:859 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-04 13:47:51:859 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,69:60]
2023-09-04 13:47:51:859 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,69:89].[@-1,33:36='line',<0>,69:92]
2023-09-04 13:47:51:859 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,69:99].[@-1,43:45='pos',<0>,69:102]
2023-09-04 13:47:51:860 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,69:108].[@-1,54:54='e',<0>,69:113]
2023-09-04 13:47:51:860 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,69:117].[@-1,65:67='blk',<0>,69:124]
2023-09-04 13:47:51:860 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,69:130].[@-1,82:86='blkif',<0>,69:141]
2023-09-04 13:47:51:862 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-04 13:47:51:862 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,73:41]
2023-09-04 13:47:51:862 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,73:76].[@-1,43:46='line',<0>,73:82]
2023-09-04 13:47:51:862 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,73:89].[@-1,56:58='pos',<0>,73:95]
2023-09-04 13:47:51:863 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,73:101].[@-1,67:67='e',<0>,73:106]
2023-09-04 13:47:51:863 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,73:110].[@-1,77:79='blk',<0>,73:116]
2023-09-04 13:47:51:866 action-translator LogManager.java:25 translate 
2023-09-04 13:47:51:879 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-04 13:47:51:880 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,81:39]
2023-09-04 13:47:51:880 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,81:74].[@-1,41:44='line',<0>,81:78]
2023-09-04 13:47:51:880 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,81:85].[@-1,52:54='pos',<0>,81:89]
2023-09-04 13:47:51:880 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,81:95].[@-1,61:64='text',<0>,81:98]
2023-09-04 13:47:51:881 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,81:110].[@-1,79:80='ty',<0>,81:116]
2023-09-04 13:47:51:881 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,81:121].[@-1,89:89='e',<0>,81:126]
2023-09-04 13:47:51:881 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-04 13:47:51:882 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,82:22]
2023-09-04 13:47:51:882 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,82:57].[@-1,41:44='line',<0>,82:61]
2023-09-04 13:47:51:882 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,82:68].[@-1,52:54='pos',<0>,82:72]
2023-09-04 13:47:51:882 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,82:78].[@-1,61:64='text',<0>,82:81]
2023-09-04 13:47:51:882 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,82:117].[@-1,102:102='e',<0>,82:122]
2023-09-04 13:47:51:883 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-04 13:47:51:883 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,83:42]
2023-09-04 13:47:51:883 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,83:77].[@-1,41:44='line',<0>,83:81]
2023-09-04 13:47:51:884 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,83:88].[@-1,52:54='pos',<0>,83:92]
2023-09-04 13:47:51:884 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,83:98].[@-1,61:64='text',<0>,83:101]
2023-09-04 13:47:51:884 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,83:113].[@-1,79:80='ty',<0>,83:119]
2023-09-04 13:47:51:885 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-04 13:47:51:885 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,84:38]
2023-09-04 13:47:51:885 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,84:73].[@-1,41:44='line',<0>,84:77]
2023-09-04 13:47:51:886 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,84:84].[@-1,52:54='pos',<0>,84:88]
2023-09-04 13:47:51:886 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,84:94].[@-1,61:64='text',<0>,84:97]
2023-09-04 13:47:51:886 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,84:110].[@-1,80:81='ty',<0>,84:116]
2023-09-04 13:47:51:886 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,84:121].[@-1,90:90='e',<0>,84:126]
2023-09-04 13:47:51:887 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-04 13:47:51:887 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,85:22]
2023-09-04 13:47:51:887 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,85:57].[@-1,41:44='line',<0>,85:61]
2023-09-04 13:47:51:887 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,85:68].[@-1,52:54='pos',<0>,85:72]
2023-09-04 13:47:51:887 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,85:78].[@-1,61:64='text',<0>,85:81]
2023-09-04 13:47:51:887 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,85:118].[@-1,103:103='e',<0>,85:123]
2023-09-04 13:47:51:888 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 13:47:51:888 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,89:18]
2023-09-04 13:47:51:889 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,89:53].[@-1,40:43='line',<0>,89:56]
2023-09-04 13:47:51:889 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,89:63].[@-1,50:52='pos',<0>,89:66]
2023-09-04 13:47:51:889 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,89:72].[@-1,59:62='text',<0>,89:75]
2023-09-04 13:47:51:889 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,89:82].[@-1,71:71='e',<0>,89:87]
2023-09-04 13:47:51:890 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-04 13:47:51:890 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,93:8]
2023-09-04 13:47:51:890 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-04 13:47:51:890 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,94:10]
2023-09-04 13:47:51:891 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-04 13:47:51:891 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,95:8]
2023-09-04 13:47:51:891 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-04 13:47:51:891 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,96:9]
2023-09-04 13:47:51:891 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-04 13:47:51:891 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,97:20]
2023-09-04 13:47:51:893 action-translator LogManager.java:25 translate 
2023-09-04 13:47:51:893 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-04 13:47:51:893 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,102:7]
2023-09-04 13:47:51:893 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,102:12].[@-1,11:11='e',<0>,102:17]
2023-09-04 13:47:51:897 action-translator LogManager.java:25 translate 
2023-09-04 13:47:51:897 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-04 13:47:51:897 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-04 13:47:51:897 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-04 13:47:51:897 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-04 13:47:51:898 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-04 13:47:51:898 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-04 13:47:51:899 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-04 13:47:51:899 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-04 13:47:51:899 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-04 13:47:51:899 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-04 13:47:51:900 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-04 13:47:51:900 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 translate $e = expressions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-04 13:47:51:902 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,6:122]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,6:162].[@-1,44:47='line',<0>,6:165]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,6:172].[@-1,54:56='pos',<0>,6:175]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 qattr [@-1,60:61='ID',<0>,6:181].[@-1,63:66='text',<0>,6:184]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,6:191].[@-1,75:75='e',<0>,6:196]
2023-09-04 13:47:51:902 action-translator LogManager.java:25 qattr [@-1,79:80='op',<0>,6:200].[@-1,82:85='text',<0>,6:203]
2023-09-04 13:47:51:903 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-04 13:47:51:903 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:43]
2023-09-04 13:47:51:903 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:48].[@-1,12:12='p',<0>,7:53]
2023-09-04 13:47:51:903 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-04 13:47:51:903 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:87]
2023-09-04 13:47:51:903 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,8:113].[@-1,36:39='line',<0>,8:121]
2023-09-04 13:47:51:904 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,8:128].[@-1,51:53='pos',<0>,8:136]
2023-09-04 13:47:51:904 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,8:142].[@-1,68:68='l',<0>,8:153]
2023-09-04 13:47:51:904 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-04 13:47:51:904 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-04 13:47:51:905 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-04 13:47:51:905 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-04 13:47:51:905 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-04 13:47:51:906 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-04 13:47:51:907 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-04 13:47:51:907 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-04 13:47:51:907 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-04 13:47:51:907 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-04 13:47:51:908 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-04 13:47:51:908 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-04 13:47:51:908 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-04 13:47:51:908 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-04 13:47:51:908 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-04 13:47:51:909 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-04 13:47:51:909 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-04 13:47:51:909 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-04 13:47:51:909 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-04 13:47:51:909 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-04 13:47:51:910 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-04 13:47:51:910 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-04 13:47:51:910 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-04 13:47:51:910 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-04 13:47:51:910 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-04 13:47:51:910 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-04 13:47:51:910 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-04 13:47:51:911 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 13:47:51:912 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:912 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:160]
2023-09-04 13:47:51:912 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:190].[@-1,37:41='start',<0>,35:195]
2023-09-04 13:47:51:912 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:213].[@-1,60:64='start',<0>,35:218]
2023-09-04 13:47:51:912 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:238].[@-1,85:85='e',<0>,35:243]
2023-09-04 13:47:51:912 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:247].[@-1,92:95='text',<0>,35:250]
2023-09-04 13:47:51:912 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:257].[@-1,105:105='e',<0>,35:263]
2023-09-04 13:47:51:913 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 13:47:51:913 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:913 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-09-04 13:47:51:913 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-09-04 13:47:51:914 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-09-04 13:47:51:914 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-09-04 13:47:51:914 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-09-04 13:47:51:914 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-09-04 13:47:51:914 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 13:47:51:915 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:915 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:153]
2023-09-04 13:47:51:915 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:183].[@-1,37:41='start',<0>,37:188]
2023-09-04 13:47:51:915 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:206].[@-1,60:64='start',<0>,37:211]
2023-09-04 13:47:51:915 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:231].[@-1,85:85='e',<0>,37:236]
2023-09-04 13:47:51:915 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:240].[@-1,92:95='text',<0>,37:243]
2023-09-04 13:47:51:916 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:250].[@-1,105:105='e',<0>,37:256]
2023-09-04 13:47:51:916 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 13:47:51:916 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:917 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-04 13:47:51:917 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-04 13:47:51:917 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-04 13:47:51:917 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-04 13:47:51:917 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-04 13:47:51:918 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-04 13:47:51:918 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 13:47:51:918 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:919 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:152]
2023-09-04 13:47:51:919 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:182].[@-1,37:41='start',<0>,39:187]
2023-09-04 13:47:51:919 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:205].[@-1,60:64='start',<0>,39:210]
2023-09-04 13:47:51:919 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:230].[@-1,85:85='e',<0>,39:235]
2023-09-04 13:47:51:919 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:239].[@-1,92:95='text',<0>,39:242]
2023-09-04 13:47:51:919 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:249].[@-1,105:105='e',<0>,39:255]
2023-09-04 13:47:51:920 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-04 13:47:51:920 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:920 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-09-04 13:47:51:920 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-09-04 13:47:51:920 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-09-04 13:47:51:920 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-09-04 13:47:51:920 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-09-04 13:47:51:921 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-09-04 13:47:51:921 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-04 13:47:51:921 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 13:47:51:921 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-09-04 13:47:51:921 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-09-04 13:47:51:922 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-09-04 13:47:51:922 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-09-04 13:47:51:922 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-09-04 13:47:51:922 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 13:47:51:925 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-04 13:47:51:926 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-04 13:47:51:927 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-04 13:47:51:927 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,147:29]
2023-09-04 13:47:51:927 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,147:58].[@-1,35:38='line',<0>,147:62]
2023-09-04 13:47:51:927 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,147:69].[@-1,46:48='pos',<0>,147:73]
2023-09-04 13:47:51:927 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,147:79].[@-1,57:57='e',<0>,147:84]
2023-09-04 13:47:51:928 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-04 13:47:51:928 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,148:31]
2023-09-04 13:47:51:928 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,148:62].[@-1,39:42='line',<0>,148:68]
2023-09-04 13:47:51:928 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,148:75].[@-1,52:54='pos',<0>,148:81]
2023-09-04 13:47:51:928 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,148:87].[@-1,63:63='e',<0>,148:92]
2023-09-04 13:47:51:929 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-04 13:47:51:929 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,149:29]
2023-09-04 13:47:51:929 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,149:61].[@-1,38:41='line',<0>,149:65]
2023-09-04 13:47:51:929 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,149:72].[@-1,49:51='pos',<0>,149:76]
2023-09-04 13:47:51:930 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,149:82].[@-1,60:60='e',<0>,149:87]
2023-09-04 13:47:51:931 action-translator LogManager.java:25 translate 
2023-09-04 13:47:51:932 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-04 13:47:51:932 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-04 13:47:51:932 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-04 13:47:51:932 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-04 13:47:51:932 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-04 13:47:51:932 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 13:47:51:933 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-04 13:47:51:933 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-04 13:47:51:933 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-04 13:47:51:933 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-04 13:47:51:933 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 13:47:51:934 action-translator LogManager.java:25 translate 
2023-09-04 13:47:51:935 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-04 13:47:51:935 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-04 13:47:51:935 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-04 13:47:51:935 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-04 13:47:51:935 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-04 13:47:51:935 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 13:47:51:936 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-04 13:47:51:937 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-04 13:47:51:937 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-04 13:47:51:937 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-04 13:47:51:938 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-04 13:47:51:938 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-04 13:47:51:938 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 13:47:52:213 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-04 13:47:52:213 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-04 13:47:52:369 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-04 13:47:52:369 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

