2023-09-03 19:08:23:413 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-03 19:08:23:450 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-03 19:08:25:383 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT INT expr {$e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)}) (ALT FLOAT expr {$e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-03 19:08:25:402 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT INT expr {$e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)}) (ALT FLOAT expr {$e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-03 19:08:25:410 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignationstmt { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT INT expr {$e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)}) (ALT FLOAT expr {$e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)}) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-03 19:08:25:411 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-03 19:08:25:476 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=372> left=expr<tokenIndex=376,p=18> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=484> left=expr<tokenIndex=488,p=12> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=526> expr<tokenIndex=528> PAR_DER<tokenIndex=530> { $e = $expr.e } 
        | list=listArray<tokenIndex=538> { $e = $list.p} 
        | COR_IZQ<tokenIndex=544> listParams<tokenIndex=546> COR_DER<tokenIndex=548> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | INT<tokenIndex=554> expr<tokenIndex=556,p=6> {$e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)} 
        | FLOAT<tokenIndex=562> expr<tokenIndex=564,p=5> {$e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)} 
        | NUMBER<tokenIndex=570>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=576>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=582> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=588> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MULT<tokenIndex=389>|DIV<tokenIndex=391>|MOD<tokenIndex=393>) right=expr<tokenIndex=398,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(SUM<tokenIndex=411>|RES<tokenIndex=413>) right=expr<tokenIndex=418,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MAYIG<tokenIndex=431>|MAYOR<tokenIndex=433>) right=expr<tokenIndex=438,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MENIG<tokenIndex=451>|MENOR<tokenIndex=453>) right=expr<tokenIndex=458,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(IG_IG<tokenIndex=471>|DIFE<tokenIndex=473>) right=expr<tokenIndex=478,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=AND<tokenIndex=500> right=expr<tokenIndex=504,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=OR<tokenIndex=516> right=expr<tokenIndex=520,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-03 19:08:25:592 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 372))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 376) (= p 18)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 484))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 488) (= p 12)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 526))) (expr (ELEMENT_OPTIONS (= tokenIndex 528))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 530))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 538)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 544))) (listParams (ELEMENT_OPTIONS (= tokenIndex 546))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 548))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 554))) (expr (ELEMENT_OPTIONS (= tokenIndex 556) (= p 6))) {$e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)}) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 562))) (expr (ELEMENT_OPTIONS (= tokenIndex 564) (= p 5))) {$e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)}) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 570))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 576))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 582))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 588))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 389))) (DIV (ELEMENT_OPTIONS (= tokenIndex 391))) (MOD (ELEMENT_OPTIONS (= tokenIndex 393))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 398) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 411))) (RES (ELEMENT_OPTIONS (= tokenIndex 413))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 418) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 431))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 433))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 438) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 451))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 453))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 458) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 471))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 473))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 478) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 500)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 504) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 516)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 520) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-03 19:08:25:593 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=613> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=605> expr<tokenIndex=607> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-03 19:08:25:596 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 613))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 605))) (expr (ELEMENT_OPTIONS (= tokenIndex 607))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-03 19:08:25:597 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=642> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=632> expr<tokenIndex=634> COR_DER<tokenIndex=636> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-03 19:08:25:601 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 642))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 632))) (expr (ELEMENT_OPTIONS (= tokenIndex 634))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 636))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-03 19:08:25:761 grammar LogManager.java:25 import INT=1
2023-09-03 19:08:25:762 grammar LogManager.java:25 import FLOAT=2
2023-09-03 19:08:25:762 grammar LogManager.java:25 import BOOL=3
2023-09-03 19:08:25:762 grammar LogManager.java:25 import STR=4
2023-09-03 19:08:25:762 grammar LogManager.java:25 import TRU=5
2023-09-03 19:08:25:762 grammar LogManager.java:25 import FAL=6
2023-09-03 19:08:25:762 grammar LogManager.java:25 import PRINT=7
2023-09-03 19:08:25:762 grammar LogManager.java:25 import IF=8
2023-09-03 19:08:25:762 grammar LogManager.java:25 import ELSE=9
2023-09-03 19:08:25:762 grammar LogManager.java:25 import WHILE=10
2023-09-03 19:08:25:762 grammar LogManager.java:25 import VAR=11
2023-09-03 19:08:25:762 grammar LogManager.java:25 import LET=12
2023-09-03 19:08:25:762 grammar LogManager.java:25 import NUMBER=13
2023-09-03 19:08:25:762 grammar LogManager.java:25 import STRING=14
2023-09-03 19:08:25:762 grammar LogManager.java:25 import ID=15
2023-09-03 19:08:25:763 grammar LogManager.java:25 import DIFE=16
2023-09-03 19:08:25:764 grammar LogManager.java:25 import IG_IG=17
2023-09-03 19:08:25:764 grammar LogManager.java:25 import NOT=18
2023-09-03 19:08:25:764 grammar LogManager.java:25 import OR=19
2023-09-03 19:08:25:764 grammar LogManager.java:25 import AND=20
2023-09-03 19:08:25:764 grammar LogManager.java:25 import IGUAL=21
2023-09-03 19:08:25:764 grammar LogManager.java:25 import MAYIG=22
2023-09-03 19:08:25:764 grammar LogManager.java:25 import MENIG=23
2023-09-03 19:08:25:764 grammar LogManager.java:25 import MAYOR=24
2023-09-03 19:08:25:765 grammar LogManager.java:25 import MENOR=25
2023-09-03 19:08:25:765 grammar LogManager.java:25 import MULT=26
2023-09-03 19:08:25:765 grammar LogManager.java:25 import DIV=27
2023-09-03 19:08:25:765 grammar LogManager.java:25 import SUM=28
2023-09-03 19:08:25:766 grammar LogManager.java:25 import RES=29
2023-09-03 19:08:25:766 grammar LogManager.java:25 import MOD=30
2023-09-03 19:08:25:766 grammar LogManager.java:25 import PAR_IZQ=31
2023-09-03 19:08:25:766 grammar LogManager.java:25 import PAR_DER=32
2023-09-03 19:08:25:766 grammar LogManager.java:25 import LLAVE_IZQ=33
2023-09-03 19:08:25:766 grammar LogManager.java:25 import LLAVE_DER=34
2023-09-03 19:08:25:766 grammar LogManager.java:25 import DOSPUNTOS=35
2023-09-03 19:08:25:767 grammar LogManager.java:25 import COR_IZQ=36
2023-09-03 19:08:25:767 grammar LogManager.java:25 import COR_DER=37
2023-09-03 19:08:25:767 grammar LogManager.java:25 import COMA=38
2023-09-03 19:08:25:768 grammar LogManager.java:25 import CIERRAPREGUNTA=39
2023-09-03 19:08:25:768 grammar LogManager.java:25 import WHITESPACE=40
2023-09-03 19:08:25:768 grammar LogManager.java:25 import COMMENT=41
2023-09-03 19:08:25:768 grammar LogManager.java:25 import LINE_COMMENT=42
2023-09-03 19:08:25:768 grammar LogManager.java:25 import 'Int'=1
2023-09-03 19:08:25:768 grammar LogManager.java:25 import 'Float'=2
2023-09-03 19:08:25:768 grammar LogManager.java:25 import 'Bool'=3
2023-09-03 19:08:25:768 grammar LogManager.java:25 import 'String'=4
2023-09-03 19:08:25:768 grammar LogManager.java:25 import 'true'=5
2023-09-03 19:08:25:769 grammar LogManager.java:25 import 'false'=6
2023-09-03 19:08:25:769 grammar LogManager.java:25 import 'print'=7
2023-09-03 19:08:25:769 grammar LogManager.java:25 import 'if'=8
2023-09-03 19:08:25:770 grammar LogManager.java:25 import 'else'=9
2023-09-03 19:08:25:771 grammar LogManager.java:25 import 'while'=10
2023-09-03 19:08:25:771 grammar LogManager.java:25 import 'var'=11
2023-09-03 19:08:25:771 grammar LogManager.java:25 import 'let'=12
2023-09-03 19:08:25:771 grammar LogManager.java:25 import '!='=16
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '=='=17
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '!'=18
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '||'=19
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '&&'=20
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '='=21
2023-09-03 19:08:25:772 grammar LogManager.java:25 import '>='=22
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '<='=23
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '>'=24
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '<'=25
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '*'=26
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '/'=27
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '+'=28
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '-'=29
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '%'=30
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '('=31
2023-09-03 19:08:25:773 grammar LogManager.java:25 import ')'=32
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '{'=33
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '}'=34
2023-09-03 19:08:25:773 grammar LogManager.java:25 import ':'=35
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '['=36
2023-09-03 19:08:25:773 grammar LogManager.java:25 import ']'=37
2023-09-03 19:08:25:773 grammar LogManager.java:25 import ','=38
2023-09-03 19:08:25:773 grammar LogManager.java:25 import '?'=39
2023-09-03 19:08:25:774 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, LET=12, NUMBER=13, STRING=14, ID=15, DIFE=16, IG_IG=17, NOT=18, OR=19, AND=20, IGUAL=21, MAYIG=22, MENIG=23, MAYOR=24, MENOR=25, MULT=26, DIV=27, SUM=28, RES=29, MOD=30, PAR_IZQ=31, PAR_DER=32, LLAVE_IZQ=33, LLAVE_DER=34, DOSPUNTOS=35, COR_IZQ=36, COR_DER=37, COMA=38, CIERRAPREGUNTA=39, WHITESPACE=40, COMMENT=41, LINE_COMMENT=42, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, 'let'=12, '!='=16, '=='=17, '!'=18, '||'=19, '&&'=20, '='=21, '>='=22, '<='=23, '>'=24, '<'=25, '*'=26, '/'=27, '+'=28, '-'=29, '%'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '?'=39}
2023-09-03 19:08:25:775 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, LET=12, NUMBER=13, STRING=14, ID=15, DIFE=16, IG_IG=17, NOT=18, OR=19, AND=20, IGUAL=21, MAYIG=22, MENIG=23, MAYOR=24, MENOR=25, MULT=26, DIV=27, SUM=28, RES=29, MOD=30, PAR_IZQ=31, PAR_DER=32, LLAVE_IZQ=33, LLAVE_DER=34, DOSPUNTOS=35, COR_IZQ=36, COR_DER=37, COMA=38, CIERRAPREGUNTA=39, WHITESPACE=40, COMMENT=41, LINE_COMMENT=42}
2023-09-03 19:08:25:776 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, 'let'=12, '!='=16, '=='=17, '!'=18, '||'=19, '&&'=20, '='=21, '>='=22, '<='=23, '>'=24, '<'=25, '*'=26, '/'=27, '+'=28, '-'=29, '%'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '?'=39}
2023-09-03 19:08:25:953 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-03 19:08:25:955 LL1 LogManager.java:25 look=[{7..8, 10..12, 15}, {<EOF>, 34}]
2023-09-03 19:08:25:956 LL1 LogManager.java:25 LL(1)? true
2023-09-03 19:08:25:956 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-03 19:08:25:956 LL1 LogManager.java:25 look=[7, 8, {11..12}, 15, 10]
2023-09-03 19:08:25:956 LL1 LogManager.java:25 LL(1)? true
2023-09-03 19:08:25:956 LL1 LogManager.java:25 
DECISION 2 in rule blockelsif
2023-09-03 19:08:25:957 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..12, 15, 34}]
2023-09-03 19:08:25:957 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:957 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-09-03 19:08:25:957 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-03 19:08:25:957 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:957 LL1 LogManager.java:25 
DECISION 4 in rule declarationstmt
2023-09-03 19:08:25:957 LL1 LogManager.java:25 look=[11, 11, 11, 12, 12]
2023-09-03 19:08:25:957 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:957 LL1 LogManager.java:25 
DECISION 5 in rule types
2023-09-03 19:08:25:957 LL1 LogManager.java:25 look=[1, 2, 4, 3, 36]
2023-09-03 19:08:25:957 LL1 LogManager.java:25 LL(1)? true
2023-09-03 19:08:25:957 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-09-03 19:08:25:957 LL1 LogManager.java:25 look=[29, 18, 31, 15, 36, 1, 2, 13, 14, 5, 6]
2023-09-03 19:08:25:957 LL1 LogManager.java:25 LL(1)? true
2023-09-03 19:08:25:957 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-09-03 19:08:25:958 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-03 19:08:25:958 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:958 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-09-03 19:08:25:959 LL1 LogManager.java:25 look=[null, null]
2023-09-03 19:08:25:959 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:959 LL1 LogManager.java:25 
DECISION 9 in rule listParams
2023-09-03 19:08:25:959 LL1 LogManager.java:25 look=[null, {32, 37}]
2023-09-03 19:08:25:959 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:959 LL1 LogManager.java:25 
DECISION 10 in rule listArray
2023-09-03 19:08:25:960 LL1 LogManager.java:25 look=[null, null]
2023-09-03 19:08:25:960 LL1 LogManager.java:25 LL(1)? false
2023-09-03 19:08:25:966 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-03 19:08:26:016 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-03 19:08:26:016 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-03 19:08:26:018 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-03 19:08:26:021 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-03 19:08:26:021 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-03 19:08:26:028 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-03 19:08:26:028 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-03 19:08:26:028 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-03 19:08:26:030 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-03 19:08:26:030 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-09-03 19:08:26:030 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-09-03 19:08:26:031 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-03 19:08:26:031 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-03 19:08:26:032 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-03 19:08:26:033 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-03 19:08:26:033 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-09-03 19:08:26:033 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-09-03 19:08:26:033 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-03 19:08:26:033 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:19]
2023-09-03 19:08:26:034 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:27].[@-1,25:28='asig',<0>,42:42]
2023-09-03 19:08:26:035 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-03 19:08:26:035 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-03 19:08:26:035 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-03 19:08:26:038 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-03 19:08:26:038 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,47:37]
2023-09-03 19:08:26:040 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,47:67].[@-1,38:41='line',<0>,47:73]
2023-09-03 19:08:26:042 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,47:79].[@-1,50:52='pos',<0>,47:85]
2023-09-03 19:08:26:042 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,47:90].[@-1,66:66='l',<0>,47:101]
2023-09-03 19:08:26:043 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-03 19:08:26:043 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,53:5]
2023-09-03 19:08:26:044 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-03 19:08:26:044 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,60:13]
2023-09-03 19:08:26:044 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,60:29]
2023-09-03 19:08:26:081 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-03 19:08:26:082 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,66:38]
2023-09-03 19:08:26:082 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,66:67].[@-1,34:37='line',<0>,66:70]
2023-09-03 19:08:26:082 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,66:77].[@-1,44:46='pos',<0>,66:80]
2023-09-03 19:08:26:082 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,66:86].[@-1,55:55='e',<0>,66:91]
2023-09-03 19:08:26:082 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,66:95].[@-1,65:67='blk',<0>,66:101]
2023-09-03 19:08:26:083 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-03 19:08:26:083 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,67:84]
2023-09-03 19:08:26:083 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,67:113].[@-1,33:36='line',<0>,67:116]
2023-09-03 19:08:26:083 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,67:123].[@-1,43:45='pos',<0>,67:126]
2023-09-03 19:08:26:084 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,67:132].[@-1,54:54='e',<0>,67:137]
2023-09-03 19:08:26:084 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,67:141].[@-1,65:67='blk',<0>,67:148]
2023-09-03 19:08:26:084 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,67:154].[@-1,80:82='blk',<0>,67:163]
2023-09-03 19:08:26:085 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-03 19:08:26:085 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,68:60]
2023-09-03 19:08:26:085 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,68:89].[@-1,33:36='line',<0>,68:92]
2023-09-03 19:08:26:085 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,68:99].[@-1,43:45='pos',<0>,68:102]
2023-09-03 19:08:26:085 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,68:108].[@-1,54:54='e',<0>,68:113]
2023-09-03 19:08:26:086 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,68:117].[@-1,65:67='blk',<0>,68:124]
2023-09-03 19:08:26:086 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,68:130].[@-1,82:86='blkif',<0>,68:141]
2023-09-03 19:08:26:087 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-03 19:08:26:088 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,72:41]
2023-09-03 19:08:26:088 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,72:76].[@-1,43:46='line',<0>,72:82]
2023-09-03 19:08:26:089 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,72:89].[@-1,56:58='pos',<0>,72:95]
2023-09-03 19:08:26:089 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,72:101].[@-1,67:67='e',<0>,72:106]
2023-09-03 19:08:26:089 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,72:110].[@-1,77:79='blk',<0>,72:116]
2023-09-03 19:08:26:092 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-03 19:08:26:092 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,76:39]
2023-09-03 19:08:26:092 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,76:74].[@-1,41:44='line',<0>,76:78]
2023-09-03 19:08:26:092 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,76:85].[@-1,52:54='pos',<0>,76:89]
2023-09-03 19:08:26:092 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,76:95].[@-1,61:64='text',<0>,76:98]
2023-09-03 19:08:26:092 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,76:110].[@-1,79:80='ty',<0>,76:116]
2023-09-03 19:08:26:093 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,76:121].[@-1,89:89='e',<0>,76:126]
2023-09-03 19:08:26:093 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-03 19:08:26:093 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,77:22]
2023-09-03 19:08:26:093 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,77:57].[@-1,41:44='line',<0>,77:61]
2023-09-03 19:08:26:094 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,77:68].[@-1,52:54='pos',<0>,77:72]
2023-09-03 19:08:26:094 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,77:78].[@-1,61:64='text',<0>,77:81]
2023-09-03 19:08:26:094 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,77:117].[@-1,102:102='e',<0>,77:122]
2023-09-03 19:08:26:095 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-03 19:08:26:095 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,78:42]
2023-09-03 19:08:26:095 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,78:77].[@-1,41:44='line',<0>,78:81]
2023-09-03 19:08:26:095 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,78:88].[@-1,52:54='pos',<0>,78:92]
2023-09-03 19:08:26:095 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,78:98].[@-1,61:64='text',<0>,78:101]
2023-09-03 19:08:26:095 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,78:113].[@-1,79:80='ty',<0>,78:119]
2023-09-03 19:08:26:096 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-03 19:08:26:096 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,79:38]
2023-09-03 19:08:26:096 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,79:73].[@-1,41:44='line',<0>,79:77]
2023-09-03 19:08:26:096 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,79:84].[@-1,52:54='pos',<0>,79:88]
2023-09-03 19:08:26:097 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,79:94].[@-1,61:64='text',<0>,79:97]
2023-09-03 19:08:26:097 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,79:110].[@-1,80:81='ty',<0>,79:116]
2023-09-03 19:08:26:097 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,79:121].[@-1,90:90='e',<0>,79:126]
2023-09-03 19:08:26:097 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-03 19:08:26:097 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,80:22]
2023-09-03 19:08:26:098 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,80:57].[@-1,41:44='line',<0>,80:61]
2023-09-03 19:08:26:098 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,80:68].[@-1,52:54='pos',<0>,80:72]
2023-09-03 19:08:26:098 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,80:78].[@-1,61:64='text',<0>,80:81]
2023-09-03 19:08:26:098 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,80:118].[@-1,103:103='e',<0>,80:123]
2023-09-03 19:08:26:100 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-03 19:08:26:101 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,84:18]
2023-09-03 19:08:26:102 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,84:53].[@-1,40:43='line',<0>,84:56]
2023-09-03 19:08:26:102 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,84:63].[@-1,50:52='pos',<0>,84:66]
2023-09-03 19:08:26:102 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,84:72].[@-1,59:62='text',<0>,84:75]
2023-09-03 19:08:26:102 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,84:82].[@-1,71:71='e',<0>,84:87]
2023-09-03 19:08:26:104 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-03 19:08:26:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,88:8]
2023-09-03 19:08:26:105 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-03 19:08:26:105 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,89:10]
2023-09-03 19:08:26:106 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-03 19:08:26:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,90:8]
2023-09-03 19:08:26:106 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-03 19:08:26:106 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,91:9]
2023-09-03 19:08:26:107 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-03 19:08:26:108 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,92:20]
2023-09-03 19:08:26:113 action-translator LogManager.java:25 translate 
2023-09-03 19:08:26:113 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-03 19:08:26:113 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-03 19:08:26:114 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-03 19:08:26:114 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-03 19:08:26:114 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-03 19:08:26:115 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-03 19:08:26:115 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-03 19:08:26:115 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-03 19:08:26:116 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-03 19:08:26:116 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-03 19:08:26:116 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-03 19:08:26:116 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-03 19:08:26:116 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-03 19:08:26:132 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-03 19:08:26:135 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-03 19:08:26:135 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-03 19:08:26:136 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,5:48].[@-1,12:12='p',<0>,5:53]
2023-09-03 19:08:26:136 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-03 19:08:26:136 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:87]
2023-09-03 19:08:26:137 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,6:113].[@-1,36:39='line',<0>,6:121]
2023-09-03 19:08:26:139 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,6:128].[@-1,51:53='pos',<0>,6:136]
2023-09-03 19:08:26:140 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,6:142].[@-1,68:68='l',<0>,6:153]
2023-09-03 19:08:26:142 action-translator LogManager.java:25 translate $e = expressions.NewToInt($INT.line, $INT.pos, $expr.e)
2023-09-03 19:08:26:146 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,7:56]
2023-09-03 19:08:26:147 action-translator LogManager.java:25 qattr [@-1,27:29='INT',<0>,7:82].[@-1,31:34='line',<0>,7:86]
2023-09-03 19:08:26:147 action-translator LogManager.java:25 qattr [@-1,38:40='INT',<0>,7:93].[@-1,42:44='pos',<0>,7:97]
2023-09-03 19:08:26:147 action-translator LogManager.java:25 qattr [@-1,48:51='expr',<0>,7:103].[@-1,53:53='e',<0>,7:108]
2023-09-03 19:08:26:148 action-translator LogManager.java:25 translate $e = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e)
2023-09-03 19:08:26:152 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,8:58]
2023-09-03 19:08:26:152 action-translator LogManager.java:25 qattr [@-1,29:33='FLOAT',<0>,8:86].[@-1,35:38='line',<0>,8:92]
2023-09-03 19:08:26:154 action-translator LogManager.java:25 qattr [@-1,42:46='FLOAT',<0>,8:99].[@-1,48:50='pos',<0>,8:105]
2023-09-03 19:08:26:156 action-translator LogManager.java:25 qattr [@-1,54:57='expr',<0>,8:111].[@-1,59:59='e',<0>,8:116]
2023-09-03 19:08:26:156 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-03 19:08:26:157 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-03 19:08:26:157 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-03 19:08:26:159 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-03 19:08:26:160 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-03 19:08:26:160 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-03 19:08:26:160 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-03 19:08:26:161 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-03 19:08:26:161 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-03 19:08:26:162 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-03 19:08:26:163 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-03 19:08:26:163 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-03 19:08:26:163 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-03 19:08:26:163 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-03 19:08:26:163 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-03 19:08:26:164 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-03 19:08:26:164 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-03 19:08:26:164 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-03 19:08:26:165 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-03 19:08:26:166 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-03 19:08:26:166 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-03 19:08:26:166 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-03 19:08:26:166 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-03 19:08:26:167 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 19:08:26:170 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:170 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:160]
2023-09-03 19:08:26:170 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:190].[@-1,37:41='start',<0>,34:195]
2023-09-03 19:08:26:170 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:213].[@-1,60:64='start',<0>,34:218]
2023-09-03 19:08:26:170 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:238].[@-1,85:85='e',<0>,34:243]
2023-09-03 19:08:26:171 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:247].[@-1,92:95='text',<0>,34:250]
2023-09-03 19:08:26:171 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:257].[@-1,105:105='e',<0>,34:263]
2023-09-03 19:08:26:171 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 19:08:26:171 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:172 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:149]
2023-09-03 19:08:26:172 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:179].[@-1,37:41='start',<0>,35:184]
2023-09-03 19:08:26:172 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:202].[@-1,60:64='start',<0>,35:207]
2023-09-03 19:08:26:173 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:227].[@-1,85:85='e',<0>,35:232]
2023-09-03 19:08:26:173 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:236].[@-1,92:95='text',<0>,35:239]
2023-09-03 19:08:26:174 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:246].[@-1,105:105='e',<0>,35:252]
2023-09-03 19:08:26:174 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-03 19:08:26:182 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:183 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:153]
2023-09-03 19:08:26:184 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:183].[@-1,37:41='start',<0>,36:188]
2023-09-03 19:08:26:184 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:206].[@-1,60:64='start',<0>,36:211]
2023-09-03 19:08:26:186 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:231].[@-1,85:85='e',<0>,36:236]
2023-09-03 19:08:26:186 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:240].[@-1,92:95='text',<0>,36:243]
2023-09-03 19:08:26:187 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:250].[@-1,105:105='e',<0>,36:256]
2023-09-03 19:08:26:187 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-03 19:08:26:188 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:190 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:153]
2023-09-03 19:08:26:190 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:183].[@-1,37:41='start',<0>,37:188]
2023-09-03 19:08:26:191 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:206].[@-1,60:64='start',<0>,37:211]
2023-09-03 19:08:26:191 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:231].[@-1,85:85='e',<0>,37:236]
2023-09-03 19:08:26:191 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:240].[@-1,92:95='text',<0>,37:243]
2023-09-03 19:08:26:191 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:250].[@-1,105:105='e',<0>,37:256]
2023-09-03 19:08:26:192 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-03 19:08:26:192 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:193 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:152]
2023-09-03 19:08:26:193 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:182].[@-1,37:41='start',<0>,38:187]
2023-09-03 19:08:26:194 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:205].[@-1,60:64='start',<0>,38:210]
2023-09-03 19:08:26:194 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:230].[@-1,85:85='e',<0>,38:235]
2023-09-03 19:08:26:194 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:239].[@-1,92:95='text',<0>,38:242]
2023-09-03 19:08:26:195 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:249].[@-1,105:105='e',<0>,38:255]
2023-09-03 19:08:26:196 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-03 19:08:26:196 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:196 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:127]
2023-09-03 19:08:26:196 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:157].[@-1,37:41='start',<0>,39:162]
2023-09-03 19:08:26:197 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:180].[@-1,60:64='start',<0>,39:185]
2023-09-03 19:08:26:198 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:205].[@-1,85:85='e',<0>,39:210]
2023-09-03 19:08:26:198 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:214].[@-1,92:95='text',<0>,39:217]
2023-09-03 19:08:26:199 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:224].[@-1,105:105='e',<0>,39:230]
2023-09-03 19:08:26:199 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-09-03 19:08:26:199 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-03 19:08:26:200 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:126]
2023-09-03 19:08:26:200 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:156].[@-1,37:41='start',<0>,40:161]
2023-09-03 19:08:26:200 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:179].[@-1,60:64='start',<0>,40:184]
2023-09-03 19:08:26:200 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:204].[@-1,85:85='e',<0>,40:209]
2023-09-03 19:08:26:200 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:213].[@-1,92:95='text',<0>,40:216]
2023-09-03 19:08:26:200 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:223].[@-1,105:105='e',<0>,40:229]
2023-09-03 19:08:26:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-03 19:08:26:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-03 19:08:26:205 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-03 19:08:26:206 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-03 19:08:26:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-03 19:08:26:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-03 19:08:26:207 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-09-03 19:08:26:211 action-translator LogManager.java:25 translate 
2023-09-03 19:08:26:211 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-03 19:08:26:211 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-03 19:08:26:211 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-03 19:08:26:211 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-03 19:08:26:211 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-03 19:08:26:211 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-03 19:08:26:285 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-03 19:08:26:285 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-03 19:08:26:285 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-03 19:08:26:285 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-03 19:08:26:286 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-03 19:08:26:288 action-translator LogManager.java:25 translate 
2023-09-03 19:08:26:288 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-03 19:08:26:288 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-03 19:08:26:289 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-03 19:08:26:289 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-03 19:08:26:290 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-03 19:08:26:291 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-03 19:08:26:291 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-03 19:08:26:291 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-03 19:08:26:291 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-03 19:08:26:292 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-03 19:08:26:294 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-03 19:08:26:295 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-03 19:08:26:295 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-03 19:08:27:836 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-03 19:08:27:836 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-03 19:08:28:176 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-03 19:08:28:176 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

