2023-09-08 14:19:23:645 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 14:19:23:715 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 14:19:25:577 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:19:25:586 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:19:25:590 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:19:25:590 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 14:19:25:669 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=560> left=expr<tokenIndex=564,p=19> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=672> left=expr<tokenIndex=676,p=13> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=714> expr<tokenIndex=716> PAR_DER<tokenIndex=718> { $e = $expr.e } 
        | conversionstmt<tokenIndex=724> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=729>.COUNT<tokenIndex=731> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=739> { $e = $list.p} 
        | COR_IZQ<tokenIndex=745> listParams<tokenIndex=747> COR_DER<tokenIndex=749> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=755>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=761>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=767> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=773> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=779> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MULT<tokenIndex=577>|DIV<tokenIndex=579>|MOD<tokenIndex=581>) right=expr<tokenIndex=586,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(SUM<tokenIndex=599>|RES<tokenIndex=601>) right=expr<tokenIndex=606,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAYIG<tokenIndex=619>|MAYOR<tokenIndex=621>) right=expr<tokenIndex=626,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MENIG<tokenIndex=639>|MENOR<tokenIndex=641>) right=expr<tokenIndex=646,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=659>|DIFE<tokenIndex=661>) right=expr<tokenIndex=666,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=688> right=expr<tokenIndex=692,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=704> right=expr<tokenIndex=708,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 14:19:25:805 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 560))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 564) (= p 19)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 672))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 676) (= p 13)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 714))) (expr (ELEMENT_OPTIONS (= tokenIndex 716))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 718))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 724))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 729))) . (COUNT (ELEMENT_OPTIONS (= tokenIndex 731))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 739)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 745))) (listParams (ELEMENT_OPTIONS (= tokenIndex 747))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 749))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 755))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 761))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 767))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 773))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 779))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 577))) (DIV (ELEMENT_OPTIONS (= tokenIndex 579))) (MOD (ELEMENT_OPTIONS (= tokenIndex 581))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 586) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 599))) (RES (ELEMENT_OPTIONS (= tokenIndex 601))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 606) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 619))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 621))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 626) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 639))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 641))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 646) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 659))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 661))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 666) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 688)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 692) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 704)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 708) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 14:19:25:805 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=880> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=872> expr<tokenIndex=874> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 14:19:25:880 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 880))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 872))) (expr (ELEMENT_OPTIONS (= tokenIndex 874))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 14:19:25:882 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=909> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=899> expr<tokenIndex=901> COR_DER<tokenIndex=903> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-08 14:19:25:889 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 909))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 899))) (expr (ELEMENT_OPTIONS (= tokenIndex 901))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 903))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-08 14:19:25:925 grammar LogManager.java:25 import INT=1
2023-09-08 14:19:25:925 grammar LogManager.java:25 import FLOAT=2
2023-09-08 14:19:25:925 grammar LogManager.java:25 import BOOL=3
2023-09-08 14:19:25:925 grammar LogManager.java:25 import STR=4
2023-09-08 14:19:25:925 grammar LogManager.java:25 import TRU=5
2023-09-08 14:19:25:925 grammar LogManager.java:25 import FAL=6
2023-09-08 14:19:25:925 grammar LogManager.java:25 import PRINT=7
2023-09-08 14:19:25:925 grammar LogManager.java:25 import IF=8
2023-09-08 14:19:25:926 grammar LogManager.java:25 import ELSE=9
2023-09-08 14:19:25:926 grammar LogManager.java:25 import WHILE=10
2023-09-08 14:19:25:926 grammar LogManager.java:25 import FOR=11
2023-09-08 14:19:25:926 grammar LogManager.java:25 import IN=12
2023-09-08 14:19:25:926 grammar LogManager.java:25 import VAR=13
2023-09-08 14:19:25:926 grammar LogManager.java:25 import LET=14
2023-09-08 14:19:25:926 grammar LogManager.java:25 import NIL=15
2023-09-08 14:19:25:926 grammar LogManager.java:25 import BREAK=16
2023-09-08 14:19:25:926 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 14:19:25:926 grammar LogManager.java:25 import APPEND=18
2023-09-08 14:19:25:926 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 14:19:25:926 grammar LogManager.java:25 import REMOVE=20
2023-09-08 14:19:25:927 grammar LogManager.java:25 import AT=21
2023-09-08 14:19:25:927 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 14:19:25:927 grammar LogManager.java:25 import COUNT=23
2023-09-08 14:19:25:927 grammar LogManager.java:25 import ARRAY=24
2023-09-08 14:19:25:927 grammar LogManager.java:25 import NUMBER=25
2023-09-08 14:19:25:927 grammar LogManager.java:25 import STRING=26
2023-09-08 14:19:25:927 grammar LogManager.java:25 import ID=27
2023-09-08 14:19:25:927 grammar LogManager.java:25 import DIFE=28
2023-09-08 14:19:25:927 grammar LogManager.java:25 import IG_IG=29
2023-09-08 14:19:25:927 grammar LogManager.java:25 import NOT=30
2023-09-08 14:19:25:928 grammar LogManager.java:25 import OR=31
2023-09-08 14:19:25:928 grammar LogManager.java:25 import AND=32
2023-09-08 14:19:25:928 grammar LogManager.java:25 import IGUAL=33
2023-09-08 14:19:25:928 grammar LogManager.java:25 import MAYIG=34
2023-09-08 14:19:25:928 grammar LogManager.java:25 import MENIG=35
2023-09-08 14:19:25:928 grammar LogManager.java:25 import MAYOR=36
2023-09-08 14:19:25:928 grammar LogManager.java:25 import MENOR=37
2023-09-08 14:19:25:929 grammar LogManager.java:25 import MULT=38
2023-09-08 14:19:25:929 grammar LogManager.java:25 import DIV=39
2023-09-08 14:19:25:965 grammar LogManager.java:25 import SUM=40
2023-09-08 14:19:25:967 grammar LogManager.java:25 import RES=41
2023-09-08 14:19:25:967 grammar LogManager.java:25 import MOD=42
2023-09-08 14:19:25:968 grammar LogManager.java:25 import PAR_IZQ=43
2023-09-08 14:19:25:968 grammar LogManager.java:25 import PAR_DER=44
2023-09-08 14:19:25:968 grammar LogManager.java:25 import LLAVE_IZQ=45
2023-09-08 14:19:25:968 grammar LogManager.java:25 import LLAVE_DER=46
2023-09-08 14:19:25:968 grammar LogManager.java:25 import DOSPUNTOS=47
2023-09-08 14:19:25:968 grammar LogManager.java:25 import COR_IZQ=48
2023-09-08 14:19:25:968 grammar LogManager.java:25 import COR_DER=49
2023-09-08 14:19:25:968 grammar LogManager.java:25 import COMA=50
2023-09-08 14:19:25:968 grammar LogManager.java:25 import CIERRAPREGUNTA=51
2023-09-08 14:19:25:969 grammar LogManager.java:25 import PUNTOCOMA=52
2023-09-08 14:19:25:969 grammar LogManager.java:25 import PUNTO=53
2023-09-08 14:19:25:969 grammar LogManager.java:25 import WHITESPACE=54
2023-09-08 14:19:25:969 grammar LogManager.java:25 import COMMENT=55
2023-09-08 14:19:25:969 grammar LogManager.java:25 import LINE_COMMENT=56
2023-09-08 14:19:25:969 grammar LogManager.java:25 import 'Int'=1
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'Float'=2
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'String'=4
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'true'=5
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'false'=6
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'print'=7
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'if'=8
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'else'=9
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'while'=10
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'for'=11
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'in'=12
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'var'=13
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'let'=14
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'nil'=15
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'break'=16
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'continue'=17
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'append'=18
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'remove'=20
2023-09-08 14:19:25:970 grammar LogManager.java:25 import 'at'=21
2023-09-08 14:19:25:971 grammar LogManager.java:25 import 'IsEmpty'=22
2023-09-08 14:19:25:971 grammar LogManager.java:25 import 'count'=23
2023-09-08 14:19:25:971 grammar LogManager.java:25 import 'array'=24
2023-09-08 14:19:25:971 grammar LogManager.java:25 import '!='=28
2023-09-08 14:19:25:971 grammar LogManager.java:25 import '=='=29
2023-09-08 14:19:25:971 grammar LogManager.java:25 import '!'=30
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '||'=31
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '&&'=32
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '='=33
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '>='=34
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '<='=35
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '>'=36
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '<'=37
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '*'=38
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '/'=39
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '+'=40
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '-'=41
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '%'=42
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '('=43
2023-09-08 14:19:25:973 grammar LogManager.java:25 import ')'=44
2023-09-08 14:19:25:973 grammar LogManager.java:25 import '{'=45
2023-09-08 14:19:25:974 grammar LogManager.java:25 import '}'=46
2023-09-08 14:19:25:974 grammar LogManager.java:25 import ':'=47
2023-09-08 14:19:25:974 grammar LogManager.java:25 import '['=48
2023-09-08 14:19:25:974 grammar LogManager.java:25 import ']'=49
2023-09-08 14:19:25:974 grammar LogManager.java:25 import ','=50
2023-09-08 14:19:25:974 grammar LogManager.java:25 import '?'=51
2023-09-08 14:19:25:974 grammar LogManager.java:25 import ';'=52
2023-09-08 14:19:25:974 grammar LogManager.java:25 import '.'=53
2023-09-08 14:19:25:975 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 14:19:25:976 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56}
2023-09-08 14:19:25:976 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 14:19:26:386 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 14:19:26:386 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 27}, {<EOF>, 46}]
2023-09-08 14:19:26:387 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:387 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 14:19:26:389 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:389 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:389 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 14:19:26:389 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:390 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:390 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 14:19:26:390 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:390 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:390 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 14:19:26:390 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:390 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:390 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 14:19:26:391 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:391 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:391 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 14:19:26:391 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:391 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:391 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 14:19:26:391 LL1 LogManager.java:25 look=[7, 8, {13..14}, 27, 10, 11, 16, 17, 27]
2023-09-08 14:19:26:392 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:392 LL1 LogManager.java:25 
DECISION 8 in rule blockelsif
2023-09-08 14:19:26:392 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:19:26:392 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:392 LL1 LogManager.java:25 
DECISION 9 in rule ifstmt
2023-09-08 14:19:26:392 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 14:19:26:392 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:392 LL1 LogManager.java:25 
DECISION 10 in rule declarationstmt
2023-09-08 14:19:26:392 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 14:19:26:392 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:392 LL1 LogManager.java:25 
DECISION 11 in rule asignationstmt
2023-09-08 14:19:26:392 LL1 LogManager.java:25 look=[27, 27]
2023-09-08 14:19:26:392 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:392 LL1 LogManager.java:25 
DECISION 12 in rule types
2023-09-08 14:19:26:393 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 14:19:26:393 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:393 LL1 LogManager.java:25 
DECISION 13 in rule typesmatriz
2023-09-08 14:19:26:394 LL1 LogManager.java:25 look=[48, {1..4}]
2023-09-08 14:19:26:394 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:394 LL1 LogManager.java:25 
DECISION 14 in rule exprFor
2023-09-08 14:19:26:394 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 25..27, 30, 41, 43, 48}, {1..2, 4..6, 15, 25..27, 30, 41, 43, 48}]
2023-09-08 14:19:26:394 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:394 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-09-08 14:19:26:394 LL1 LogManager.java:25 look=[41, 30, 43, {1..2, 4}, 27, 27, 48, 25, 26, 5, 6, 15]
2023-09-08 14:19:26:394 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:394 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-09-08 14:19:26:395 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 14:19:26:395 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:395 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-09-08 14:19:26:397 LL1 LogManager.java:25 look=[null, null]
2023-09-08 14:19:26:397 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:397 LL1 LogManager.java:25 
DECISION 18 in rule conversionstmt
2023-09-08 14:19:26:397 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 14:19:26:397 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:19:26:397 LL1 LogManager.java:25 
DECISION 19 in rule exprvector
2023-09-08 14:19:26:397 LL1 LogManager.java:25 look=[48, 48, 27]
2023-09-08 14:19:26:397 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:399 LL1 LogManager.java:25 
DECISION 20 in rule listParams
2023-09-08 14:19:26:400 LL1 LogManager.java:25 look=[null, {44, 49}]
2023-09-08 14:19:26:400 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:400 LL1 LogManager.java:25 
DECISION 21 in rule listArray
2023-09-08 14:19:26:401 LL1 LogManager.java:25 look=[null, null]
2023-09-08 14:19:26:401 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:19:26:409 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:19:26:449 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 14:19:26:449 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 14:19:26:451 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 14:19:26:454 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 14:19:26:454 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 14:19:26:460 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 14:19:26:460 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 14:19:26:460 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 14:19:26:464 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 14:19:26:464 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 14:19:26:464 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 14:19:26:465 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 14:19:26:465 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 14:19:26:465 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 14:19:26:466 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 14:19:26:466 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 14:19:26:466 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 14:19:26:467 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 14:19:26:467 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 14:19:26:467 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 14:19:26:467 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 14:19:26:467 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 14:19:26:468 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 14:19:26:468 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 14:19:26:468 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 14:19:26:468 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 14:19:26:469 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 14:19:26:469 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:22]
2023-09-08 14:19:26:469 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,45:52].[@-1,37:40='line',<0>,45:58]
2023-09-08 14:19:26:470 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,45:65].[@-1,50:52='pos',<0>,45:71]
2023-09-08 14:19:26:470 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 14:19:26:470 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:25]
2023-09-08 14:19:26:470 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,46:58].[@-1,43:46='line',<0>,46:67]
2023-09-08 14:19:26:471 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,46:74].[@-1,59:61='pos',<0>,46:83]
2023-09-08 14:19:26:474 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 14:19:26:474 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:53]
2023-09-08 14:19:26:474 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,47:84].[@-1,35:38='line',<0>,47:87]
2023-09-08 14:19:26:476 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,47:94].[@-1,45:47='pos',<0>,47:97]
2023-09-08 14:19:26:477 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,47:103].[@-1,54:57='text',<0>,47:106]
2023-09-08 14:19:26:477 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,47:113].[@-1,66:66='e',<0>,47:118]
2023-09-08 14:19:26:479 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 14:19:26:480 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,51:37]
2023-09-08 14:19:26:480 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,51:67].[@-1,38:41='line',<0>,51:73]
2023-09-08 14:19:26:480 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,51:79].[@-1,50:52='pos',<0>,51:85]
2023-09-08 14:19:26:480 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,51:90].[@-1,66:66='l',<0>,51:101]
2023-09-08 14:19:26:481 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 14:19:26:481 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,57:5]
2023-09-08 14:19:26:501 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 14:19:26:501 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,64:13]
2023-09-08 14:19:26:501 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,64:29]
2023-09-08 14:19:26:508 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 14:19:26:509 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,70:38]
2023-09-08 14:19:26:509 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,70:67].[@-1,34:37='line',<0>,70:70]
2023-09-08 14:19:26:509 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,70:77].[@-1,44:46='pos',<0>,70:80]
2023-09-08 14:19:26:509 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,70:86].[@-1,55:55='e',<0>,70:91]
2023-09-08 14:19:26:510 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,70:95].[@-1,65:67='blk',<0>,70:101]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 14:19:26:511 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,71:84]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,71:113].[@-1,33:36='line',<0>,71:116]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,71:123].[@-1,43:45='pos',<0>,71:126]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,71:132].[@-1,54:54='e',<0>,71:137]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,71:141].[@-1,65:67='blk',<0>,71:148]
2023-09-08 14:19:26:511 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,71:154].[@-1,80:82='blk',<0>,71:163]
2023-09-08 14:19:26:512 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 14:19:26:512 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,72:60]
2023-09-08 14:19:26:512 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,72:89].[@-1,33:36='line',<0>,72:92]
2023-09-08 14:19:26:512 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,72:99].[@-1,43:45='pos',<0>,72:102]
2023-09-08 14:19:26:513 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,72:108].[@-1,54:54='e',<0>,72:113]
2023-09-08 14:19:26:513 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,72:117].[@-1,65:67='blk',<0>,72:124]
2023-09-08 14:19:26:513 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,72:130].[@-1,82:86='blkif',<0>,72:141]
2023-09-08 14:19:26:514 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 14:19:26:514 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,76:41]
2023-09-08 14:19:26:524 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,76:76].[@-1,43:46='line',<0>,76:82]
2023-09-08 14:19:26:525 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,76:89].[@-1,56:58='pos',<0>,76:95]
2023-09-08 14:19:26:525 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,76:101].[@-1,67:67='e',<0>,76:106]
2023-09-08 14:19:26:525 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,76:110].[@-1,77:79='blk',<0>,76:116]
2023-09-08 14:19:26:526 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 14:19:26:526 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,80:47]
2023-09-08 14:19:26:526 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,80:78].[@-1,36:39='line',<0>,80:82]
2023-09-08 14:19:26:526 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,80:89].[@-1,47:49='pos',<0>,80:93]
2023-09-08 14:19:26:527 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,80:99].[@-1,56:59='text',<0>,80:102]
2023-09-08 14:19:26:527 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,80:109].[@-1,71:71='e',<0>,80:117]
2023-09-08 14:19:26:528 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,80:121].[@-1,81:83='blk',<0>,80:127]
2023-09-08 14:19:26:531 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 14:19:26:532 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,84:39]
2023-09-08 14:19:26:532 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,84:74].[@-1,41:44='line',<0>,84:78]
2023-09-08 14:19:26:532 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,84:85].[@-1,52:54='pos',<0>,84:89]
2023-09-08 14:19:26:532 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,84:95].[@-1,61:64='text',<0>,84:98]
2023-09-08 14:19:26:532 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,84:110].[@-1,79:80='ty',<0>,84:116]
2023-09-08 14:19:26:532 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,84:121].[@-1,89:89='e',<0>,84:126]
2023-09-08 14:19:26:533 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 14:19:26:533 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,85:22]
2023-09-08 14:19:26:534 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,85:57].[@-1,41:44='line',<0>,85:61]
2023-09-08 14:19:26:534 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,85:68].[@-1,52:54='pos',<0>,85:72]
2023-09-08 14:19:26:534 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,85:78].[@-1,61:64='text',<0>,85:81]
2023-09-08 14:19:26:534 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,85:117].[@-1,102:102='e',<0>,85:122]
2023-09-08 14:19:26:535 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 14:19:26:535 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,86:42]
2023-09-08 14:19:26:535 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,86:77].[@-1,41:44='line',<0>,86:81]
2023-09-08 14:19:26:536 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,86:88].[@-1,52:54='pos',<0>,86:92]
2023-09-08 14:19:26:536 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,86:98].[@-1,61:64='text',<0>,86:101]
2023-09-08 14:19:26:538 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,86:113].[@-1,79:80='ty',<0>,86:119]
2023-09-08 14:19:26:539 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 14:19:26:539 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,87:60]
2023-09-08 14:19:26:539 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,87:101].[@-1,47:50='line',<0>,87:105]
2023-09-08 14:19:26:539 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,87:112].[@-1,58:60='pos',<0>,87:116]
2023-09-08 14:19:26:540 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,87:122].[@-1,67:70='text',<0>,87:125]
2023-09-08 14:19:26:540 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,87:137].[@-1,85:86='ty',<0>,87:143]
2023-09-08 14:19:26:540 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,87:148].[@-1,101:105='exprv',<0>,87:159]
2023-09-08 14:19:26:540 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 14:19:26:541 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:44]
2023-09-08 14:19:26:541 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,88:85].[@-1,47:50='line',<0>,88:89]
2023-09-08 14:19:26:541 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,88:96].[@-1,58:60='pos',<0>,88:100]
2023-09-08 14:19:26:542 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,88:106].[@-1,67:70='text',<0>,88:109]
2023-09-08 14:19:26:542 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,88:121].[@-1,91:92='tm',<0>,88:133]
2023-09-08 14:19:26:542 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,88:138].[@-1,101:101='e',<0>,88:143]
2023-09-08 14:19:26:542 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 14:19:26:543 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:38]
2023-09-08 14:19:26:543 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,89:73].[@-1,41:44='line',<0>,89:77]
2023-09-08 14:19:26:543 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,89:84].[@-1,52:54='pos',<0>,89:88]
2023-09-08 14:19:26:543 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,89:94].[@-1,61:64='text',<0>,89:97]
2023-09-08 14:19:26:543 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,89:110].[@-1,80:81='ty',<0>,89:116]
2023-09-08 14:19:26:544 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,89:121].[@-1,90:90='e',<0>,89:126]
2023-09-08 14:19:26:544 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 14:19:26:544 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,90:22]
2023-09-08 14:19:26:544 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,90:57].[@-1,41:44='line',<0>,90:61]
2023-09-08 14:19:26:545 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,90:68].[@-1,52:54='pos',<0>,90:72]
2023-09-08 14:19:26:546 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,90:78].[@-1,61:64='text',<0>,90:81]
2023-09-08 14:19:26:546 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,90:118].[@-1,103:103='e',<0>,90:123]
2023-09-08 14:19:26:548 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 14:19:26:548 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,94:18]
2023-09-08 14:19:26:548 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,94:53].[@-1,40:43='line',<0>,94:56]
2023-09-08 14:19:26:548 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,94:63].[@-1,50:52='pos',<0>,94:66]
2023-09-08 14:19:26:549 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,94:72].[@-1,59:62='text',<0>,94:75]
2023-09-08 14:19:26:549 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,94:82].[@-1,71:71='e',<0>,94:87]
2023-09-08 14:19:26:550 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 14:19:26:550 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,95:30]
2023-09-08 14:19:26:550 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,95:74].[@-1,48:51='line',<0>,95:77]
2023-09-08 14:19:26:550 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,95:84].[@-1,58:60='pos',<0>,95:87]
2023-09-08 14:19:26:550 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,95:93].[@-1,67:70='text',<0>,95:96]
2023-09-08 14:19:26:551 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,95:103].[@-1,79:79='e',<0>,95:108]
2023-09-08 14:19:26:551 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,95:112].[@-1,86:89='text',<0>,95:115]
2023-09-08 14:19:26:551 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 14:19:26:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,99:8]
2023-09-08 14:19:26:552 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 14:19:26:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,100:10]
2023-09-08 14:19:26:552 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 14:19:26:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,101:8]
2023-09-08 14:19:26:552 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 14:19:26:558 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,102:9]
2023-09-08 14:19:26:565 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 14:19:26:566 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,109:46].[@-1,196:197='tm',<0>,109:51]
2023-09-08 14:19:26:566 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,110:33]
2023-09-08 14:19:26:566 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 14:19:26:566 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,113:13]
2023-09-08 14:19:26:566 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,114:49].[@-1,92:93='ty',<0>,114:55]
2023-09-08 14:19:26:567 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,115:13]
2023-09-08 14:19:26:567 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,115:26]
2023-09-08 14:19:26:568 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 14:19:26:568 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,120:44]
2023-09-08 14:19:26:568 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,120:73].[@-1,37:41='start',<0>,120:80]
2023-09-08 14:19:26:569 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,120:98].[@-1,62:66='start',<0>,120:105]
2023-09-08 14:19:26:570 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,120:125].[@-1,89:89='e',<0>,120:132]
2023-09-08 14:19:26:570 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,120:136].[@-1,100:100='e',<0>,120:143]
2023-09-08 14:19:26:571 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 14:19:26:571 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,121:7]
2023-09-08 14:19:26:572 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,121:12].[@-1,11:11='e',<0>,121:17]
2023-09-08 14:19:26:576 action-translator LogManager.java:25 translate 
2023-09-08 14:19:26:577 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 14:19:26:577 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 14:19:26:577 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 14:19:26:577 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 14:19:26:577 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 14:19:26:578 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 14:19:26:578 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-08 14:19:26:578 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-08 14:19:26:578 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-08 14:19:26:579 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-08 14:19:26:579 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-08 14:19:26:579 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 14:19:26:579 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-08 14:19:26:579 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-08 14:19:26:580 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 14:19:26:580 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-08 14:19:26:580 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-08 14:19:26:581 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 14:19:26:581 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:53]
2023-09-08 14:19:26:581 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:79].[@-1,31:34='line',<0>,6:82]
2023-09-08 14:19:26:581 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:89].[@-1,41:43='pos',<0>,6:92]
2023-09-08 14:19:26:581 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,6:98].[@-1,50:53='text',<0>,6:101]
2023-09-08 14:19:26:582 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 14:19:26:582 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:43]
2023-09-08 14:19:26:582 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:48].[@-1,12:12='p',<0>,7:53]
2023-09-08 14:19:26:582 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 14:19:26:582 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:87]
2023-09-08 14:19:26:583 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,8:113].[@-1,36:39='line',<0>,8:121]
2023-09-08 14:19:26:583 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,8:128].[@-1,51:53='pos',<0>,8:136]
2023-09-08 14:19:26:583 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,8:142].[@-1,68:68='l',<0>,8:153]
2023-09-08 14:19:26:583 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 14:19:26:584 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-08 14:19:26:584 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-08 14:19:26:585 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-08 14:19:26:585 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-08 14:19:26:585 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-08 14:19:26:585 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 14:19:26:586 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-08 14:19:26:586 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-08 14:19:26:587 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-08 14:19:26:587 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 14:19:26:587 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-08 14:19:26:587 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-08 14:19:26:587 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-08 14:19:26:588 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 14:19:26:589 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-08 14:19:26:589 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-08 14:19:26:589 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-08 14:19:26:589 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 14:19:26:590 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-08 14:19:26:590 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-08 14:19:26:590 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-08 14:19:26:591 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 14:19:26:592 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:592 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:160]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:190].[@-1,37:41='start',<0>,35:195]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:213].[@-1,60:64='start',<0>,35:218]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:238].[@-1,85:85='e',<0>,35:243]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:247].[@-1,92:95='text',<0>,35:250]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:257].[@-1,105:105='e',<0>,35:263]
2023-09-08 14:19:26:592 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 14:19:26:593 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:593 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-09-08 14:19:26:593 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-09-08 14:19:26:593 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-09-08 14:19:26:593 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-09-08 14:19:26:593 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-09-08 14:19:26:593 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-09-08 14:19:26:594 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 14:19:26:594 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:594 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:153]
2023-09-08 14:19:26:594 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:183].[@-1,37:41='start',<0>,37:188]
2023-09-08 14:19:26:594 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:206].[@-1,60:64='start',<0>,37:211]
2023-09-08 14:19:26:595 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:231].[@-1,85:85='e',<0>,37:236]
2023-09-08 14:19:26:595 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:240].[@-1,92:95='text',<0>,37:243]
2023-09-08 14:19:26:595 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:250].[@-1,105:105='e',<0>,37:256]
2023-09-08 14:19:26:595 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 14:19:26:596 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:596 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-08 14:19:26:596 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-08 14:19:26:596 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-08 14:19:26:596 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-08 14:19:26:596 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-08 14:19:26:596 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-08 14:19:26:597 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 14:19:26:597 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:597 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:152]
2023-09-08 14:19:26:597 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:182].[@-1,37:41='start',<0>,39:187]
2023-09-08 14:19:26:598 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:205].[@-1,60:64='start',<0>,39:210]
2023-09-08 14:19:26:598 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:230].[@-1,85:85='e',<0>,39:235]
2023-09-08 14:19:26:598 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:239].[@-1,92:95='text',<0>,39:242]
2023-09-08 14:19:26:598 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:249].[@-1,105:105='e',<0>,39:255]
2023-09-08 14:19:26:598 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 14:19:26:598 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:598 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-09-08 14:19:26:599 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-09-08 14:19:26:599 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-09-08 14:19:26:599 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-09-08 14:19:26:599 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-09-08 14:19:26:599 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-09-08 14:19:26:600 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 14:19:26:600 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:19:26:602 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-09-08 14:19:26:603 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-09-08 14:19:26:603 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-09-08 14:19:26:603 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-09-08 14:19:26:604 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-09-08 14:19:26:604 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-09-08 14:19:26:610 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 14:19:26:610 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 14:19:26:611 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 14:19:26:611 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 14:19:26:611 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 14:19:26:611 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 14:19:26:611 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 14:19:26:613 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 14:19:26:614 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,166:29]
2023-09-08 14:19:26:614 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,166:58].[@-1,35:38='line',<0>,166:62]
2023-09-08 14:19:26:614 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,166:69].[@-1,46:48='pos',<0>,166:73]
2023-09-08 14:19:26:614 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,166:79].[@-1,57:57='e',<0>,166:84]
2023-09-08 14:19:26:614 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 14:19:26:614 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,167:31]
2023-09-08 14:19:26:614 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,167:62].[@-1,39:42='line',<0>,167:68]
2023-09-08 14:19:26:615 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,167:75].[@-1,52:54='pos',<0>,167:81]
2023-09-08 14:19:26:615 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,167:87].[@-1,63:63='e',<0>,167:92]
2023-09-08 14:19:26:615 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 14:19:26:615 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,168:29]
2023-09-08 14:19:26:615 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,168:61].[@-1,38:41='line',<0>,168:65]
2023-09-08 14:19:26:616 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,168:72].[@-1,49:51='pos',<0>,168:76]
2023-09-08 14:19:26:616 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,168:82].[@-1,60:60='e',<0>,168:87]
2023-09-08 14:19:26:617 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 14:19:26:617 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,172:31]
2023-09-08 14:19:26:617 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,172:62].[@-1,41:44='line',<0>,172:70]
2023-09-08 14:19:26:618 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,172:77].[@-1,56:58='pos',<0>,172:85]
2023-09-08 14:19:26:618 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,172:91].[@-1,73:73='l',<0>,172:102]
2023-09-08 14:19:26:618 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 14:19:26:618 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,173:20]
2023-09-08 14:19:26:618 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,173:51].[@-1,41:44='line',<0>,173:59]
2023-09-08 14:19:26:619 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,173:66].[@-1,56:58='pos',<0>,173:74]
2023-09-08 14:19:26:619 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 14:19:26:619 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,174:7]
2023-09-08 14:19:26:619 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,174:42].[@-1,40:43='line',<0>,174:45]
2023-09-08 14:19:26:619 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,174:52].[@-1,50:52='pos',<0>,174:55]
2023-09-08 14:19:26:620 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,174:61].[@-1,59:62='text',<0>,174:64]
2023-09-08 14:19:26:620 action-translator LogManager.java:25 translate 
2023-09-08 14:19:26:621 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 14:19:26:622 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 14:19:26:622 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 14:19:26:622 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 14:19:26:622 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 14:19:26:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:19:26:624 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 14:19:26:624 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 14:19:26:624 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 14:19:26:624 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 14:19:26:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:19:26:625 action-translator LogManager.java:25 translate 
2023-09-08 14:19:26:625 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 14:19:26:625 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-08 14:19:26:625 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-08 14:19:26:625 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-08 14:19:26:626 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-08 14:19:26:626 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:19:26:626 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 14:19:26:626 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-08 14:19:26:626 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-08 14:19:26:626 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-08 14:19:26:626 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-08 14:19:26:627 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-08 14:19:26:628 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:19:28:237 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:19:28:237 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:19:28:700 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:19:28:700 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

