2023-08-26 14:06:53:827 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 14:06:53:869 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 14:06:54:535 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ expr PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE LLAVE_IZQ block LLAVE_DER {}) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE blockelsif {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 14:06:54:541 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ expr PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE LLAVE_IZQ block LLAVE_DER {}) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE blockelsif {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MULT DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 14:06:54:545 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ expr PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) }) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE LLAVE_IZQ block LLAVE_DER {}) (ALT IF expr LLAVE_IZQ block LLAVE_DER ELSE blockelsif {}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT COR_IZQ COR_DER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MULT DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 14:06:54:545 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-08-26 14:06:54:578 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PAR_IZQ<tokenIndex=392> expr<tokenIndex=394> PAR_DER<tokenIndex=396> { $e = $expr.e } 
        | list=listArray<tokenIndex=404> { $e = $list.p} 
        | COR_IZQ<tokenIndex=410> listParams<tokenIndex=412> COR_DER<tokenIndex=414> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=420>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=426>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=432> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=438> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MULT<tokenIndex=267>|DIV<tokenIndex=269>) right=expr<tokenIndex=274,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(SUM<tokenIndex=287>|RES<tokenIndex=289>) right=expr<tokenIndex=294,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAYIG<tokenIndex=307>|MAYOR<tokenIndex=309>) right=expr<tokenIndex=314,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MENIG<tokenIndex=327>|MENOR<tokenIndex=329>) right=expr<tokenIndex=334,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=347>|DIFE<tokenIndex=349>) right=expr<tokenIndex=354,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=366> right=expr<tokenIndex=370,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=382> right=expr<tokenIndex=386,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-26 14:06:54:609 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 392))) (expr (ELEMENT_OPTIONS (= tokenIndex 394))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 396))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 404)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 410))) (listParams (ELEMENT_OPTIONS (= tokenIndex 412))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 414))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 420))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 426))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 432))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 438))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 267))) (DIV (ELEMENT_OPTIONS (= tokenIndex 269))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 274) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 287))) (RES (ELEMENT_OPTIONS (= tokenIndex 289))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 294) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 307))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 309))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 314) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 327))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 329))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 334) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 347))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 349))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 354) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 366)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 370) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 382)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 386) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-26 14:06:54:610 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=463> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=455> expr<tokenIndex=457> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-26 14:06:54:630 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 463))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 455))) (expr (ELEMENT_OPTIONS (= tokenIndex 457))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-26 14:06:54:631 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=492> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=482> expr<tokenIndex=484> COR_DER<tokenIndex=486> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-26 14:06:54:637 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 492))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 482))) (expr (ELEMENT_OPTIONS (= tokenIndex 484))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 486))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-26 14:06:54:660 grammar LogManager.java:25 import INT=1
2023-08-26 14:06:54:660 grammar LogManager.java:25 import FLOAT=2
2023-08-26 14:06:54:660 grammar LogManager.java:25 import BOOL=3
2023-08-26 14:06:54:660 grammar LogManager.java:25 import STR=4
2023-08-26 14:06:54:661 grammar LogManager.java:25 import TRU=5
2023-08-26 14:06:54:661 grammar LogManager.java:25 import FAL=6
2023-08-26 14:06:54:661 grammar LogManager.java:25 import PRINT=7
2023-08-26 14:06:54:661 grammar LogManager.java:25 import IF=8
2023-08-26 14:06:54:661 grammar LogManager.java:25 import ELSE=9
2023-08-26 14:06:54:661 grammar LogManager.java:25 import WHILE=10
2023-08-26 14:06:54:661 grammar LogManager.java:25 import VAR=11
2023-08-26 14:06:54:661 grammar LogManager.java:25 import NUMBER=12
2023-08-26 14:06:54:661 grammar LogManager.java:25 import STRING=13
2023-08-26 14:06:54:662 grammar LogManager.java:25 import ID=14
2023-08-26 14:06:54:662 grammar LogManager.java:25 import DIFE=15
2023-08-26 14:06:54:662 grammar LogManager.java:25 import IG_IG=16
2023-08-26 14:06:54:662 grammar LogManager.java:25 import NOT=17
2023-08-26 14:06:54:662 grammar LogManager.java:25 import OR=18
2023-08-26 14:06:54:662 grammar LogManager.java:25 import AND=19
2023-08-26 14:06:54:662 grammar LogManager.java:25 import IGUAL=20
2023-08-26 14:06:54:662 grammar LogManager.java:25 import MAYIG=21
2023-08-26 14:06:54:663 grammar LogManager.java:25 import MENIG=22
2023-08-26 14:06:54:663 grammar LogManager.java:25 import MAYOR=23
2023-08-26 14:06:54:664 grammar LogManager.java:25 import MENOR=24
2023-08-26 14:06:54:664 grammar LogManager.java:25 import MULT=25
2023-08-26 14:06:54:664 grammar LogManager.java:25 import DIV=26
2023-08-26 14:06:54:664 grammar LogManager.java:25 import SUM=27
2023-08-26 14:06:54:664 grammar LogManager.java:25 import RES=28
2023-08-26 14:06:54:664 grammar LogManager.java:25 import PAR_IZQ=29
2023-08-26 14:06:54:664 grammar LogManager.java:25 import PAR_DER=30
2023-08-26 14:06:54:665 grammar LogManager.java:25 import LLAVE_IZQ=31
2023-08-26 14:06:54:665 grammar LogManager.java:25 import LLAVE_DER=32
2023-08-26 14:06:54:665 grammar LogManager.java:25 import DOSPUNTOS=33
2023-08-26 14:06:54:665 grammar LogManager.java:25 import COR_IZQ=34
2023-08-26 14:06:54:665 grammar LogManager.java:25 import COR_DER=35
2023-08-26 14:06:54:665 grammar LogManager.java:25 import COMA=36
2023-08-26 14:06:54:665 grammar LogManager.java:25 import WHITESPACE=37
2023-08-26 14:06:54:666 grammar LogManager.java:25 import COMMENT=38
2023-08-26 14:06:54:667 grammar LogManager.java:25 import LINE_COMMENT=39
2023-08-26 14:06:54:667 grammar LogManager.java:25 import 'Int'=1
2023-08-26 14:06:54:667 grammar LogManager.java:25 import 'Float'=2
2023-08-26 14:06:54:667 grammar LogManager.java:25 import 'Bool'=3
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'String'=4
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'true'=5
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'false'=6
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'print'=7
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'if'=8
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'else'=9
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'while'=10
2023-08-26 14:06:54:668 grammar LogManager.java:25 import 'var'=11
2023-08-26 14:06:54:668 grammar LogManager.java:25 import '!='=15
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '=='=16
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '!'=17
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '||'=18
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '&&'=19
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '='=20
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '>='=21
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '<='=22
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '>'=23
2023-08-26 14:06:54:669 grammar LogManager.java:25 import '<'=24
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '*'=25
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '/'=26
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '+'=27
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '-'=28
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '('=29
2023-08-26 14:06:54:670 grammar LogManager.java:25 import ')'=30
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '{'=31
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '}'=32
2023-08-26 14:06:54:670 grammar LogManager.java:25 import ':'=33
2023-08-26 14:06:54:670 grammar LogManager.java:25 import '['=34
2023-08-26 14:06:54:671 grammar LogManager.java:25 import ']'=35
2023-08-26 14:06:54:671 grammar LogManager.java:25 import ','=36
2023-08-26 14:06:54:671 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, NUMBER=12, STRING=13, ID=14, DIFE=15, IG_IG=16, NOT=17, OR=18, AND=19, IGUAL=20, MAYIG=21, MENIG=22, MAYOR=23, MENOR=24, MULT=25, DIV=26, SUM=27, RES=28, PAR_IZQ=29, PAR_DER=30, LLAVE_IZQ=31, LLAVE_DER=32, DOSPUNTOS=33, COR_IZQ=34, COR_DER=35, COMA=36, WHITESPACE=37, COMMENT=38, LINE_COMMENT=39, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, '!='=15, '=='=16, '!'=17, '||'=18, '&&'=19, '='=20, '>='=21, '<='=22, '>'=23, '<'=24, '*'=25, '/'=26, '+'=27, '-'=28, '('=29, ')'=30, '{'=31, '}'=32, ':'=33, '['=34, ']'=35, ','=36}
2023-08-26 14:06:54:672 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, NUMBER=12, STRING=13, ID=14, DIFE=15, IG_IG=16, NOT=17, OR=18, AND=19, IGUAL=20, MAYIG=21, MENIG=22, MAYOR=23, MENOR=24, MULT=25, DIV=26, SUM=27, RES=28, PAR_IZQ=29, PAR_DER=30, LLAVE_IZQ=31, LLAVE_DER=32, DOSPUNTOS=33, COR_IZQ=34, COR_DER=35, COMA=36, WHITESPACE=37, COMMENT=38, LINE_COMMENT=39}
2023-08-26 14:06:54:672 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, '!='=15, '=='=16, '!'=17, '||'=18, '&&'=19, '='=20, '>='=21, '<='=22, '>'=23, '<'=24, '*'=25, '/'=26, '+'=27, '-'=28, '('=29, ')'=30, '{'=31, '}'=32, ':'=33, '['=34, ']'=35, ','=36}
2023-08-26 14:06:54:729 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-26 14:06:54:729 LL1 LogManager.java:25 look=[{7..8, 11}, {<EOF>, 32}]
2023-08-26 14:06:54:730 LL1 LogManager.java:25 LL(1)? true
2023-08-26 14:06:54:730 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-26 14:06:54:730 LL1 LogManager.java:25 look=[7, 8, 11]
2023-08-26 14:06:54:730 LL1 LogManager.java:25 LL(1)? true
2023-08-26 14:06:54:730 LL1 LogManager.java:25 
DECISION 2 in rule blockelsif
2023-08-26 14:06:54:730 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 11, 32}]
2023-08-26 14:06:54:731 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:731 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-08-26 14:06:54:731 LL1 LogManager.java:25 look=[8, 8, 8]
2023-08-26 14:06:54:731 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:731 LL1 LogManager.java:25 
DECISION 4 in rule types
2023-08-26 14:06:54:731 LL1 LogManager.java:25 look=[1, 2, 4, 3, 34]
2023-08-26 14:06:54:731 LL1 LogManager.java:25 LL(1)? true
2023-08-26 14:06:54:731 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-26 14:06:54:731 LL1 LogManager.java:25 look=[29, 14, 34, 12, 13, 5, 6]
2023-08-26 14:06:54:731 LL1 LogManager.java:25 LL(1)? true
2023-08-26 14:06:54:731 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-26 14:06:54:731 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-26 14:06:54:731 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:731 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-26 14:06:54:732 LL1 LogManager.java:25 look=[null, null]
2023-08-26 14:06:54:732 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:732 LL1 LogManager.java:25 
DECISION 8 in rule listParams
2023-08-26 14:06:54:732 LL1 LogManager.java:25 look=[null, 35]
2023-08-26 14:06:54:732 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:732 LL1 LogManager.java:25 
DECISION 9 in rule listArray
2023-08-26 14:06:54:732 LL1 LogManager.java:25 look=[null, null]
2023-08-26 14:06:54:732 LL1 LogManager.java:25 LL(1)? false
2023-08-26 14:06:54:740 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-08-26 14:06:54:760 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-26 14:06:54:760 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-26 14:06:54:762 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-26 14:06:54:764 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-26 14:06:54:764 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-26 14:06:54:768 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-26 14:06:54:768 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-26 14:06:54:769 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-26 14:06:54:769 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-26 14:06:54:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-26 14:06:54:770 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-26 14:06:54:770 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-26 14:06:54:770 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-26 14:06:54:771 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-26 14:06:54:771 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-26 14:06:54:771 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-26 14:06:54:772 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-26 14:06:54:775 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-26 14:06:54:776 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,45:31]
2023-08-26 14:06:54:776 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,45:61].[@-1,38:41='line',<0>,45:67]
2023-08-26 14:06:54:776 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,45:73].[@-1,50:52='pos',<0>,45:79]
2023-08-26 14:06:54:777 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,45:84].[@-1,60:60='e',<0>,45:89]
2023-08-26 14:06:54:777 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-08-26 14:06:54:777 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,50:5]
2023-08-26 14:06:54:778 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-08-26 14:06:54:778 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,57:13]
2023-08-26 14:06:54:778 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,57:29]
2023-08-26 14:06:54:781 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk) 
2023-08-26 14:06:54:782 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,63:38]
2023-08-26 14:06:54:782 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,63:67].[@-1,34:37='line',<0>,63:70]
2023-08-26 14:06:54:783 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,63:77].[@-1,44:46='pos',<0>,63:80]
2023-08-26 14:06:54:784 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,63:86].[@-1,55:55='e',<0>,63:91]
2023-08-26 14:06:54:784 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,63:95].[@-1,65:67='blk',<0>,63:101]
2023-08-26 14:06:54:784 action-translator LogManager.java:25 translate 
2023-08-26 14:06:54:785 action-translator LogManager.java:25 translate 
2023-08-26 14:06:54:786 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-26 14:06:54:787 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,69:39]
2023-08-26 14:06:54:787 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,69:74].[@-1,41:44='line',<0>,69:78]
2023-08-26 14:06:54:787 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,69:85].[@-1,52:54='pos',<0>,69:89]
2023-08-26 14:06:54:788 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,69:95].[@-1,61:64='text',<0>,69:98]
2023-08-26 14:06:54:788 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,69:105].[@-1,74:75='ty',<0>,69:111]
2023-08-26 14:06:54:788 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,69:116].[@-1,84:84='e',<0>,69:121]
2023-08-26 14:06:54:789 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-26 14:06:54:790 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,73:8]
2023-08-26 14:06:54:790 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-26 14:06:54:790 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,74:10]
2023-08-26 14:06:54:790 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-26 14:06:54:790 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,75:8]
2023-08-26 14:06:54:791 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-26 14:06:54:791 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,76:9]
2023-08-26 14:06:54:792 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-26 14:06:54:792 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,77:20]
2023-08-26 14:06:54:798 action-translator LogManager.java:25 translate 
2023-08-26 14:06:54:798 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-26 14:06:54:798 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:84]
2023-08-26 14:06:54:798 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:89].[@-1,12:12='e',<0>,2:94]
2023-08-26 14:06:54:799 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-26 14:06:54:799 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-26 14:06:54:799 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-26 14:06:54:799 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-08-26 14:06:54:800 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:87]
2023-08-26 14:06:54:800 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,4:113].[@-1,36:39='line',<0>,4:121]
2023-08-26 14:06:54:800 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,4:128].[@-1,51:53='pos',<0>,4:136]
2023-08-26 14:06:54:800 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,4:142].[@-1,68:68='l',<0>,4:153]
2023-08-26 14:06:54:801 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-26 14:06:54:801 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-26 14:06:54:801 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-26 14:06:54:801 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-26 14:06:54:801 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-26 14:06:54:801 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-26 14:06:54:802 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-26 14:06:54:802 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-26 14:06:54:802 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-26 14:06:54:804 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-26 14:06:54:804 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-26 14:06:54:804 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-26 14:06:54:804 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-26 14:06:54:805 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-26 14:06:54:805 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-26 14:06:54:805 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-26 14:06:54:805 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-26 14:06:54:806 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-26 14:06:54:807 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-26 14:06:54:808 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-26 14:06:54:808 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-26 14:06:54:808 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-26 14:06:54:808 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-26 14:06:54:809 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 14:06:54:810 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:810 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:140]
2023-08-26 14:06:54:811 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:170].[@-1,37:41='start',<0>,30:175]
2023-08-26 14:06:54:811 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:193].[@-1,60:64='start',<0>,30:198]
2023-08-26 14:06:54:811 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:218].[@-1,85:85='e',<0>,30:223]
2023-08-26 14:06:54:811 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:227].[@-1,92:95='text',<0>,30:230]
2023-08-26 14:06:54:811 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:237].[@-1,105:105='e',<0>,30:243]
2023-08-26 14:06:54:812 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 14:06:54:812 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:812 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-26 14:06:54:814 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-26 14:06:54:814 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-26 14:06:54:814 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-26 14:06:54:814 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-26 14:06:54:814 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-26 14:06:54:815 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 14:06:54:816 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:816 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:153]
2023-08-26 14:06:54:816 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:183].[@-1,37:41='start',<0>,32:188]
2023-08-26 14:06:54:816 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:206].[@-1,60:64='start',<0>,32:211]
2023-08-26 14:06:54:817 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:231].[@-1,85:85='e',<0>,32:236]
2023-08-26 14:06:54:817 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:240].[@-1,92:95='text',<0>,32:243]
2023-08-26 14:06:54:817 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:250].[@-1,105:105='e',<0>,32:256]
2023-08-26 14:06:54:817 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 14:06:54:818 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:818 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:153]
2023-08-26 14:06:54:818 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:183].[@-1,37:41='start',<0>,33:188]
2023-08-26 14:06:54:818 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:206].[@-1,60:64='start',<0>,33:211]
2023-08-26 14:06:54:818 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:231].[@-1,85:85='e',<0>,33:236]
2023-08-26 14:06:54:818 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:240].[@-1,92:95='text',<0>,33:243]
2023-08-26 14:06:54:819 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:250].[@-1,105:105='e',<0>,33:256]
2023-08-26 14:06:54:819 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 14:06:54:820 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:820 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:152]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:182].[@-1,37:41='start',<0>,34:187]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:205].[@-1,60:64='start',<0>,34:210]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:230].[@-1,85:85='e',<0>,34:235]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:239].[@-1,92:95='text',<0>,34:242]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:249].[@-1,105:105='e',<0>,34:255]
2023-08-26 14:06:54:821 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-26 14:06:54:822 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:822 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-26 14:06:54:822 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-26 14:06:54:822 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-26 14:06:54:822 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-26 14:06:54:822 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-26 14:06:54:823 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-26 14:06:54:823 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-26 14:06:54:824 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 14:06:54:824 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-26 14:06:54:824 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-26 14:06:54:825 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-26 14:06:54:826 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-26 14:06:54:826 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-26 14:06:54:826 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 14:06:54:828 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-26 14:06:54:829 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-26 14:06:54:831 action-translator LogManager.java:25 translate 
2023-08-26 14:06:54:832 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-26 14:06:54:832 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-26 14:06:54:832 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-26 14:06:54:832 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-26 14:06:54:833 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-26 14:06:54:834 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 14:06:54:835 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-26 14:06:54:835 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-26 14:06:54:836 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-26 14:06:54:836 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-26 14:06:54:836 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 14:06:54:837 action-translator LogManager.java:25 translate 
2023-08-26 14:06:54:838 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-08-26 14:06:54:838 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-26 14:06:54:839 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-08-26 14:06:54:839 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-08-26 14:06:54:839 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-08-26 14:06:54:839 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 14:06:54:840 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-26 14:06:54:840 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-08-26 14:06:54:840 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-08-26 14:06:54:841 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-08-26 14:06:54:842 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-08-26 14:06:54:843 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-08-26 14:06:54:844 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 14:06:55:157 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-08-26 14:06:55:157 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-08-26 14:06:55:226 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-08-26 14:06:55:226 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

