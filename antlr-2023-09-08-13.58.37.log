2023-09-08 13:58:29:692 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 13:58:29:764 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 13:58:34:388 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 13:58:34:416 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 13:58:34:420 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 13:58:34:420 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 13:58:34:515 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=539> left=expr<tokenIndex=543,p=19> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=651> left=expr<tokenIndex=655,p=13> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=693> expr<tokenIndex=695> PAR_DER<tokenIndex=697> { $e = $expr.e } 
        | conversionstmt<tokenIndex=703> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=708>.COUNT<tokenIndex=710> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=718> { $e = $list.p} 
        | COR_IZQ<tokenIndex=724> listParams<tokenIndex=726> COR_DER<tokenIndex=728> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=734>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=740>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=746> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=752> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=758> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MULT<tokenIndex=556>|DIV<tokenIndex=558>|MOD<tokenIndex=560>) right=expr<tokenIndex=565,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(SUM<tokenIndex=578>|RES<tokenIndex=580>) right=expr<tokenIndex=585,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAYIG<tokenIndex=598>|MAYOR<tokenIndex=600>) right=expr<tokenIndex=605,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MENIG<tokenIndex=618>|MENOR<tokenIndex=620>) right=expr<tokenIndex=625,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=638>|DIFE<tokenIndex=640>) right=expr<tokenIndex=645,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=667> right=expr<tokenIndex=671,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=683> right=expr<tokenIndex=687,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 13:58:34:589 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 539))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 543) (= p 19)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 651))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 655) (= p 13)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 693))) (expr (ELEMENT_OPTIONS (= tokenIndex 695))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 697))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 703))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 708))) . (COUNT (ELEMENT_OPTIONS (= tokenIndex 710))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 718)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 724))) (listParams (ELEMENT_OPTIONS (= tokenIndex 726))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 728))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 734))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 740))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 746))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 752))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 758))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 556))) (DIV (ELEMENT_OPTIONS (= tokenIndex 558))) (MOD (ELEMENT_OPTIONS (= tokenIndex 560))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 565) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 578))) (RES (ELEMENT_OPTIONS (= tokenIndex 580))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 585) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 598))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 600))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 605) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 618))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 620))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 625) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 638))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 640))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 645) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 667)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 671) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 683)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 687) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 13:58:34:591 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=859> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=851> expr<tokenIndex=853> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 13:58:34:600 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 859))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 851))) (expr (ELEMENT_OPTIONS (= tokenIndex 853))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 13:58:34:601 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=888> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=878> expr<tokenIndex=880> COR_DER<tokenIndex=882> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-08 13:58:34:606 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 888))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 878))) (expr (ELEMENT_OPTIONS (= tokenIndex 880))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 882))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-08 13:58:34:687 grammar LogManager.java:25 import INT=1
2023-09-08 13:58:34:687 grammar LogManager.java:25 import FLOAT=2
2023-09-08 13:58:34:687 grammar LogManager.java:25 import BOOL=3
2023-09-08 13:58:34:687 grammar LogManager.java:25 import STR=4
2023-09-08 13:58:34:688 grammar LogManager.java:25 import TRU=5
2023-09-08 13:58:34:688 grammar LogManager.java:25 import FAL=6
2023-09-08 13:58:34:688 grammar LogManager.java:25 import PRINT=7
2023-09-08 13:58:34:688 grammar LogManager.java:25 import IF=8
2023-09-08 13:58:34:688 grammar LogManager.java:25 import ELSE=9
2023-09-08 13:58:34:688 grammar LogManager.java:25 import WHILE=10
2023-09-08 13:58:34:688 grammar LogManager.java:25 import FOR=11
2023-09-08 13:58:34:688 grammar LogManager.java:25 import IN=12
2023-09-08 13:58:34:688 grammar LogManager.java:25 import VAR=13
2023-09-08 13:58:34:688 grammar LogManager.java:25 import LET=14
2023-09-08 13:58:34:688 grammar LogManager.java:25 import NIL=15
2023-09-08 13:58:34:688 grammar LogManager.java:25 import BREAK=16
2023-09-08 13:58:34:688 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 13:58:34:690 grammar LogManager.java:25 import APPEND=18
2023-09-08 13:58:34:690 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 13:58:34:690 grammar LogManager.java:25 import REMOVE=20
2023-09-08 13:58:34:690 grammar LogManager.java:25 import AT=21
2023-09-08 13:58:34:690 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 13:58:34:690 grammar LogManager.java:25 import COUNT=23
2023-09-08 13:58:34:690 grammar LogManager.java:25 import ARRAY=24
2023-09-08 13:58:34:691 grammar LogManager.java:25 import NUMBER=25
2023-09-08 13:58:34:691 grammar LogManager.java:25 import STRING=26
2023-09-08 13:58:34:691 grammar LogManager.java:25 import ID=27
2023-09-08 13:58:34:691 grammar LogManager.java:25 import DIFE=28
2023-09-08 13:58:34:691 grammar LogManager.java:25 import IG_IG=29
2023-09-08 13:58:34:691 grammar LogManager.java:25 import NOT=30
2023-09-08 13:58:34:691 grammar LogManager.java:25 import OR=31
2023-09-08 13:58:34:691 grammar LogManager.java:25 import AND=32
2023-09-08 13:58:34:691 grammar LogManager.java:25 import IGUAL=33
2023-09-08 13:58:34:691 grammar LogManager.java:25 import MAYIG=34
2023-09-08 13:58:34:691 grammar LogManager.java:25 import MENIG=35
2023-09-08 13:58:34:691 grammar LogManager.java:25 import MAYOR=36
2023-09-08 13:58:34:691 grammar LogManager.java:25 import MENOR=37
2023-09-08 13:58:34:692 grammar LogManager.java:25 import MULT=38
2023-09-08 13:58:34:692 grammar LogManager.java:25 import DIV=39
2023-09-08 13:58:34:692 grammar LogManager.java:25 import SUM=40
2023-09-08 13:58:34:692 grammar LogManager.java:25 import RES=41
2023-09-08 13:58:34:692 grammar LogManager.java:25 import MOD=42
2023-09-08 13:58:34:692 grammar LogManager.java:25 import PAR_IZQ=43
2023-09-08 13:58:34:692 grammar LogManager.java:25 import PAR_DER=44
2023-09-08 13:58:34:692 grammar LogManager.java:25 import LLAVE_IZQ=45
2023-09-08 13:58:34:692 grammar LogManager.java:25 import LLAVE_DER=46
2023-09-08 13:58:34:692 grammar LogManager.java:25 import DOSPUNTOS=47
2023-09-08 13:58:34:692 grammar LogManager.java:25 import COR_IZQ=48
2023-09-08 13:58:34:692 grammar LogManager.java:25 import COR_DER=49
2023-09-08 13:58:34:692 grammar LogManager.java:25 import COMA=50
2023-09-08 13:58:34:692 grammar LogManager.java:25 import CIERRAPREGUNTA=51
2023-09-08 13:58:34:693 grammar LogManager.java:25 import PUNTOCOMA=52
2023-09-08 13:58:34:693 grammar LogManager.java:25 import PUNTO=53
2023-09-08 13:58:34:693 grammar LogManager.java:25 import WHITESPACE=54
2023-09-08 13:58:34:693 grammar LogManager.java:25 import COMMENT=55
2023-09-08 13:58:34:693 grammar LogManager.java:25 import LINE_COMMENT=56
2023-09-08 13:58:34:693 grammar LogManager.java:25 import 'Int'=1
2023-09-08 13:58:34:693 grammar LogManager.java:25 import 'Float'=2
2023-09-08 13:58:34:693 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 13:58:34:693 grammar LogManager.java:25 import 'String'=4
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'true'=5
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'false'=6
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'print'=7
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'if'=8
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'else'=9
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'while'=10
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'for'=11
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'in'=12
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'var'=13
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'let'=14
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'nil'=15
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'break'=16
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'continue'=17
2023-09-08 13:58:34:694 grammar LogManager.java:25 import 'append'=18
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'remove'=20
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'at'=21
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'IsEmpty'=22
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'count'=23
2023-09-08 13:58:34:695 grammar LogManager.java:25 import 'array'=24
2023-09-08 13:58:34:695 grammar LogManager.java:25 import '!='=28
2023-09-08 13:58:34:695 grammar LogManager.java:25 import '=='=29
2023-09-08 13:58:34:695 grammar LogManager.java:25 import '!'=30
2023-09-08 13:58:34:695 grammar LogManager.java:25 import '||'=31
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '&&'=32
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '='=33
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '>='=34
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '<='=35
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '>'=36
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '<'=37
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '*'=38
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '/'=39
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '+'=40
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '-'=41
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '%'=42
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '('=43
2023-09-08 13:58:34:696 grammar LogManager.java:25 import ')'=44
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '{'=45
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '}'=46
2023-09-08 13:58:34:696 grammar LogManager.java:25 import ':'=47
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '['=48
2023-09-08 13:58:34:696 grammar LogManager.java:25 import ']'=49
2023-09-08 13:58:34:696 grammar LogManager.java:25 import ','=50
2023-09-08 13:58:34:696 grammar LogManager.java:25 import '?'=51
2023-09-08 13:58:34:697 grammar LogManager.java:25 import ';'=52
2023-09-08 13:58:34:697 grammar LogManager.java:25 import '.'=53
2023-09-08 13:58:34:697 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 13:58:34:698 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56}
2023-09-08 13:58:34:698 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 13:58:34:819 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 13:58:34:820 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 27}, {<EOF>, 46}]
2023-09-08 13:58:34:821 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:821 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 13:58:34:821 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:821 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:821 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 13:58:34:824 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:824 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:824 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 13:58:34:825 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:825 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:825 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 13:58:34:825 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:825 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:825 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 13:58:34:826 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:826 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:826 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 13:58:34:826 LL1 LogManager.java:25 look=[7, 8, {13..14}, 27, 10, 11, 16, 17]
2023-09-08 13:58:34:826 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:826 LL1 LogManager.java:25 
DECISION 7 in rule blockelsif
2023-09-08 13:58:34:827 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 13:58:34:827 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:827 LL1 LogManager.java:25 
DECISION 8 in rule ifstmt
2023-09-08 13:58:34:827 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 13:58:34:827 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:827 LL1 LogManager.java:25 
DECISION 9 in rule declarationstmt
2023-09-08 13:58:34:827 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 13:58:34:827 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:828 LL1 LogManager.java:25 
DECISION 10 in rule asignationstmt
2023-09-08 13:58:34:828 LL1 LogManager.java:25 look=[27, 27]
2023-09-08 13:58:34:828 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:828 LL1 LogManager.java:25 
DECISION 11 in rule types
2023-09-08 13:58:34:828 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 13:58:34:828 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:828 LL1 LogManager.java:25 
DECISION 12 in rule typesmatriz
2023-09-08 13:58:34:828 LL1 LogManager.java:25 look=[48, {1..4}]
2023-09-08 13:58:34:828 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:828 LL1 LogManager.java:25 
DECISION 13 in rule exprFor
2023-09-08 13:58:34:828 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 25..27, 30, 41, 43, 48}, {1..2, 4..6, 15, 25..27, 30, 41, 43, 48}]
2023-09-08 13:58:34:828 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:829 LL1 LogManager.java:25 
DECISION 14 in rule expr
2023-09-08 13:58:34:829 LL1 LogManager.java:25 look=[41, 30, 43, {1..2, 4}, 27, 27, 48, 25, 26, 5, 6, 15]
2023-09-08 13:58:34:829 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:829 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-09-08 13:58:34:829 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 13:58:34:831 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:831 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-09-08 13:58:34:832 LL1 LogManager.java:25 look=[null, null]
2023-09-08 13:58:34:833 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:833 LL1 LogManager.java:25 
DECISION 17 in rule conversionstmt
2023-09-08 13:58:34:833 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 13:58:34:833 LL1 LogManager.java:25 LL(1)? true
2023-09-08 13:58:34:833 LL1 LogManager.java:25 
DECISION 18 in rule exprvector
2023-09-08 13:58:34:833 LL1 LogManager.java:25 look=[48, 48, 27]
2023-09-08 13:58:34:833 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:833 LL1 LogManager.java:25 
DECISION 19 in rule listParams
2023-09-08 13:58:34:834 LL1 LogManager.java:25 look=[null, {44, 49}]
2023-09-08 13:58:34:834 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:834 LL1 LogManager.java:25 
DECISION 20 in rule listArray
2023-09-08 13:58:34:834 LL1 LogManager.java:25 look=[null, null]
2023-09-08 13:58:34:834 LL1 LogManager.java:25 LL(1)? false
2023-09-08 13:58:34:842 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 13:58:34:896 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 13:58:34:897 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 13:58:34:898 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 13:58:34:901 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 13:58:34:902 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 13:58:34:905 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 13:58:34:905 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 13:58:34:905 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 13:58:34:915 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 13:58:34:917 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 13:58:34:917 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 13:58:34:917 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 13:58:34:917 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 13:58:34:918 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 13:58:34:919 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 13:58:34:920 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 13:58:34:921 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 13:58:34:921 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 13:58:34:922 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 13:58:34:922 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 13:58:34:924 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 13:58:34:927 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 13:58:34:927 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 13:58:34:927 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 13:58:34:928 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 13:58:34:928 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 13:58:34:932 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 13:58:34:933 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:22]
2023-09-08 13:58:34:934 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,45:52].[@-1,37:40='line',<0>,45:58]
2023-09-08 13:58:34:934 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,45:65].[@-1,50:52='pos',<0>,45:71]
2023-09-08 13:58:34:935 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 13:58:34:935 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:25]
2023-09-08 13:58:34:935 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,46:58].[@-1,43:46='line',<0>,46:67]
2023-09-08 13:58:34:936 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,46:74].[@-1,59:61='pos',<0>,46:83]
2023-09-08 13:58:34:937 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 13:58:34:937 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,50:37]
2023-09-08 13:58:34:937 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,50:67].[@-1,38:41='line',<0>,50:73]
2023-09-08 13:58:34:937 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,50:79].[@-1,50:52='pos',<0>,50:85]
2023-09-08 13:58:34:938 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,50:90].[@-1,66:66='l',<0>,50:101]
2023-09-08 13:58:34:938 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 13:58:34:938 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,56:5]
2023-09-08 13:58:34:968 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 13:58:34:969 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,63:13]
2023-09-08 13:58:34:969 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,63:29]
2023-09-08 13:58:34:981 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 13:58:34:981 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,69:38]
2023-09-08 13:58:34:982 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,69:67].[@-1,34:37='line',<0>,69:70]
2023-09-08 13:58:34:983 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,69:77].[@-1,44:46='pos',<0>,69:80]
2023-09-08 13:58:34:983 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,69:86].[@-1,55:55='e',<0>,69:91]
2023-09-08 13:58:34:983 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,69:95].[@-1,65:67='blk',<0>,69:101]
2023-09-08 13:58:34:984 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 13:58:34:984 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,70:84]
2023-09-08 13:58:34:984 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,70:113].[@-1,33:36='line',<0>,70:116]
2023-09-08 13:58:34:985 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,70:123].[@-1,43:45='pos',<0>,70:126]
2023-09-08 13:58:34:985 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,70:132].[@-1,54:54='e',<0>,70:137]
2023-09-08 13:58:34:985 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,70:141].[@-1,65:67='blk',<0>,70:148]
2023-09-08 13:58:34:985 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,70:154].[@-1,80:82='blk',<0>,70:163]
2023-09-08 13:58:34:986 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 13:58:34:986 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,71:60]
2023-09-08 13:58:34:986 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,71:89].[@-1,33:36='line',<0>,71:92]
2023-09-08 13:58:34:986 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,71:99].[@-1,43:45='pos',<0>,71:102]
2023-09-08 13:58:34:986 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,71:108].[@-1,54:54='e',<0>,71:113]
2023-09-08 13:58:34:987 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,71:117].[@-1,65:67='blk',<0>,71:124]
2023-09-08 13:58:34:987 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,71:130].[@-1,82:86='blkif',<0>,71:141]
2023-09-08 13:58:34:988 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 13:58:34:988 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,75:41]
2023-09-08 13:58:34:988 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,75:76].[@-1,43:46='line',<0>,75:82]
2023-09-08 13:58:34:989 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,75:89].[@-1,56:58='pos',<0>,75:95]
2023-09-08 13:58:34:990 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,75:101].[@-1,67:67='e',<0>,75:106]
2023-09-08 13:58:34:990 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,75:110].[@-1,77:79='blk',<0>,75:116]
2023-09-08 13:58:34:992 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 13:58:34:994 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,79:47]
2023-09-08 13:58:34:994 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,79:78].[@-1,36:39='line',<0>,79:82]
2023-09-08 13:58:34:995 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,79:89].[@-1,47:49='pos',<0>,79:93]
2023-09-08 13:58:34:995 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,79:99].[@-1,56:59='text',<0>,79:102]
2023-09-08 13:58:34:995 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,79:109].[@-1,71:71='e',<0>,79:117]
2023-09-08 13:58:34:995 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,79:121].[@-1,81:83='blk',<0>,79:127]
2023-09-08 13:58:34:998 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 13:58:34:998 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,83:39]
2023-09-08 13:58:35:000 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,83:74].[@-1,41:44='line',<0>,83:78]
2023-09-08 13:58:35:001 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,83:85].[@-1,52:54='pos',<0>,83:89]
2023-09-08 13:58:35:003 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,83:95].[@-1,61:64='text',<0>,83:98]
2023-09-08 13:58:35:004 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,83:110].[@-1,79:80='ty',<0>,83:116]
2023-09-08 13:58:35:004 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,83:121].[@-1,89:89='e',<0>,83:126]
2023-09-08 13:58:35:005 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 13:58:35:005 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,84:22]
2023-09-08 13:58:35:005 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,84:57].[@-1,41:44='line',<0>,84:61]
2023-09-08 13:58:35:007 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,84:68].[@-1,52:54='pos',<0>,84:72]
2023-09-08 13:58:35:007 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,84:78].[@-1,61:64='text',<0>,84:81]
2023-09-08 13:58:35:008 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,84:117].[@-1,102:102='e',<0>,84:122]
2023-09-08 13:58:35:008 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 13:58:35:008 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,85:42]
2023-09-08 13:58:35:009 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,85:77].[@-1,41:44='line',<0>,85:81]
2023-09-08 13:58:35:009 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,85:88].[@-1,52:54='pos',<0>,85:92]
2023-09-08 13:58:35:009 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,85:98].[@-1,61:64='text',<0>,85:101]
2023-09-08 13:58:35:009 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,85:113].[@-1,79:80='ty',<0>,85:119]
2023-09-08 13:58:35:010 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 13:58:35:010 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,86:60]
2023-09-08 13:58:35:010 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,86:101].[@-1,47:50='line',<0>,86:105]
2023-09-08 13:58:35:010 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,86:112].[@-1,58:60='pos',<0>,86:116]
2023-09-08 13:58:35:010 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,86:122].[@-1,67:70='text',<0>,86:125]
2023-09-08 13:58:35:011 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,86:137].[@-1,85:86='ty',<0>,86:143]
2023-09-08 13:58:35:011 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,86:148].[@-1,101:105='exprv',<0>,86:159]
2023-09-08 13:58:35:011 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 13:58:35:011 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,87:44]
2023-09-08 13:58:35:012 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,87:85].[@-1,47:50='line',<0>,87:89]
2023-09-08 13:58:35:012 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,87:96].[@-1,58:60='pos',<0>,87:100]
2023-09-08 13:58:35:012 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,87:106].[@-1,67:70='text',<0>,87:109]
2023-09-08 13:58:35:012 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,87:121].[@-1,91:92='tm',<0>,87:133]
2023-09-08 13:58:35:012 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,87:138].[@-1,101:101='e',<0>,87:143]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 13:58:35:013 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:38]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,88:73].[@-1,41:44='line',<0>,88:77]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,88:84].[@-1,52:54='pos',<0>,88:88]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,88:94].[@-1,61:64='text',<0>,88:97]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,88:110].[@-1,80:81='ty',<0>,88:116]
2023-09-08 13:58:35:013 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,88:121].[@-1,90:90='e',<0>,88:126]
2023-09-08 13:58:35:014 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 13:58:35:014 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:22]
2023-09-08 13:58:35:014 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,89:57].[@-1,41:44='line',<0>,89:61]
2023-09-08 13:58:35:015 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,89:68].[@-1,52:54='pos',<0>,89:72]
2023-09-08 13:58:35:015 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,89:78].[@-1,61:64='text',<0>,89:81]
2023-09-08 13:58:35:015 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,89:118].[@-1,103:103='e',<0>,89:123]
2023-09-08 13:58:35:017 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 13:58:35:017 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,93:18]
2023-09-08 13:58:35:017 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,93:53].[@-1,40:43='line',<0>,93:56]
2023-09-08 13:58:35:020 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,93:63].[@-1,50:52='pos',<0>,93:66]
2023-09-08 13:58:35:021 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,93:72].[@-1,59:62='text',<0>,93:75]
2023-09-08 13:58:35:021 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,93:82].[@-1,71:71='e',<0>,93:87]
2023-09-08 13:58:35:021 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 13:58:35:021 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,94:30]
2023-09-08 13:58:35:022 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,94:74].[@-1,48:51='line',<0>,94:77]
2023-09-08 13:58:35:022 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,94:84].[@-1,58:60='pos',<0>,94:87]
2023-09-08 13:58:35:022 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,94:93].[@-1,67:70='text',<0>,94:96]
2023-09-08 13:58:35:022 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,94:103].[@-1,79:79='e',<0>,94:108]
2023-09-08 13:58:35:022 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,94:112].[@-1,86:89='text',<0>,94:115]
2023-09-08 13:58:35:033 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 13:58:35:033 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,98:8]
2023-09-08 13:58:35:033 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 13:58:35:033 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,99:10]
2023-09-08 13:58:35:033 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 13:58:35:033 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,100:8]
2023-09-08 13:58:35:034 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 13:58:35:034 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,101:9]
2023-09-08 13:58:35:035 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 13:58:35:035 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,108:46].[@-1,196:197='tm',<0>,108:51]
2023-09-08 13:58:35:035 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,109:33]
2023-09-08 13:58:35:035 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 13:58:35:036 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,112:13]
2023-09-08 13:58:35:036 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,113:49].[@-1,92:93='ty',<0>,113:55]
2023-09-08 13:58:35:036 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,114:13]
2023-09-08 13:58:35:036 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,114:26]
2023-09-08 13:58:35:037 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 13:58:35:037 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,119:44]
2023-09-08 13:58:35:037 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,119:73].[@-1,37:41='start',<0>,119:80]
2023-09-08 13:58:35:038 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,119:98].[@-1,62:66='start',<0>,119:105]
2023-09-08 13:58:35:038 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,119:125].[@-1,89:89='e',<0>,119:132]
2023-09-08 13:58:35:038 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,119:136].[@-1,100:100='e',<0>,119:143]
2023-09-08 13:58:35:039 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 13:58:35:039 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,120:7]
2023-09-08 13:58:35:039 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,120:12].[@-1,11:11='e',<0>,120:17]
2023-09-08 13:58:35:046 action-translator LogManager.java:25 translate 
2023-09-08 13:58:35:046 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 13:58:35:046 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 13:58:35:046 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 13:58:35:047 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 13:58:35:047 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 13:58:35:047 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 13:58:35:048 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-08 13:58:35:048 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-08 13:58:35:048 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-08 13:58:35:048 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-08 13:58:35:048 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-08 13:58:35:049 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 13:58:35:049 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-08 13:58:35:049 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-08 13:58:35:050 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 13:58:35:050 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-08 13:58:35:050 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-08 13:58:35:050 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 13:58:35:050 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:53]
2023-09-08 13:58:35:051 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:79].[@-1,31:34='line',<0>,6:82]
2023-09-08 13:58:35:051 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:89].[@-1,41:43='pos',<0>,6:92]
2023-09-08 13:58:35:051 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,6:98].[@-1,50:53='text',<0>,6:101]
2023-09-08 13:58:35:051 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 13:58:35:052 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:43]
2023-09-08 13:58:35:052 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:48].[@-1,12:12='p',<0>,7:53]
2023-09-08 13:58:35:052 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 13:58:35:052 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:87]
2023-09-08 13:58:35:052 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,8:113].[@-1,36:39='line',<0>,8:121]
2023-09-08 13:58:35:053 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,8:128].[@-1,51:53='pos',<0>,8:136]
2023-09-08 13:58:35:053 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,8:142].[@-1,68:68='l',<0>,8:153]
2023-09-08 13:58:35:053 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 13:58:35:053 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-08 13:58:35:053 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-08 13:58:35:053 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-08 13:58:35:054 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-08 13:58:35:054 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-08 13:58:35:054 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-08 13:58:35:055 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-08 13:58:35:055 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-08 13:58:35:056 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-08 13:58:35:057 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 13:58:35:057 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-08 13:58:35:057 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-08 13:58:35:057 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-08 13:58:35:057 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-08 13:58:35:058 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 13:58:35:058 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-08 13:58:35:058 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-08 13:58:35:058 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-08 13:58:35:058 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 13:58:35:059 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-08 13:58:35:059 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-08 13:58:35:060 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-08 13:58:35:060 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 13:58:35:061 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-08 13:58:35:061 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-08 13:58:35:061 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-08 13:58:35:063 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 13:58:35:063 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:063 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:160]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:190].[@-1,37:41='start',<0>,35:195]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:213].[@-1,60:64='start',<0>,35:218]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:238].[@-1,85:85='e',<0>,35:243]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:247].[@-1,92:95='text',<0>,35:250]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:257].[@-1,105:105='e',<0>,35:263]
2023-09-08 13:58:35:064 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 13:58:35:065 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:065 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-09-08 13:58:35:065 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-09-08 13:58:35:065 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-09-08 13:58:35:065 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-09-08 13:58:35:065 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-09-08 13:58:35:066 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-09-08 13:58:35:066 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 13:58:35:066 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:066 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:153]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:183].[@-1,37:41='start',<0>,37:188]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:206].[@-1,60:64='start',<0>,37:211]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:231].[@-1,85:85='e',<0>,37:236]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:240].[@-1,92:95='text',<0>,37:243]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:250].[@-1,105:105='e',<0>,37:256]
2023-09-08 13:58:35:067 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 13:58:35:068 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:068 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-08 13:58:35:068 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-08 13:58:35:068 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-08 13:58:35:068 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-08 13:58:35:068 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-08 13:58:35:069 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-08 13:58:35:069 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 13:58:35:069 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:069 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:152]
2023-09-08 13:58:35:069 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:182].[@-1,37:41='start',<0>,39:187]
2023-09-08 13:58:35:073 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:205].[@-1,60:64='start',<0>,39:210]
2023-09-08 13:58:35:074 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:230].[@-1,85:85='e',<0>,39:235]
2023-09-08 13:58:35:074 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:239].[@-1,92:95='text',<0>,39:242]
2023-09-08 13:58:35:074 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:249].[@-1,105:105='e',<0>,39:255]
2023-09-08 13:58:35:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 13:58:35:075 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:075 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-09-08 13:58:35:075 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 13:58:35:076 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 13:58:35:076 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-09-08 13:58:35:077 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-09-08 13:58:35:077 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-09-08 13:58:35:078 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-09-08 13:58:35:078 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-09-08 13:58:35:078 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 13:58:35:082 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 13:58:35:084 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 13:58:35:084 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,165:29]
2023-09-08 13:58:35:084 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,165:58].[@-1,35:38='line',<0>,165:62]
2023-09-08 13:58:35:084 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,165:69].[@-1,46:48='pos',<0>,165:73]
2023-09-08 13:58:35:084 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,165:79].[@-1,57:57='e',<0>,165:84]
2023-09-08 13:58:35:085 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 13:58:35:085 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,166:31]
2023-09-08 13:58:35:085 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,166:62].[@-1,39:42='line',<0>,166:68]
2023-09-08 13:58:35:086 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,166:75].[@-1,52:54='pos',<0>,166:81]
2023-09-08 13:58:35:086 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,166:87].[@-1,63:63='e',<0>,166:92]
2023-09-08 13:58:35:086 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 13:58:35:086 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,167:29]
2023-09-08 13:58:35:087 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,167:61].[@-1,38:41='line',<0>,167:65]
2023-09-08 13:58:35:087 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,167:72].[@-1,49:51='pos',<0>,167:76]
2023-09-08 13:58:35:087 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,167:82].[@-1,60:60='e',<0>,167:87]
2023-09-08 13:58:35:088 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 13:58:35:089 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,171:31]
2023-09-08 13:58:35:089 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,171:62].[@-1,41:44='line',<0>,171:70]
2023-09-08 13:58:35:089 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,171:77].[@-1,56:58='pos',<0>,171:85]
2023-09-08 13:58:35:091 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,171:91].[@-1,73:73='l',<0>,171:102]
2023-09-08 13:58:35:094 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 13:58:35:094 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,172:20]
2023-09-08 13:58:35:095 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,172:51].[@-1,41:44='line',<0>,172:59]
2023-09-08 13:58:35:095 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,172:66].[@-1,56:58='pos',<0>,172:74]
2023-09-08 13:58:35:095 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 13:58:35:095 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,173:7]
2023-09-08 13:58:35:095 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,173:42].[@-1,40:43='line',<0>,173:45]
2023-09-08 13:58:35:096 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,173:52].[@-1,50:52='pos',<0>,173:55]
2023-09-08 13:58:35:096 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,173:61].[@-1,59:62='text',<0>,173:64]
2023-09-08 13:58:35:096 action-translator LogManager.java:25 translate 
2023-09-08 13:58:35:097 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 13:58:35:097 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 13:58:35:097 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 13:58:35:097 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 13:58:35:097 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 13:58:35:097 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 13:58:35:098 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 13:58:35:098 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 13:58:35:098 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 13:58:35:098 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 13:58:35:098 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 13:58:35:099 action-translator LogManager.java:25 translate 
2023-09-08 13:58:35:099 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 13:58:35:099 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-08 13:58:35:099 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-08 13:58:35:100 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-08 13:58:35:100 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-08 13:58:35:101 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 13:58:35:101 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 13:58:35:101 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-08 13:58:35:102 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-08 13:58:35:102 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-08 13:58:35:102 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-08 13:58:35:102 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-08 13:58:35:102 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 13:58:36:835 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 13:58:36:835 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 13:58:37:305 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 13:58:37:305 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

