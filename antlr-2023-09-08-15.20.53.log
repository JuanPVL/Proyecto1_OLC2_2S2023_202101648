2023-09-08 15:20:50:278 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 15:20:50:306 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 15:20:51:065 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 15:20:51:077 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 15:20:51:088 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO REMOVE PAR_IZQ AT DOSPUNTOS expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 15:20:51:088 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 15:20:51:119 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=604> left=expr<tokenIndex=608,p=20> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=716> left=expr<tokenIndex=720,p=14> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=758> expr<tokenIndex=760> PAR_DER<tokenIndex=762> { $e = $expr.e } 
        | conversionstmt<tokenIndex=768> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=773> PUNTO<tokenIndex=775> COUNT<tokenIndex=777> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | ID<tokenIndex=782> PUNTO<tokenIndex=784> ISEMPTY<tokenIndex=786> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=794> { $e = $list.p} 
        | COR_IZQ<tokenIndex=800> listParams<tokenIndex=802> COR_DER<tokenIndex=804> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=810>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=816>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=822> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=828> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=834> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MULT<tokenIndex=621>|DIV<tokenIndex=623>|MOD<tokenIndex=625>) right=expr<tokenIndex=630,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(SUM<tokenIndex=643>|RES<tokenIndex=645>) right=expr<tokenIndex=650,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAYIG<tokenIndex=663>|MAYOR<tokenIndex=665>) right=expr<tokenIndex=670,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MENIG<tokenIndex=683>|MENOR<tokenIndex=685>) right=expr<tokenIndex=690,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=703>|DIFE<tokenIndex=705>) right=expr<tokenIndex=710,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=AND<tokenIndex=732> right=expr<tokenIndex=736,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=OR<tokenIndex=748> right=expr<tokenIndex=752,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 15:20:51:171 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 604))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 608) (= p 20)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 716))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 720) (= p 14)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 758))) (expr (ELEMENT_OPTIONS (= tokenIndex 760))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 762))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 768))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 773))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 775))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 777))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 782))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 784))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 786))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 794)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 800))) (listParams (ELEMENT_OPTIONS (= tokenIndex 802))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 804))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 810))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 816))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 822))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 828))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 834))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 621))) (DIV (ELEMENT_OPTIONS (= tokenIndex 623))) (MOD (ELEMENT_OPTIONS (= tokenIndex 625))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 630) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 643))) (RES (ELEMENT_OPTIONS (= tokenIndex 645))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 650) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 663))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 665))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 670) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 683))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 685))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 690) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 703))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 705))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 710) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 732)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 736) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 748)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 752) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 15:20:51:172 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=935> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=927> expr<tokenIndex=929> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 15:20:51:175 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 935))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 927))) (expr (ELEMENT_OPTIONS (= tokenIndex 929))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 15:20:51:176 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=964> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=954> expr<tokenIndex=956> COR_DER<tokenIndex=958> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-08 15:20:51:180 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 964))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 954))) (expr (ELEMENT_OPTIONS (= tokenIndex 956))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 958))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-08 15:20:51:205 grammar LogManager.java:25 import INT=1
2023-09-08 15:20:51:209 grammar LogManager.java:25 import FLOAT=2
2023-09-08 15:20:51:209 grammar LogManager.java:25 import BOOL=3
2023-09-08 15:20:51:210 grammar LogManager.java:25 import STR=4
2023-09-08 15:20:51:210 grammar LogManager.java:25 import TRU=5
2023-09-08 15:20:51:210 grammar LogManager.java:25 import FAL=6
2023-09-08 15:20:51:210 grammar LogManager.java:25 import PRINT=7
2023-09-08 15:20:51:210 grammar LogManager.java:25 import IF=8
2023-09-08 15:20:51:210 grammar LogManager.java:25 import ELSE=9
2023-09-08 15:20:51:210 grammar LogManager.java:25 import WHILE=10
2023-09-08 15:20:51:210 grammar LogManager.java:25 import FOR=11
2023-09-08 15:20:51:210 grammar LogManager.java:25 import IN=12
2023-09-08 15:20:51:210 grammar LogManager.java:25 import VAR=13
2023-09-08 15:20:51:210 grammar LogManager.java:25 import LET=14
2023-09-08 15:20:51:210 grammar LogManager.java:25 import NIL=15
2023-09-08 15:20:51:211 grammar LogManager.java:25 import BREAK=16
2023-09-08 15:20:51:211 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 15:20:51:211 grammar LogManager.java:25 import APPEND=18
2023-09-08 15:20:51:211 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 15:20:51:211 grammar LogManager.java:25 import REMOVE=20
2023-09-08 15:20:51:211 grammar LogManager.java:25 import AT=21
2023-09-08 15:20:51:212 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 15:20:51:212 grammar LogManager.java:25 import COUNT=23
2023-09-08 15:20:51:212 grammar LogManager.java:25 import ARRAY=24
2023-09-08 15:20:51:212 grammar LogManager.java:25 import NUMBER=25
2023-09-08 15:20:51:212 grammar LogManager.java:25 import STRING=26
2023-09-08 15:20:51:212 grammar LogManager.java:25 import ID=27
2023-09-08 15:20:51:212 grammar LogManager.java:25 import DIFE=28
2023-09-08 15:20:51:212 grammar LogManager.java:25 import IG_IG=29
2023-09-08 15:20:51:212 grammar LogManager.java:25 import NOT=30
2023-09-08 15:20:51:212 grammar LogManager.java:25 import OR=31
2023-09-08 15:20:51:212 grammar LogManager.java:25 import AND=32
2023-09-08 15:20:51:212 grammar LogManager.java:25 import IGUAL=33
2023-09-08 15:20:51:212 grammar LogManager.java:25 import MAYIG=34
2023-09-08 15:20:51:212 grammar LogManager.java:25 import MENIG=35
2023-09-08 15:20:51:212 grammar LogManager.java:25 import MAYOR=36
2023-09-08 15:20:51:213 grammar LogManager.java:25 import MENOR=37
2023-09-08 15:20:51:213 grammar LogManager.java:25 import MULT=38
2023-09-08 15:20:51:213 grammar LogManager.java:25 import DIV=39
2023-09-08 15:20:51:213 grammar LogManager.java:25 import SUM=40
2023-09-08 15:20:51:213 grammar LogManager.java:25 import RES=41
2023-09-08 15:20:51:213 grammar LogManager.java:25 import MOD=42
2023-09-08 15:20:51:213 grammar LogManager.java:25 import PAR_IZQ=43
2023-09-08 15:20:51:213 grammar LogManager.java:25 import PAR_DER=44
2023-09-08 15:20:51:213 grammar LogManager.java:25 import LLAVE_IZQ=45
2023-09-08 15:20:51:213 grammar LogManager.java:25 import LLAVE_DER=46
2023-09-08 15:20:51:213 grammar LogManager.java:25 import DOSPUNTOS=47
2023-09-08 15:20:51:213 grammar LogManager.java:25 import COR_IZQ=48
2023-09-08 15:20:51:213 grammar LogManager.java:25 import COR_DER=49
2023-09-08 15:20:51:213 grammar LogManager.java:25 import COMA=50
2023-09-08 15:20:51:213 grammar LogManager.java:25 import CIERRAPREGUNTA=51
2023-09-08 15:20:51:213 grammar LogManager.java:25 import PUNTOCOMA=52
2023-09-08 15:20:51:213 grammar LogManager.java:25 import PUNTO=53
2023-09-08 15:20:51:213 grammar LogManager.java:25 import WHITESPACE=54
2023-09-08 15:20:51:214 grammar LogManager.java:25 import COMMENT=55
2023-09-08 15:20:51:214 grammar LogManager.java:25 import LINE_COMMENT=56
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'Int'=1
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'Float'=2
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'String'=4
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'true'=5
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'false'=6
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'print'=7
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'if'=8
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'else'=9
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'while'=10
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'for'=11
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'in'=12
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'var'=13
2023-09-08 15:20:51:214 grammar LogManager.java:25 import 'let'=14
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'nil'=15
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'break'=16
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'continue'=17
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'append'=18
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'remove'=20
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'at'=21
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'isEmpty'=22
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'count'=23
2023-09-08 15:20:51:215 grammar LogManager.java:25 import 'array'=24
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '!='=28
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '=='=29
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '!'=30
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '||'=31
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '&&'=32
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '='=33
2023-09-08 15:20:51:215 grammar LogManager.java:25 import '>='=34
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '<='=35
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '>'=36
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '<'=37
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '*'=38
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '/'=39
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '+'=40
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '-'=41
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '%'=42
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '('=43
2023-09-08 15:20:51:216 grammar LogManager.java:25 import ')'=44
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '{'=45
2023-09-08 15:20:51:216 grammar LogManager.java:25 import '}'=46
2023-09-08 15:20:51:216 grammar LogManager.java:25 import ':'=47
2023-09-08 15:20:51:217 grammar LogManager.java:25 import '['=48
2023-09-08 15:20:51:217 grammar LogManager.java:25 import ']'=49
2023-09-08 15:20:51:217 grammar LogManager.java:25 import ','=50
2023-09-08 15:20:51:217 grammar LogManager.java:25 import '?'=51
2023-09-08 15:20:51:217 grammar LogManager.java:25 import ';'=52
2023-09-08 15:20:51:217 grammar LogManager.java:25 import '.'=53
2023-09-08 15:20:51:218 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 15:20:51:219 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56}
2023-09-08 15:20:51:220 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'isEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 15:20:51:285 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 15:20:51:286 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 27}, {<EOF>, 46}]
2023-09-08 15:20:51:291 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:292 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 15:20:51:292 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:292 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:292 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 15:20:51:293 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:293 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:293 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 15:20:51:293 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:293 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:293 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 15:20:51:293 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:293 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:293 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 15:20:51:293 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:293 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:294 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 15:20:51:294 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:294 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:294 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 15:20:51:294 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:294 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:294 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 15:20:51:294 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:294 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:294 LL1 LogManager.java:25 
DECISION 9 in rule instruction
2023-09-08 15:20:51:295 LL1 LogManager.java:25 look=[7, 8, {13..14}, 27, 10, 11, 16, 17, 27, 27, 27]
2023-09-08 15:20:51:295 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:295 LL1 LogManager.java:25 
DECISION 10 in rule blockelsif
2023-09-08 15:20:51:295 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 15:20:51:295 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:295 LL1 LogManager.java:25 
DECISION 11 in rule ifstmt
2023-09-08 15:20:51:296 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 15:20:51:296 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:296 LL1 LogManager.java:25 
DECISION 12 in rule declarationstmt
2023-09-08 15:20:51:296 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 15:20:51:296 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:296 LL1 LogManager.java:25 
DECISION 13 in rule asignationstmt
2023-09-08 15:20:51:296 LL1 LogManager.java:25 look=[27, 27]
2023-09-08 15:20:51:296 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:296 LL1 LogManager.java:25 
DECISION 14 in rule types
2023-09-08 15:20:51:296 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 15:20:51:297 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:297 LL1 LogManager.java:25 
DECISION 15 in rule typesmatriz
2023-09-08 15:20:51:297 LL1 LogManager.java:25 look=[48, {1..4}]
2023-09-08 15:20:51:297 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:297 LL1 LogManager.java:25 
DECISION 16 in rule exprFor
2023-09-08 15:20:51:297 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 25..27, 30, 41, 43, 48}, {1..2, 4..6, 15, 25..27, 30, 41, 43, 48}]
2023-09-08 15:20:51:297 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:297 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-09-08 15:20:51:298 LL1 LogManager.java:25 look=[41, 30, 43, {1..2, 4}, 27, 27, 27, 48, 25, 26, 5, 6, 15]
2023-09-08 15:20:51:298 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:298 LL1 LogManager.java:25 
DECISION 18 in rule expr
2023-09-08 15:20:51:298 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 15:20:51:298 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:298 LL1 LogManager.java:25 
DECISION 19 in rule expr
2023-09-08 15:20:51:298 LL1 LogManager.java:25 look=[null, null]
2023-09-08 15:20:51:298 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:298 LL1 LogManager.java:25 
DECISION 20 in rule conversionstmt
2023-09-08 15:20:51:298 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 15:20:51:301 LL1 LogManager.java:25 LL(1)? true
2023-09-08 15:20:51:301 LL1 LogManager.java:25 
DECISION 21 in rule exprvector
2023-09-08 15:20:51:301 LL1 LogManager.java:25 look=[48, 48, 27]
2023-09-08 15:20:51:301 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:301 LL1 LogManager.java:25 
DECISION 22 in rule listParams
2023-09-08 15:20:51:301 LL1 LogManager.java:25 look=[null, {44, 49}]
2023-09-08 15:20:51:301 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:301 LL1 LogManager.java:25 
DECISION 23 in rule listArray
2023-09-08 15:20:51:301 LL1 LogManager.java:25 look=[null, null]
2023-09-08 15:20:51:301 LL1 LogManager.java:25 LL(1)? false
2023-09-08 15:20:51:313 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 15:20:51:334 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 15:20:51:335 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 15:20:51:338 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 15:20:51:341 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 15:20:51:341 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 15:20:51:353 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 15:20:51:354 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 15:20:51:355 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 15:20:51:360 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 15:20:51:360 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 15:20:51:360 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 15:20:51:361 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 15:20:51:361 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 15:20:51:361 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 15:20:51:362 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 15:20:51:362 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 15:20:51:362 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 15:20:51:363 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 15:20:51:363 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 15:20:51:363 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 15:20:51:364 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 15:20:51:364 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 15:20:51:364 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 15:20:51:364 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 15:20:51:364 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 15:20:51:365 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 15:20:51:365 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 15:20:51:366 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:22]
2023-09-08 15:20:51:366 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,45:52].[@-1,37:40='line',<0>,45:58]
2023-09-08 15:20:51:366 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,45:65].[@-1,50:52='pos',<0>,45:71]
2023-09-08 15:20:51:367 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 15:20:51:368 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:25]
2023-09-08 15:20:51:368 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,46:58].[@-1,43:46='line',<0>,46:67]
2023-09-08 15:20:51:369 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,46:74].[@-1,59:61='pos',<0>,46:83]
2023-09-08 15:20:51:370 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 15:20:51:371 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:53]
2023-09-08 15:20:51:371 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,47:84].[@-1,35:38='line',<0>,47:87]
2023-09-08 15:20:51:371 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,47:94].[@-1,45:47='pos',<0>,47:97]
2023-09-08 15:20:51:371 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,47:103].[@-1,54:57='text',<0>,47:106]
2023-09-08 15:20:51:371 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,47:113].[@-1,66:66='e',<0>,47:118]
2023-09-08 15:20:51:372 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-08 15:20:51:372 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:52]
2023-09-08 15:20:51:372 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,48:87].[@-1,39:42='line',<0>,48:90]
2023-09-08 15:20:51:373 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,48:97].[@-1,49:51='pos',<0>,48:100]
2023-09-08 15:20:51:373 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,48:106].[@-1,58:61='text',<0>,48:109]
2023-09-08 15:20:51:373 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveAt($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 15:20:51:374 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,49:66]
2023-09-08 15:20:51:374 action-translator LogManager.java:25 qattr [@-1,34:35='ID',<0>,49:99].[@-1,37:40='line',<0>,49:102]
2023-09-08 15:20:51:374 action-translator LogManager.java:25 qattr [@-1,44:45='ID',<0>,49:109].[@-1,47:49='pos',<0>,49:112]
2023-09-08 15:20:51:374 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,49:118].[@-1,56:59='text',<0>,49:121]
2023-09-08 15:20:51:376 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,49:128].[@-1,68:68='e',<0>,49:133]
2023-09-08 15:20:51:379 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 15:20:51:380 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,53:37]
2023-09-08 15:20:51:380 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,53:67].[@-1,38:41='line',<0>,53:73]
2023-09-08 15:20:51:380 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,53:79].[@-1,50:52='pos',<0>,53:85]
2023-09-08 15:20:51:381 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,53:90].[@-1,66:66='l',<0>,53:101]
2023-09-08 15:20:51:384 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 15:20:51:385 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,59:5]
2023-09-08 15:20:51:387 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 15:20:51:387 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,66:13]
2023-09-08 15:20:51:387 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,66:29]
2023-09-08 15:20:51:391 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 15:20:51:391 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,72:38]
2023-09-08 15:20:51:392 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,72:67].[@-1,34:37='line',<0>,72:70]
2023-09-08 15:20:51:392 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,72:77].[@-1,44:46='pos',<0>,72:80]
2023-09-08 15:20:51:392 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,72:86].[@-1,55:55='e',<0>,72:91]
2023-09-08 15:20:51:392 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,72:95].[@-1,65:67='blk',<0>,72:101]
2023-09-08 15:20:51:393 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 15:20:51:393 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,73:84]
2023-09-08 15:20:51:394 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,73:113].[@-1,33:36='line',<0>,73:116]
2023-09-08 15:20:51:396 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,73:123].[@-1,43:45='pos',<0>,73:126]
2023-09-08 15:20:51:396 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,73:132].[@-1,54:54='e',<0>,73:137]
2023-09-08 15:20:51:396 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,73:141].[@-1,65:67='blk',<0>,73:148]
2023-09-08 15:20:51:396 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,73:154].[@-1,80:82='blk',<0>,73:163]
2023-09-08 15:20:51:397 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 15:20:51:397 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,74:60]
2023-09-08 15:20:51:397 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,74:89].[@-1,33:36='line',<0>,74:92]
2023-09-08 15:20:51:398 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,74:99].[@-1,43:45='pos',<0>,74:102]
2023-09-08 15:20:51:398 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,74:108].[@-1,54:54='e',<0>,74:113]
2023-09-08 15:20:51:398 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,74:117].[@-1,65:67='blk',<0>,74:124]
2023-09-08 15:20:51:398 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,74:130].[@-1,82:86='blkif',<0>,74:141]
2023-09-08 15:20:51:399 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 15:20:51:399 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,78:41]
2023-09-08 15:20:51:400 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,78:76].[@-1,43:46='line',<0>,78:82]
2023-09-08 15:20:51:400 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,78:89].[@-1,56:58='pos',<0>,78:95]
2023-09-08 15:20:51:400 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,78:101].[@-1,67:67='e',<0>,78:106]
2023-09-08 15:20:51:400 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,78:110].[@-1,77:79='blk',<0>,78:116]
2023-09-08 15:20:51:401 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 15:20:51:401 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,82:47]
2023-09-08 15:20:51:401 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,82:78].[@-1,36:39='line',<0>,82:82]
2023-09-08 15:20:51:402 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,82:89].[@-1,47:49='pos',<0>,82:93]
2023-09-08 15:20:51:402 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,82:99].[@-1,56:59='text',<0>,82:102]
2023-09-08 15:20:51:402 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,82:109].[@-1,71:71='e',<0>,82:117]
2023-09-08 15:20:51:403 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,82:121].[@-1,81:83='blk',<0>,82:127]
2023-09-08 15:20:51:405 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 15:20:51:405 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,86:39]
2023-09-08 15:20:51:406 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,86:74].[@-1,41:44='line',<0>,86:78]
2023-09-08 15:20:51:406 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,86:85].[@-1,52:54='pos',<0>,86:89]
2023-09-08 15:20:51:406 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,86:95].[@-1,61:64='text',<0>,86:98]
2023-09-08 15:20:51:406 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,86:110].[@-1,79:80='ty',<0>,86:116]
2023-09-08 15:20:51:406 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,86:121].[@-1,89:89='e',<0>,86:126]
2023-09-08 15:20:51:407 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 15:20:51:407 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,87:22]
2023-09-08 15:20:51:407 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,87:57].[@-1,41:44='line',<0>,87:61]
2023-09-08 15:20:51:408 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,87:68].[@-1,52:54='pos',<0>,87:72]
2023-09-08 15:20:51:408 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,87:78].[@-1,61:64='text',<0>,87:81]
2023-09-08 15:20:51:408 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,87:117].[@-1,102:102='e',<0>,87:122]
2023-09-08 15:20:51:408 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 15:20:51:409 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:42]
2023-09-08 15:20:51:409 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,88:77].[@-1,41:44='line',<0>,88:81]
2023-09-08 15:20:51:409 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,88:88].[@-1,52:54='pos',<0>,88:92]
2023-09-08 15:20:51:409 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,88:98].[@-1,61:64='text',<0>,88:101]
2023-09-08 15:20:51:409 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,88:113].[@-1,79:80='ty',<0>,88:119]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 15:20:51:410 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:60]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,89:101].[@-1,47:50='line',<0>,89:105]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,89:112].[@-1,58:60='pos',<0>,89:116]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,89:122].[@-1,67:70='text',<0>,89:125]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,89:137].[@-1,85:86='ty',<0>,89:143]
2023-09-08 15:20:51:410 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,89:148].[@-1,101:105='exprv',<0>,89:159]
2023-09-08 15:20:51:411 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 15:20:51:411 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,90:44]
2023-09-08 15:20:51:411 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,90:85].[@-1,47:50='line',<0>,90:89]
2023-09-08 15:20:51:412 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,90:96].[@-1,58:60='pos',<0>,90:100]
2023-09-08 15:20:51:413 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,90:106].[@-1,67:70='text',<0>,90:109]
2023-09-08 15:20:51:413 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,90:121].[@-1,91:92='tm',<0>,90:133]
2023-09-08 15:20:51:413 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,90:138].[@-1,101:101='e',<0>,90:143]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 15:20:51:414 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,91:38]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,91:73].[@-1,41:44='line',<0>,91:77]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,91:84].[@-1,52:54='pos',<0>,91:88]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,91:94].[@-1,61:64='text',<0>,91:97]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,91:110].[@-1,80:81='ty',<0>,91:116]
2023-09-08 15:20:51:414 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,91:121].[@-1,90:90='e',<0>,91:126]
2023-09-08 15:20:51:415 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 15:20:51:416 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,92:22]
2023-09-08 15:20:51:416 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,92:57].[@-1,41:44='line',<0>,92:61]
2023-09-08 15:20:51:416 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,92:68].[@-1,52:54='pos',<0>,92:72]
2023-09-08 15:20:51:416 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,92:78].[@-1,61:64='text',<0>,92:81]
2023-09-08 15:20:51:416 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,92:118].[@-1,103:103='e',<0>,92:123]
2023-09-08 15:20:51:418 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 15:20:51:418 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,96:18]
2023-09-08 15:20:51:418 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,96:53].[@-1,40:43='line',<0>,96:56]
2023-09-08 15:20:51:419 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,96:63].[@-1,50:52='pos',<0>,96:66]
2023-09-08 15:20:51:419 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,96:72].[@-1,59:62='text',<0>,96:75]
2023-09-08 15:20:51:421 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,96:82].[@-1,71:71='e',<0>,96:87]
2023-09-08 15:20:51:425 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 15:20:51:426 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,97:30]
2023-09-08 15:20:51:426 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,97:74].[@-1,48:51='line',<0>,97:77]
2023-09-08 15:20:51:426 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,97:84].[@-1,58:60='pos',<0>,97:87]
2023-09-08 15:20:51:426 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,97:93].[@-1,67:70='text',<0>,97:96]
2023-09-08 15:20:51:428 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,97:103].[@-1,79:79='e',<0>,97:108]
2023-09-08 15:20:51:428 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,97:112].[@-1,86:89='text',<0>,97:115]
2023-09-08 15:20:51:429 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 15:20:51:430 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,101:8]
2023-09-08 15:20:51:431 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 15:20:51:431 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,102:10]
2023-09-08 15:20:51:432 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 15:20:51:432 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,103:8]
2023-09-08 15:20:51:432 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 15:20:51:432 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,104:9]
2023-09-08 15:20:51:433 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 15:20:51:433 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,111:46].[@-1,196:197='tm',<0>,111:51]
2023-09-08 15:20:51:433 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,112:33]
2023-09-08 15:20:51:434 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 15:20:51:434 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,115:13]
2023-09-08 15:20:51:434 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,116:49].[@-1,92:93='ty',<0>,116:55]
2023-09-08 15:20:51:435 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,117:13]
2023-09-08 15:20:51:435 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,117:26]
2023-09-08 15:20:51:437 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 15:20:51:437 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,122:44]
2023-09-08 15:20:51:437 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,122:73].[@-1,37:41='start',<0>,122:80]
2023-09-08 15:20:51:438 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,122:98].[@-1,62:66='start',<0>,122:105]
2023-09-08 15:20:51:438 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,122:125].[@-1,89:89='e',<0>,122:132]
2023-09-08 15:20:51:438 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,122:136].[@-1,100:100='e',<0>,122:143]
2023-09-08 15:20:51:438 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 15:20:51:438 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,123:7]
2023-09-08 15:20:51:439 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,123:12].[@-1,11:11='e',<0>,123:17]
2023-09-08 15:20:51:442 action-translator LogManager.java:25 translate 
2023-09-08 15:20:51:442 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 15:20:51:442 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 15:20:51:443 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 15:20:51:443 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 15:20:51:443 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 15:20:51:443 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 15:20:51:443 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-08 15:20:51:444 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-08 15:20:51:444 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-08 15:20:51:444 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-08 15:20:51:444 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-08 15:20:51:444 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 15:20:51:444 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-08 15:20:51:445 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-08 15:20:51:445 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 15:20:51:445 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-08 15:20:51:445 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-08 15:20:51:445 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 15:20:51:445 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:75]
2023-09-08 15:20:51:446 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:101].[@-1,31:34='line',<0>,6:104]
2023-09-08 15:20:51:446 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:111].[@-1,41:43='pos',<0>,6:114]
2023-09-08 15:20:51:446 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,6:120].[@-1,50:53='text',<0>,6:123]
2023-09-08 15:20:51:447 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text)
2023-09-08 15:20:51:447 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:77]
2023-09-08 15:20:51:448 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,7:105].[@-1,33:36='line',<0>,7:108]
2023-09-08 15:20:51:448 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,7:115].[@-1,43:45='pos',<0>,7:118]
2023-09-08 15:20:51:448 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,7:124].[@-1,52:55='text',<0>,7:127]
2023-09-08 15:20:51:448 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 15:20:51:448 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:43]
2023-09-08 15:20:51:448 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,8:48].[@-1,12:12='p',<0>,8:53]
2023-09-08 15:20:51:449 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 15:20:51:449 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:87]
2023-09-08 15:20:51:449 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,9:113].[@-1,36:39='line',<0>,9:121]
2023-09-08 15:20:51:449 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,9:128].[@-1,51:53='pos',<0>,9:136]
2023-09-08 15:20:51:449 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,9:142].[@-1,68:68='l',<0>,9:153]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 15:20:51:450 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,12:30].[@-1,39:42='text',<0>,12:37]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,13:43].[@-1,102:105='text',<0>,13:50]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,17:13]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,17:43].[@-1,240:243='line',<0>,17:50]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,17:56].[@-1,253:255='pos',<0>,17:63]
2023-09-08 15:20:51:450 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,19:37].[@-1,341:344='text',<0>,19:44]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,23:13]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,23:43].[@-1,474:477='line',<0>,23:50]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,23:56].[@-1,487:489='pos',<0>,23:63]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 15:20:51:451 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,28:16].[@-1,25:28='text',<0>,28:23]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,29:9]
2023-09-08 15:20:51:451 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,29:39].[@-1,77:80='line',<0>,29:46]
2023-09-08 15:20:51:452 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,29:53].[@-1,91:93='pos',<0>,29:60]
2023-09-08 15:20:51:452 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 15:20:51:452 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-08 15:20:51:452 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-08 15:20:51:452 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-08 15:20:51:452 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 15:20:51:452 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-08 15:20:51:453 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-08 15:20:51:454 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-08 15:20:51:454 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 15:20:51:454 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:32]
2023-09-08 15:20:51:455 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,33:62].[@-1,36:39='line',<0>,33:66]
2023-09-08 15:20:51:455 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,33:73].[@-1,47:49='pos',<0>,33:77]
2023-09-08 15:20:51:457 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 15:20:51:457 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:458 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:160]
2023-09-08 15:20:51:458 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:190].[@-1,37:41='start',<0>,36:195]
2023-09-08 15:20:51:458 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:213].[@-1,60:64='start',<0>,36:218]
2023-09-08 15:20:51:458 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:238].[@-1,85:85='e',<0>,36:243]
2023-09-08 15:20:51:458 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:247].[@-1,92:95='text',<0>,36:250]
2023-09-08 15:20:51:458 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:257].[@-1,105:105='e',<0>,36:263]
2023-09-08 15:20:51:459 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 15:20:51:459 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:459 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:149]
2023-09-08 15:20:51:459 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:179].[@-1,37:41='start',<0>,37:184]
2023-09-08 15:20:51:459 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:202].[@-1,60:64='start',<0>,37:207]
2023-09-08 15:20:51:459 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:227].[@-1,85:85='e',<0>,37:232]
2023-09-08 15:20:51:460 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:236].[@-1,92:95='text',<0>,37:239]
2023-09-08 15:20:51:460 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:246].[@-1,105:105='e',<0>,37:252]
2023-09-08 15:20:51:460 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 15:20:51:461 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:461 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-08 15:20:51:461 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-08 15:20:51:461 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-08 15:20:51:462 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-08 15:20:51:462 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-08 15:20:51:462 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-08 15:20:51:462 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 15:20:51:463 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:464 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:153]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:183].[@-1,37:41='start',<0>,39:188]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:206].[@-1,60:64='start',<0>,39:211]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:231].[@-1,85:85='e',<0>,39:236]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:240].[@-1,92:95='text',<0>,39:243]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:250].[@-1,105:105='e',<0>,39:256]
2023-09-08 15:20:51:464 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 15:20:51:465 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:465 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:152]
2023-09-08 15:20:51:465 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:182].[@-1,37:41='start',<0>,40:187]
2023-09-08 15:20:51:465 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:205].[@-1,60:64='start',<0>,40:210]
2023-09-08 15:20:51:465 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:230].[@-1,85:85='e',<0>,40:235]
2023-09-08 15:20:51:465 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:239].[@-1,92:95='text',<0>,40:242]
2023-09-08 15:20:51:465 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:249].[@-1,105:105='e',<0>,40:255]
2023-09-08 15:20:51:466 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-08 15:20:51:466 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:466 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:127]
2023-09-08 15:20:51:466 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:157].[@-1,37:41='start',<0>,41:162]
2023-09-08 15:20:51:466 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:180].[@-1,60:64='start',<0>,41:185]
2023-09-08 15:20:51:466 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:205].[@-1,85:85='e',<0>,41:210]
2023-09-08 15:20:51:467 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:214].[@-1,92:95='text',<0>,41:217]
2023-09-08 15:20:51:467 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:224].[@-1,105:105='e',<0>,41:230]
2023-09-08 15:20:51:467 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 15:20:51:467 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 15:20:51:468 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:126]
2023-09-08 15:20:51:468 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:156].[@-1,37:41='start',<0>,42:161]
2023-09-08 15:20:51:468 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:179].[@-1,60:64='start',<0>,42:184]
2023-09-08 15:20:51:469 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:204].[@-1,85:85='e',<0>,42:209]
2023-09-08 15:20:51:469 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:213].[@-1,92:95='text',<0>,42:216]
2023-09-08 15:20:51:469 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:223].[@-1,105:105='e',<0>,42:229]
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-08 15:20:51:472 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 15:20:51:473 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 15:20:51:473 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,169:29]
2023-09-08 15:20:51:473 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,169:58].[@-1,35:38='line',<0>,169:62]
2023-09-08 15:20:51:474 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,169:69].[@-1,46:48='pos',<0>,169:73]
2023-09-08 15:20:51:474 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,169:79].[@-1,57:57='e',<0>,169:84]
2023-09-08 15:20:51:474 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 15:20:51:477 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,170:31]
2023-09-08 15:20:51:477 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,170:62].[@-1,39:42='line',<0>,170:68]
2023-09-08 15:20:51:477 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,170:75].[@-1,52:54='pos',<0>,170:81]
2023-09-08 15:20:51:479 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,170:87].[@-1,63:63='e',<0>,170:92]
2023-09-08 15:20:51:480 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 15:20:51:480 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,171:29]
2023-09-08 15:20:51:482 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,171:61].[@-1,38:41='line',<0>,171:65]
2023-09-08 15:20:51:483 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,171:72].[@-1,49:51='pos',<0>,171:76]
2023-09-08 15:20:51:483 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,171:82].[@-1,60:60='e',<0>,171:87]
2023-09-08 15:20:51:483 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 15:20:51:485 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,175:31]
2023-09-08 15:20:51:485 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,175:62].[@-1,41:44='line',<0>,175:70]
2023-09-08 15:20:51:485 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,175:77].[@-1,56:58='pos',<0>,175:85]
2023-09-08 15:20:51:485 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,175:91].[@-1,73:73='l',<0>,175:102]
2023-09-08 15:20:51:485 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 15:20:51:485 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,176:20]
2023-09-08 15:20:51:486 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,176:51].[@-1,41:44='line',<0>,176:59]
2023-09-08 15:20:51:486 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,176:66].[@-1,56:58='pos',<0>,176:74]
2023-09-08 15:20:51:486 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 15:20:51:486 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,177:7]
2023-09-08 15:20:51:486 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,177:42].[@-1,40:43='line',<0>,177:45]
2023-09-08 15:20:51:487 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,177:52].[@-1,50:52='pos',<0>,177:55]
2023-09-08 15:20:51:487 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,177:61].[@-1,59:62='text',<0>,177:64]
2023-09-08 15:20:51:487 action-translator LogManager.java:25 translate 
2023-09-08 15:20:51:492 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 15:20:51:492 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 15:20:51:492 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 15:20:51:492 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 15:20:51:492 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 15:20:51:492 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 15:20:51:492 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 15:20:51:492 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 15:20:51:493 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 15:20:51:493 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 15:20:51:493 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 15:20:51:493 action-translator LogManager.java:25 translate 
2023-09-08 15:20:51:494 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 15:20:51:494 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-08 15:20:51:494 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-08 15:20:51:494 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-08 15:20:51:494 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-08 15:20:51:494 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 15:20:51:495 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 15:20:51:495 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-08 15:20:51:495 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-08 15:20:51:495 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-08 15:20:51:495 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-08 15:20:51:495 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-08 15:20:51:495 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 15:20:52:148 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 15:20:52:149 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 15:20:52:284 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 15:20:52:285 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

