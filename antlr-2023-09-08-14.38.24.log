2023-09-08 14:38:21:012 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 14:38:21:044 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NIL (BLOCK (ALT 'nil'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE AT (BLOCK (ALT 'at'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ARRAY (BLOCK (ALT 'array'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIFE (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE MAYIG (BLOCK (ALT '>='))) (RULE MENIG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MULT (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE SUM (BLOCK (ALT '+'))) (RULE RES (BLOCK (ALT '-'))) (RULE MOD (BLOCK (ALT '%'))) (RULE PAR_IZQ (BLOCK (ALT '('))) (RULE PAR_DER (BLOCK (ALT ')'))) (RULE LLAVE_IZQ (BLOCK (ALT '{'))) (RULE LLAVE_DER (BLOCK (ALT '}'))) (RULE DOSPUNTOS (BLOCK (ALT ':'))) (RULE COR_IZQ (BLOCK (ALT '['))) (RULE COR_DER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE CIERRAPREGUNTA (BLOCK (ALT '?'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 14:38:21:865 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (BLOCK (ALT SUM) (ALT RES))) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (BLOCK (ALT MULT) (ALT DIV) (ALT MOD))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT SUM) (ALT RES))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAYIG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MENIG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIFE))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:38:21:894 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:38:21:898 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declarationstmt.dec }) (ALT asignationstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignationstmt.asig }) (ALT whilestmt { $inst = $whilestmt.whileinst }) (ALT forstmt { $inst = $forstmt.forinst }) (ALT BREAK (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewBreak($BREAK.line, $BREAK.pos)}) (ALT CONTINUE (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}) (ALT ID PUNTO APPEND PAR_IZQ expr PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)}) (ALT ID PUNTO REMOVELAST PAR_IZQ PAR_DER (? (BLOCK (ALT PUNTOCOMA))) {$inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PAR_IZQ listParams PAR_DER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)}))) (RULE blockelsif (returns []interface{} blkif) (@ init {
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    }) (BLOCK (ALT (+ (BLOCK (ALT (+= elseif ifstmt)))) {
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVE_IZQ block LLAVE_DER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) }) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE LLAVE_IZQ (= elseblck block) LLAVE_DER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)}) (ALT IF expr LLAVE_IZQ (= ifblck block) LLAVE_DER ELSE blockelsif {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)}))) (RULE whilestmt (returns interfaces.Instruction whileinst) (BLOCK (ALT WHILE expr LLAVE_IZQ block LLAVE_DER { $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE forstmt (returns interfaces.Instruction forinst) (BLOCK (ALT FOR ID IN exprFor LLAVE_IZQ block LLAVE_DER {$forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)}))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) }) (ALT VAR ID IGUAL expr { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) }) (ALT VAR ID DOSPUNTOS types CIERRAPREGUNTA { $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) }) (ALT VAR ID DOSPUNTOS COR_IZQ types COR_DER IGUAL exprvector { $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) }) (ALT VAR ID DOSPUNTOS typesmatriz IGUAL expr { $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) }) (ALT LET ID DOSPUNTOS types IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) }) (ALT LET ID IGUAL expr { $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) }))) (RULE asignationstmt (returns interfaces.Instruction asig) (BLOCK (ALT ID IGUAL expr { $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) }) (ALT ID (= op (SET SUM RES)) IGUAL expr {$asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)}))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }))) (RULE typesmatriz (returns []interface{} tm) (BLOCK (ALT COR_IZQ (= list typesmatriz) COR_DER {
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            }) (ALT types {
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        }))) (RULE exprFor (returns interfaces.Expression e) (BLOCK (ALT (= range1 expr) PUNTO PUNTO PUNTO (= range2 expr) {$e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)}) (ALT expr {$e = $expr.e}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT RES (= left expr) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (= left expr) (= op (SET MULT DIV MOD)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET SUM RES)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAYIG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MENIG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIFE)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT NOT (= left expr) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PAR_IZQ expr PAR_DER { $e = $expr.e }) (ALT conversionstmt { $e = $conversionstmt.conv }) (ALT ID . COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list listArray) { $e = $list.p}) (ALT COR_IZQ listParams COR_DER { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT NIL { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) }))) (RULE conversionstmt (returns interfaces.Expression conv) (BLOCK (ALT INT PAR_IZQ expr PAR_DER { $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) }) (ALT FLOAT PAR_IZQ expr PAR_DER { $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) }) (ALT STR PAR_IZQ expr PAR_DER { $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) }))) (RULE exprvector (returns interfaces.Expression exprv) (BLOCK (ALT COR_IZQ listParams COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT COR_IZQ COR_DER { $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) }) (ALT ID { $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)}))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) COR_IZQ expr COR_DER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-08 14:38:21:898 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"
}) RULES)
2023-09-08 14:38:21:957 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} RES<tokenIndex=579> left=expr<tokenIndex=583,p=19> { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) } 
        | NOT<tokenIndex=691> left=expr<tokenIndex=695,p=13> {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)} 
        | PAR_IZQ<tokenIndex=733> expr<tokenIndex=735> PAR_DER<tokenIndex=737> { $e = $expr.e } 
        | conversionstmt<tokenIndex=743> { $e = $conversionstmt.conv } 
        | ID<tokenIndex=748>.COUNT<tokenIndex=750> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)} 
        | list=listArray<tokenIndex=758> { $e = $list.p} 
        | COR_IZQ<tokenIndex=764> listParams<tokenIndex=766> COR_DER<tokenIndex=768> { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=774>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=780>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=786> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=792> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | NIL<tokenIndex=798> { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MULT<tokenIndex=596>|DIV<tokenIndex=598>|MOD<tokenIndex=600>) right=expr<tokenIndex=605,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(SUM<tokenIndex=618>|RES<tokenIndex=620>) right=expr<tokenIndex=625,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MAYIG<tokenIndex=638>|MAYOR<tokenIndex=640>) right=expr<tokenIndex=645,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MENIG<tokenIndex=658>|MENOR<tokenIndex=660>) right=expr<tokenIndex=665,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(IG_IG<tokenIndex=678>|DIFE<tokenIndex=680>) right=expr<tokenIndex=685,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=707> right=expr<tokenIndex=711,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=723> right=expr<tokenIndex=727,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 14:38:22:010 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (RES (ELEMENT_OPTIONS (= tokenIndex 579))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 583) (= p 19)))) { $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) }) (ALT (NOT (ELEMENT_OPTIONS (= tokenIndex 691))) (= left (expr (ELEMENT_OPTIONS (= tokenIndex 695) (= p 13)))) {$e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)}) (ALT (PAR_IZQ (ELEMENT_OPTIONS (= tokenIndex 733))) (expr (ELEMENT_OPTIONS (= tokenIndex 735))) (PAR_DER (ELEMENT_OPTIONS (= tokenIndex 737))) { $e = $expr.e }) (ALT (conversionstmt (ELEMENT_OPTIONS (= tokenIndex 743))) { $e = $conversionstmt.conv }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 748))) . (COUNT (ELEMENT_OPTIONS (= tokenIndex 750))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)}) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 758)))) { $e = $list.p}) (ALT (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 764))) (listParams (ELEMENT_OPTIONS (= tokenIndex 766))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 768))) { $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 774))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 780))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 786))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 792))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (NIL (ELEMENT_OPTIONS (= tokenIndex 798))) { $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MULT (ELEMENT_OPTIONS (= tokenIndex 596))) (DIV (ELEMENT_OPTIONS (= tokenIndex 598))) (MOD (ELEMENT_OPTIONS (= tokenIndex 600))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 605) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (SUM (ELEMENT_OPTIONS (= tokenIndex 618))) (RES (ELEMENT_OPTIONS (= tokenIndex 620))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 625) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MAYIG (ELEMENT_OPTIONS (= tokenIndex 638))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 640))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 645) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MENIG (ELEMENT_OPTIONS (= tokenIndex 658))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 660))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 665) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 678))) (DIFE (ELEMENT_OPTIONS (= tokenIndex 680))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 685) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 707)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 711) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 723)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 727) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 14:38:22:011 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=899> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=891> expr<tokenIndex=893> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-08 14:38:22:014 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 899))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 891))) (expr (ELEMENT_OPTIONS (= tokenIndex 893))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-08 14:38:22:015 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=928> { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COR_IZQ<tokenIndex=918> expr<tokenIndex=920> COR_DER<tokenIndex=922> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-08 14:38:22:019 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 928))) { $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COR_IZQ (ELEMENT_OPTIONS (= tokenIndex 918))) (expr (ELEMENT_OPTIONS (= tokenIndex 920))) (COR_DER (ELEMENT_OPTIONS (= tokenIndex 922))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-08 14:38:22:037 grammar LogManager.java:25 import INT=1
2023-09-08 14:38:22:038 grammar LogManager.java:25 import FLOAT=2
2023-09-08 14:38:22:038 grammar LogManager.java:25 import BOOL=3
2023-09-08 14:38:22:038 grammar LogManager.java:25 import STR=4
2023-09-08 14:38:22:038 grammar LogManager.java:25 import TRU=5
2023-09-08 14:38:22:038 grammar LogManager.java:25 import FAL=6
2023-09-08 14:38:22:038 grammar LogManager.java:25 import PRINT=7
2023-09-08 14:38:22:038 grammar LogManager.java:25 import IF=8
2023-09-08 14:38:22:038 grammar LogManager.java:25 import ELSE=9
2023-09-08 14:38:22:039 grammar LogManager.java:25 import WHILE=10
2023-09-08 14:38:22:039 grammar LogManager.java:25 import FOR=11
2023-09-08 14:38:22:039 grammar LogManager.java:25 import IN=12
2023-09-08 14:38:22:039 grammar LogManager.java:25 import VAR=13
2023-09-08 14:38:22:039 grammar LogManager.java:25 import LET=14
2023-09-08 14:38:22:039 grammar LogManager.java:25 import NIL=15
2023-09-08 14:38:22:039 grammar LogManager.java:25 import BREAK=16
2023-09-08 14:38:22:039 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 14:38:22:039 grammar LogManager.java:25 import APPEND=18
2023-09-08 14:38:22:040 grammar LogManager.java:25 import REMOVELAST=19
2023-09-08 14:38:22:040 grammar LogManager.java:25 import REMOVE=20
2023-09-08 14:38:22:040 grammar LogManager.java:25 import AT=21
2023-09-08 14:38:22:040 grammar LogManager.java:25 import ISEMPTY=22
2023-09-08 14:38:22:040 grammar LogManager.java:25 import COUNT=23
2023-09-08 14:38:22:040 grammar LogManager.java:25 import ARRAY=24
2023-09-08 14:38:22:041 grammar LogManager.java:25 import NUMBER=25
2023-09-08 14:38:22:041 grammar LogManager.java:25 import STRING=26
2023-09-08 14:38:22:041 grammar LogManager.java:25 import ID=27
2023-09-08 14:38:22:041 grammar LogManager.java:25 import DIFE=28
2023-09-08 14:38:22:041 grammar LogManager.java:25 import IG_IG=29
2023-09-08 14:38:22:041 grammar LogManager.java:25 import NOT=30
2023-09-08 14:38:22:041 grammar LogManager.java:25 import OR=31
2023-09-08 14:38:22:041 grammar LogManager.java:25 import AND=32
2023-09-08 14:38:22:041 grammar LogManager.java:25 import IGUAL=33
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MAYIG=34
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MENIG=35
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MAYOR=36
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MENOR=37
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MULT=38
2023-09-08 14:38:22:042 grammar LogManager.java:25 import DIV=39
2023-09-08 14:38:22:042 grammar LogManager.java:25 import SUM=40
2023-09-08 14:38:22:042 grammar LogManager.java:25 import RES=41
2023-09-08 14:38:22:042 grammar LogManager.java:25 import MOD=42
2023-09-08 14:38:22:043 grammar LogManager.java:25 import PAR_IZQ=43
2023-09-08 14:38:22:043 grammar LogManager.java:25 import PAR_DER=44
2023-09-08 14:38:22:043 grammar LogManager.java:25 import LLAVE_IZQ=45
2023-09-08 14:38:22:043 grammar LogManager.java:25 import LLAVE_DER=46
2023-09-08 14:38:22:043 grammar LogManager.java:25 import DOSPUNTOS=47
2023-09-08 14:38:22:043 grammar LogManager.java:25 import COR_IZQ=48
2023-09-08 14:38:22:043 grammar LogManager.java:25 import COR_DER=49
2023-09-08 14:38:22:043 grammar LogManager.java:25 import COMA=50
2023-09-08 14:38:22:043 grammar LogManager.java:25 import CIERRAPREGUNTA=51
2023-09-08 14:38:22:043 grammar LogManager.java:25 import PUNTOCOMA=52
2023-09-08 14:38:22:043 grammar LogManager.java:25 import PUNTO=53
2023-09-08 14:38:22:043 grammar LogManager.java:25 import WHITESPACE=54
2023-09-08 14:38:22:043 grammar LogManager.java:25 import COMMENT=55
2023-09-08 14:38:22:043 grammar LogManager.java:25 import LINE_COMMENT=56
2023-09-08 14:38:22:043 grammar LogManager.java:25 import 'Int'=1
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'Float'=2
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'Bool'=3
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'String'=4
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'true'=5
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'false'=6
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'print'=7
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'if'=8
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'else'=9
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'while'=10
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'for'=11
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'in'=12
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'var'=13
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'let'=14
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'nil'=15
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'break'=16
2023-09-08 14:38:22:044 grammar LogManager.java:25 import 'continue'=17
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'append'=18
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'removeLast'=19
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'remove'=20
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'at'=21
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'IsEmpty'=22
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'count'=23
2023-09-08 14:38:22:045 grammar LogManager.java:25 import 'array'=24
2023-09-08 14:38:22:045 grammar LogManager.java:25 import '!='=28
2023-09-08 14:38:22:045 grammar LogManager.java:25 import '=='=29
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '!'=30
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '||'=31
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '&&'=32
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '='=33
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '>='=34
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '<='=35
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '>'=36
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '<'=37
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '*'=38
2023-09-08 14:38:22:046 grammar LogManager.java:25 import '/'=39
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '+'=40
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '-'=41
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '%'=42
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '('=43
2023-09-08 14:38:22:047 grammar LogManager.java:25 import ')'=44
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '{'=45
2023-09-08 14:38:22:047 grammar LogManager.java:25 import '}'=46
2023-09-08 14:38:22:048 grammar LogManager.java:25 import ':'=47
2023-09-08 14:38:22:048 grammar LogManager.java:25 import '['=48
2023-09-08 14:38:22:048 grammar LogManager.java:25 import ']'=49
2023-09-08 14:38:22:048 grammar LogManager.java:25 import ','=50
2023-09-08 14:38:22:048 grammar LogManager.java:25 import '?'=51
2023-09-08 14:38:22:048 grammar LogManager.java:25 import ';'=52
2023-09-08 14:38:22:048 grammar LogManager.java:25 import '.'=53
2023-09-08 14:38:22:048 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 14:38:22:049 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, LET=14, NIL=15, BREAK=16, CONTINUE=17, APPEND=18, REMOVELAST=19, REMOVE=20, AT=21, ISEMPTY=22, COUNT=23, ARRAY=24, NUMBER=25, STRING=26, ID=27, DIFE=28, IG_IG=29, NOT=30, OR=31, AND=32, IGUAL=33, MAYIG=34, MENIG=35, MAYOR=36, MENOR=37, MULT=38, DIV=39, SUM=40, RES=41, MOD=42, PAR_IZQ=43, PAR_DER=44, LLAVE_IZQ=45, LLAVE_DER=46, DOSPUNTOS=47, COR_IZQ=48, COR_DER=49, COMA=50, CIERRAPREGUNTA=51, PUNTOCOMA=52, PUNTO=53, WHITESPACE=54, COMMENT=55, LINE_COMMENT=56}
2023-09-08 14:38:22:050 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, 'let'=14, 'nil'=15, 'break'=16, 'continue'=17, 'append'=18, 'removeLast'=19, 'remove'=20, 'at'=21, 'IsEmpty'=22, 'count'=23, 'array'=24, '!='=28, '=='=29, '!'=30, '||'=31, '&&'=32, '='=33, '>='=34, '<='=35, '>'=36, '<'=37, '*'=38, '/'=39, '+'=40, '-'=41, '%'=42, '('=43, ')'=44, '{'=45, '}'=46, ':'=47, '['=48, ']'=49, ','=50, '?'=51, ';'=52, '.'=53}
2023-09-08 14:38:22:120 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 14:38:22:120 LL1 LogManager.java:25 look=[{7..8, 10..11, 13..14, 16..17, 27}, {<EOF>, 46}]
2023-09-08 14:38:22:121 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:121 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 14:38:22:121 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:121 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:122 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 14:38:22:122 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:122 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:122 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 14:38:22:123 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:123 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:123 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 14:38:22:123 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:123 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:123 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 14:38:22:124 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:124 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:124 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 14:38:22:124 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:124 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:124 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 14:38:22:124 LL1 LogManager.java:25 look=[52, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:124 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:125 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 14:38:22:125 LL1 LogManager.java:25 look=[7, 8, {13..14}, 27, 10, 11, 16, 17, 27, 27]
2023-09-08 14:38:22:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:125 LL1 LogManager.java:25 
DECISION 9 in rule blockelsif
2023-09-08 14:38:22:125 LL1 LogManager.java:25 look=[8, {<EOF>, 7..8, 10..11, 13..14, 16..17, 27, 46}]
2023-09-08 14:38:22:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:125 LL1 LogManager.java:25 
DECISION 10 in rule ifstmt
2023-09-08 14:38:22:125 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 14:38:22:126 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:126 LL1 LogManager.java:25 
DECISION 11 in rule declarationstmt
2023-09-08 14:38:22:126 LL1 LogManager.java:25 look=[13, 13, 13, 13, 13, 14, 14]
2023-09-08 14:38:22:126 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:126 LL1 LogManager.java:25 
DECISION 12 in rule asignationstmt
2023-09-08 14:38:22:126 LL1 LogManager.java:25 look=[27, 27]
2023-09-08 14:38:22:126 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:126 LL1 LogManager.java:25 
DECISION 13 in rule types
2023-09-08 14:38:22:126 LL1 LogManager.java:25 look=[1, 2, 4, 3]
2023-09-08 14:38:22:126 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:126 LL1 LogManager.java:25 
DECISION 14 in rule typesmatriz
2023-09-08 14:38:22:126 LL1 LogManager.java:25 look=[48, {1..4}]
2023-09-08 14:38:22:127 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:127 LL1 LogManager.java:25 
DECISION 15 in rule exprFor
2023-09-08 14:38:22:127 LL1 LogManager.java:25 look=[{1..2, 4..6, 15, 25..27, 30, 41, 43, 48}, {1..2, 4..6, 15, 25..27, 30, 41, 43, 48}]
2023-09-08 14:38:22:127 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:127 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-09-08 14:38:22:127 LL1 LogManager.java:25 look=[41, 30, 43, {1..2, 4}, 27, 27, 48, 25, 26, 5, 6, 15]
2023-09-08 14:38:22:127 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:127 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-09-08 14:38:22:127 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-08 14:38:22:127 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:127 LL1 LogManager.java:25 
DECISION 18 in rule expr
2023-09-08 14:38:22:131 LL1 LogManager.java:25 look=[null, null]
2023-09-08 14:38:22:131 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:131 LL1 LogManager.java:25 
DECISION 19 in rule conversionstmt
2023-09-08 14:38:22:131 LL1 LogManager.java:25 look=[1, 2, 4]
2023-09-08 14:38:22:131 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:38:22:131 LL1 LogManager.java:25 
DECISION 20 in rule exprvector
2023-09-08 14:38:22:131 LL1 LogManager.java:25 look=[48, 48, 27]
2023-09-08 14:38:22:131 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:131 LL1 LogManager.java:25 
DECISION 21 in rule listParams
2023-09-08 14:38:22:131 LL1 LogManager.java:25 look=[null, {44, 49}]
2023-09-08 14:38:22:131 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:131 LL1 LogManager.java:25 
DECISION 22 in rule listArray
2023-09-08 14:38:22:132 LL1 LogManager.java:25 look=[null, null]
2023-09-08 14:38:22:132 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:38:22:140 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:38:22:165 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 14:38:22:165 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-09-08 14:38:22:166 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-09-08 14:38:22:171 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 14:38:22:171 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-09-08 14:38:22:174 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 14:38:22:174 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-09-08 14:38:22:174 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-09-08 14:38:22:182 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 14:38:22:182 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:27]
2023-09-08 14:38:22:182 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:35].[@-1,20:23='prnt',<0>,39:45]
2023-09-08 14:38:22:183 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-08 14:38:22:183 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-09-08 14:38:22:183 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-09-08 14:38:22:183 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-08 14:38:22:184 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:33]
2023-09-08 14:38:22:184 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:41].[@-1,26:28='dec',<0>,41:57]
2023-09-08 14:38:22:185 action-translator LogManager.java:25 translate  $inst = $asignationstmt.asig 
2023-09-08 14:38:22:185 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-09-08 14:38:22:185 action-translator LogManager.java:25 qattr [@-1,10:23='asignationstmt',<0>,42:40].[@-1,25:28='asig',<0>,42:55]
2023-09-08 14:38:22:186 action-translator LogManager.java:25 translate  $inst = $whilestmt.whileinst 
2023-09-08 14:38:22:188 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-09-08 14:38:22:188 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:28='whileinst',<0>,43:32]
2023-09-08 14:38:22:189 action-translator LogManager.java:25 translate  $inst = $forstmt.forinst 
2023-09-08 14:38:22:189 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-09-08 14:38:22:190 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:24='forinst',<0>,44:28]
2023-09-08 14:38:22:191 action-translator LogManager.java:25 translate $inst = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-08 14:38:22:191 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,45:22]
2023-09-08 14:38:22:191 action-translator LogManager.java:25 qattr [@-1,31:35='BREAK',<0>,45:52].[@-1,37:40='line',<0>,45:58]
2023-09-08 14:38:22:192 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,45:65].[@-1,50:52='pos',<0>,45:71]
2023-09-08 14:38:22:192 action-translator LogManager.java:25 translate $inst = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 14:38:22:192 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,46:25]
2023-09-08 14:38:22:192 action-translator LogManager.java:25 qattr [@-1,34:41='CONTINUE',<0>,46:58].[@-1,43:46='line',<0>,46:67]
2023-09-08 14:38:22:193 action-translator LogManager.java:25 qattr [@-1,50:57='CONTINUE',<0>,46:74].[@-1,59:61='pos',<0>,46:83]
2023-09-08 14:38:22:193 action-translator LogManager.java:25 translate $inst = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e)
2023-09-08 14:38:22:193 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,47:53]
2023-09-08 14:38:22:194 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,47:84].[@-1,35:38='line',<0>,47:87]
2023-09-08 14:38:22:194 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,47:94].[@-1,45:47='pos',<0>,47:97]
2023-09-08 14:38:22:194 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,47:103].[@-1,54:57='text',<0>,47:106]
2023-09-08 14:38:22:194 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,47:113].[@-1,66:66='e',<0>,47:118]
2023-09-08 14:38:22:195 action-translator LogManager.java:25 translate $inst = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text)
2023-09-08 14:38:22:195 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,48:52]
2023-09-08 14:38:22:195 action-translator LogManager.java:25 qattr [@-1,36:37='ID',<0>,48:87].[@-1,39:42='line',<0>,48:90]
2023-09-08 14:38:22:195 action-translator LogManager.java:25 qattr [@-1,46:47='ID',<0>,48:97].[@-1,49:51='pos',<0>,48:100]
2023-09-08 14:38:22:196 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,48:106].[@-1,58:61='text',<0>,48:109]
2023-09-08 14:38:22:197 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listParams.l)
2023-09-08 14:38:22:198 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,52:37]
2023-09-08 14:38:22:198 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,52:67].[@-1,38:41='line',<0>,52:73]
2023-09-08 14:38:22:198 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,52:79].[@-1,50:52='pos',<0>,52:85]
2023-09-08 14:38:22:198 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,52:90].[@-1,66:66='l',<0>,52:101]
2023-09-08 14:38:22:199 action-translator LogManager.java:25 translate 
    $blkif = []interface{}{}
    var listIfs []IIfstmtContext
    
2023-09-08 14:38:22:199 action-translator LogManager.java:25 attr [@-1,7:11='blkif',<0>,58:5]
2023-09-08 14:38:22:199 action-translator LogManager.java:25 translate 
        listIfs = localctx.(*BlockelsifContext).GetElseif()
        for _, e := range listIfs {
            $blkif = append($blkif, e.GetIfinst())
        }
    
2023-09-08 14:38:22:200 action-translator LogManager.java:25 attr [@-1,113:117='blkif',<0>,65:13]
2023-09-08 14:38:22:200 action-translator LogManager.java:25 attr [@-1,129:133='blkif',<0>,65:29]
2023-09-08 14:38:22:204 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil) 
2023-09-08 14:38:22:204 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,71:38]
2023-09-08 14:38:22:204 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,71:67].[@-1,34:37='line',<0>,71:70]
2023-09-08 14:38:22:205 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,71:77].[@-1,44:46='pos',<0>,71:80]
2023-09-08 14:38:22:206 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,71:86].[@-1,55:55='e',<0>,71:91]
2023-09-08 14:38:22:206 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,71:95].[@-1,65:67='blk',<0>,71:101]
2023-09-08 14:38:22:207 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $elseblck.blk)
2023-09-08 14:38:22:207 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,72:84]
2023-09-08 14:38:22:208 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,72:113].[@-1,33:36='line',<0>,72:116]
2023-09-08 14:38:22:208 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,72:123].[@-1,43:45='pos',<0>,72:126]
2023-09-08 14:38:22:209 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,72:132].[@-1,54:54='e',<0>,72:137]
2023-09-08 14:38:22:209 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,72:141].[@-1,65:67='blk',<0>,72:148]
2023-09-08 14:38:22:210 action-translator LogManager.java:25 qattr [@-1,71:78='elseblck',<0>,72:154].[@-1,80:82='blk',<0>,72:163]
2023-09-08 14:38:22:211 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $ifblck.blk, $blockelsif.blkif)
2023-09-08 14:38:22:211 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,73:60]
2023-09-08 14:38:22:214 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,73:89].[@-1,33:36='line',<0>,73:92]
2023-09-08 14:38:22:215 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,73:99].[@-1,43:45='pos',<0>,73:102]
2023-09-08 14:38:22:216 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,73:108].[@-1,54:54='e',<0>,73:113]
2023-09-08 14:38:22:216 action-translator LogManager.java:25 qattr [@-1,58:63='ifblck',<0>,73:117].[@-1,65:67='blk',<0>,73:124]
2023-09-08 14:38:22:216 action-translator LogManager.java:25 qattr [@-1,71:80='blockelsif',<0>,73:130].[@-1,82:86='blkif',<0>,73:141]
2023-09-08 14:38:22:217 action-translator LogManager.java:25 translate  $whileinst = instructions.NewWhile($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-08 14:38:22:217 action-translator LogManager.java:25 attr [@-1,2:10='whileinst',<0>,77:41]
2023-09-08 14:38:22:217 action-translator LogManager.java:25 qattr [@-1,37:41='WHILE',<0>,77:76].[@-1,43:46='line',<0>,77:82]
2023-09-08 14:38:22:218 action-translator LogManager.java:25 qattr [@-1,50:54='WHILE',<0>,77:89].[@-1,56:58='pos',<0>,77:95]
2023-09-08 14:38:22:219 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,77:101].[@-1,67:67='e',<0>,77:106]
2023-09-08 14:38:22:219 action-translator LogManager.java:25 qattr [@-1,71:75='block',<0>,77:110].[@-1,77:79='blk',<0>,77:116]
2023-09-08 14:38:22:225 action-translator LogManager.java:25 translate $forinst = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $exprFor.e, $block.blk)
2023-09-08 14:38:22:225 action-translator LogManager.java:25 attr [@-1,1:7='forinst',<0>,81:47]
2023-09-08 14:38:22:226 action-translator LogManager.java:25 qattr [@-1,32:34='FOR',<0>,81:78].[@-1,36:39='line',<0>,81:82]
2023-09-08 14:38:22:226 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,81:89].[@-1,47:49='pos',<0>,81:93]
2023-09-08 14:38:22:226 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,81:99].[@-1,56:59='text',<0>,81:102]
2023-09-08 14:38:22:226 action-translator LogManager.java:25 qattr [@-1,63:69='exprFor',<0>,81:109].[@-1,71:71='e',<0>,81:117]
2023-09-08 14:38:22:226 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,81:121].[@-1,81:83='blk',<0>,81:127]
2023-09-08 14:38:22:232 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $expr.e) 
2023-09-08 14:38:22:232 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,85:39]
2023-09-08 14:38:22:232 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,85:74].[@-1,41:44='line',<0>,85:78]
2023-09-08 14:38:22:232 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,85:85].[@-1,52:54='pos',<0>,85:89]
2023-09-08 14:38:22:232 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,85:95].[@-1,61:64='text',<0>,85:98]
2023-09-08 14:38:22:232 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,85:110].[@-1,79:80='ty',<0>,85:116]
2023-09-08 14:38:22:233 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,85:121].[@-1,89:89='e',<0>,85:126]
2023-09-08 14:38:22:233 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true,environment.DEPENDIENTE, $expr.e) 
2023-09-08 14:38:22:233 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,86:22]
2023-09-08 14:38:22:233 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,86:57].[@-1,41:44='line',<0>,86:61]
2023-09-08 14:38:22:233 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,86:68].[@-1,52:54='pos',<0>,86:72]
2023-09-08 14:38:22:233 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,86:78].[@-1,61:64='text',<0>,86:81]
2023-09-08 14:38:22:239 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,86:117].[@-1,102:102='e',<0>,86:122]
2023-09-08 14:38:22:240 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($VAR.line, $VAR.pos, $ID.text,true, $types.ty, nil) 
2023-09-08 14:38:22:240 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,87:42]
2023-09-08 14:38:22:240 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,87:77].[@-1,41:44='line',<0>,87:81]
2023-09-08 14:38:22:241 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,87:88].[@-1,52:54='pos',<0>,87:92]
2023-09-08 14:38:22:241 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,87:98].[@-1,61:64='text',<0>,87:101]
2023-09-08 14:38:22:241 action-translator LogManager.java:25 qattr [@-1,73:77='types',<0>,87:113].[@-1,79:80='ty',<0>,87:119]
2023-09-08 14:38:22:242 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionVector($VAR.line, $VAR.pos, $ID.text,true, $types.ty, $exprvector.exprv) 
2023-09-08 14:38:22:242 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,88:60]
2023-09-08 14:38:22:242 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,88:101].[@-1,47:50='line',<0>,88:105]
2023-09-08 14:38:22:242 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,88:112].[@-1,58:60='pos',<0>,88:116]
2023-09-08 14:38:22:242 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,88:122].[@-1,67:70='text',<0>,88:125]
2023-09-08 14:38:22:242 action-translator LogManager.java:25 qattr [@-1,79:83='types',<0>,88:137].[@-1,85:86='ty',<0>,88:143]
2023-09-08 14:38:22:243 action-translator LogManager.java:25 qattr [@-1,90:99='exprvector',<0>,88:148].[@-1,101:105='exprv',<0>,88:159]
2023-09-08 14:38:22:243 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracionMatriz($VAR.line, $VAR.pos, $ID.text,true, $typesmatriz.tm, $expr.e) 
2023-09-08 14:38:22:243 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,89:44]
2023-09-08 14:38:22:243 action-translator LogManager.java:25 qattr [@-1,43:45='VAR',<0>,89:85].[@-1,47:50='line',<0>,89:89]
2023-09-08 14:38:22:244 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,89:96].[@-1,58:60='pos',<0>,89:100]
2023-09-08 14:38:22:244 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,89:106].[@-1,67:70='text',<0>,89:109]
2023-09-08 14:38:22:244 action-translator LogManager.java:25 qattr [@-1,79:89='typesmatriz',<0>,89:121].[@-1,91:92='tm',<0>,89:133]
2023-09-08 14:38:22:244 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,89:138].[@-1,101:101='e',<0>,89:143]
2023-09-08 14:38:22:244 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false, $types.ty, $expr.e) 
2023-09-08 14:38:22:244 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,90:38]
2023-09-08 14:38:22:245 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,90:73].[@-1,41:44='line',<0>,90:77]
2023-09-08 14:38:22:246 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,90:84].[@-1,52:54='pos',<0>,90:88]
2023-09-08 14:38:22:247 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,90:94].[@-1,61:64='text',<0>,90:97]
2023-09-08 14:38:22:247 action-translator LogManager.java:25 qattr [@-1,74:78='types',<0>,90:110].[@-1,80:81='ty',<0>,90:116]
2023-09-08 14:38:22:247 action-translator LogManager.java:25 qattr [@-1,85:88='expr',<0>,90:121].[@-1,90:90='e',<0>,90:126]
2023-09-08 14:38:22:248 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaracion($LET.line, $LET.pos, $ID.text,false,environment.DEPENDIENTE, $expr.e) 
2023-09-08 14:38:22:248 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,91:22]
2023-09-08 14:38:22:248 action-translator LogManager.java:25 qattr [@-1,37:39='LET',<0>,91:57].[@-1,41:44='line',<0>,91:61]
2023-09-08 14:38:22:249 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,91:68].[@-1,52:54='pos',<0>,91:72]
2023-09-08 14:38:22:249 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,91:78].[@-1,61:64='text',<0>,91:81]
2023-09-08 14:38:22:249 action-translator LogManager.java:25 qattr [@-1,98:101='expr',<0>,91:118].[@-1,103:103='e',<0>,91:123]
2023-09-08 14:38:22:251 action-translator LogManager.java:25 translate  $asig = instructions.NewAsignacion($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-08 14:38:22:252 action-translator LogManager.java:25 attr [@-1,2:5='asig',<0>,95:18]
2023-09-08 14:38:22:252 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,95:53].[@-1,40:43='line',<0>,95:56]
2023-09-08 14:38:22:252 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,95:63].[@-1,50:52='pos',<0>,95:66]
2023-09-08 14:38:22:252 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,95:72].[@-1,59:62='text',<0>,95:75]
2023-09-08 14:38:22:252 action-translator LogManager.java:25 qattr [@-1,66:69='expr',<0>,95:82].[@-1,71:71='e',<0>,95:87]
2023-09-08 14:38:22:253 action-translator LogManager.java:25 translate $asig = instructions.NewOperacionAsignacion($ID.line, $ID.pos, $ID.text, $expr.e, $op.text)
2023-09-08 14:38:22:253 action-translator LogManager.java:25 attr [@-1,1:4='asig',<0>,96:30]
2023-09-08 14:38:22:253 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,96:74].[@-1,48:51='line',<0>,96:77]
2023-09-08 14:38:22:253 action-translator LogManager.java:25 qattr [@-1,55:56='ID',<0>,96:84].[@-1,58:60='pos',<0>,96:87]
2023-09-08 14:38:22:253 action-translator LogManager.java:25 qattr [@-1,64:65='ID',<0>,96:93].[@-1,67:70='text',<0>,96:96]
2023-09-08 14:38:22:254 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,96:103].[@-1,79:79='e',<0>,96:108]
2023-09-08 14:38:22:254 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,96:112].[@-1,86:89='text',<0>,96:115]
2023-09-08 14:38:22:254 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-08 14:38:22:254 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,100:8]
2023-09-08 14:38:22:254 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-08 14:38:22:254 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,101:10]
2023-09-08 14:38:22:255 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-08 14:38:22:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,102:8]
2023-09-08 14:38:22:255 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-08 14:38:22:255 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,103:9]
2023-09-08 14:38:22:256 action-translator LogManager.java:25 translate 
                                var arr []interface{}
                                newTipo := environment.NewTipoArray(environment.ARRAY)
                                arr = append($list.tm, newTipo)
                                $tm = arr
                            
2023-09-08 14:38:22:256 action-translator LogManager.java:25 qattr [@-1,191:194='list',<0>,110:46].[@-1,196:197='tm',<0>,110:51]
2023-09-08 14:38:22:256 action-translator LogManager.java:25 attr [@-1,243:244='tm',<0>,111:33]
2023-09-08 14:38:22:257 action-translator LogManager.java:25 translate 
            $tm = []interface{}{}
            newTipo := environment.NewTipoArray($types.ty)
            $tm = append($tm, newTipo)
        
2023-09-08 14:38:22:257 action-translator LogManager.java:25 attr [@-1,15:16='tm',<0>,114:13]
2023-09-08 14:38:22:257 action-translator LogManager.java:25 qattr [@-1,86:90='types',<0>,115:49].[@-1,92:93='ty',<0>,115:55]
2023-09-08 14:38:22:257 action-translator LogManager.java:25 attr [@-1,110:111='tm',<0>,116:13]
2023-09-08 14:38:22:259 action-translator LogManager.java:25 attr [@-1,123:124='tm',<0>,116:26]
2023-09-08 14:38:22:264 action-translator LogManager.java:25 translate $e = expressions.NewForRange($range1.start.GetLine(), $range1.start.GetColumn(), $range1.e, $range2.e)
2023-09-08 14:38:22:265 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,121:44]
2023-09-08 14:38:22:265 action-translator LogManager.java:25 qattr [@-1,30:35='range1',<0>,121:73].[@-1,37:41='start',<0>,121:80]
2023-09-08 14:38:22:266 action-translator LogManager.java:25 qattr [@-1,55:60='range1',<0>,121:98].[@-1,62:66='start',<0>,121:105]
2023-09-08 14:38:22:266 action-translator LogManager.java:25 qattr [@-1,82:87='range1',<0>,121:125].[@-1,89:89='e',<0>,121:132]
2023-09-08 14:38:22:267 action-translator LogManager.java:25 qattr [@-1,93:98='range2',<0>,121:136].[@-1,100:100='e',<0>,121:143]
2023-09-08 14:38:22:267 action-translator LogManager.java:25 translate $e = $expr.e
2023-09-08 14:38:22:267 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,122:7]
2023-09-08 14:38:22:267 action-translator LogManager.java:25 qattr [@-1,6:9='expr',<0>,122:12].[@-1,11:11='e',<0>,122:17]
2023-09-08 14:38:22:272 action-translator LogManager.java:25 translate 
2023-09-08 14:38:22:272 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($RES.line, $RES.pos, $left.e, "UNARIO", nil) 
2023-09-08 14:38:22:272 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:66]
2023-09-08 14:38:22:272 action-translator LogManager.java:25 qattr [@-1,32:34='RES',<0>,2:96].[@-1,36:39='line',<0>,2:100]
2023-09-08 14:38:22:273 action-translator LogManager.java:25 qattr [@-1,43:45='RES',<0>,2:107].[@-1,47:49='pos',<0>,2:111]
2023-09-08 14:38:22:273 action-translator LogManager.java:25 qattr [@-1,53:56='left',<0>,2:117].[@-1,58:58='e',<0>,2:122]
2023-09-08 14:38:22:273 action-translator LogManager.java:25 translate $e = expressions.NewOperation($NOT.line, $NOT.pos, $left.e, $NOT.text, nil)
2023-09-08 14:38:22:273 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,3:62]
2023-09-08 14:38:22:273 action-translator LogManager.java:25 qattr [@-1,31:33='NOT',<0>,3:92].[@-1,35:38='line',<0>,3:96]
2023-09-08 14:38:22:273 action-translator LogManager.java:25 qattr [@-1,42:44='NOT',<0>,3:103].[@-1,46:48='pos',<0>,3:107]
2023-09-08 14:38:22:274 action-translator LogManager.java:25 qattr [@-1,52:55='left',<0>,3:113].[@-1,57:57='e',<0>,3:118]
2023-09-08 14:38:22:274 action-translator LogManager.java:25 qattr [@-1,61:63='NOT',<0>,3:122].[@-1,65:68='text',<0>,3:126]
2023-09-08 14:38:22:274 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 14:38:22:274 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:81]
2023-09-08 14:38:22:274 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,4:86].[@-1,12:12='e',<0>,4:91]
2023-09-08 14:38:22:274 action-translator LogManager.java:25 translate  $e = $conversionstmt.conv 
2023-09-08 14:38:22:274 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:43]
2023-09-08 14:38:22:275 action-translator LogManager.java:25 qattr [@-1,7:20='conversionstmt',<0>,5:48].[@-1,22:25='conv',<0>,5:63]
2023-09-08 14:38:22:275 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text)
2023-09-08 14:38:22:275 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:53]
2023-09-08 14:38:22:275 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,6:79].[@-1,31:34='line',<0>,6:82]
2023-09-08 14:38:22:276 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,6:89].[@-1,41:43='pos',<0>,6:92]
2023-09-08 14:38:22:276 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,6:98].[@-1,50:53='text',<0>,6:101]
2023-09-08 14:38:22:277 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-08 14:38:22:277 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:43]
2023-09-08 14:38:22:277 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:48].[@-1,12:12='p',<0>,7:53]
2023-09-08 14:38:22:277 action-translator LogManager.java:25 translate  $e = expressions.NewArray($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 14:38:22:278 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:87]
2023-09-08 14:38:22:278 action-translator LogManager.java:25 qattr [@-1,28:34='COR_IZQ',<0>,8:113].[@-1,36:39='line',<0>,8:121]
2023-09-08 14:38:22:278 action-translator LogManager.java:25 qattr [@-1,43:49='COR_IZQ',<0>,8:128].[@-1,51:53='pos',<0>,8:136]
2023-09-08 14:38:22:278 action-translator LogManager.java:25 qattr [@-1,57:66='listParams',<0>,8:142].[@-1,68:68='l',<0>,8:153]
2023-09-08 14:38:22:278 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 14:38:22:279 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,11:30].[@-1,39:42='text',<0>,11:37]
2023-09-08 14:38:22:279 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,12:43].[@-1,102:105='text',<0>,12:50]
2023-09-08 14:38:22:279 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,16:13]
2023-09-08 14:38:22:279 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,16:43].[@-1,240:243='line',<0>,16:50]
2023-09-08 14:38:22:280 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,16:56].[@-1,253:255='pos',<0>,16:63]
2023-09-08 14:38:22:280 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,18:37].[@-1,341:344='text',<0>,18:44]
2023-09-08 14:38:22:280 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,22:13]
2023-09-08 14:38:22:280 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,22:43].[@-1,474:477='line',<0>,22:50]
2023-09-08 14:38:22:280 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,22:56].[@-1,487:489='pos',<0>,22:63]
2023-09-08 14:38:22:281 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 14:38:22:281 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,27:16].[@-1,25:28='text',<0>,27:23]
2023-09-08 14:38:22:281 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,28:9]
2023-09-08 14:38:22:281 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,28:39].[@-1,77:80='line',<0>,28:46]
2023-09-08 14:38:22:282 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,28:53].[@-1,91:93='pos',<0>,28:60]
2023-09-08 14:38:22:282 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 14:38:22:282 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-09-08 14:38:22:282 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-09-08 14:38:22:282 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-09-08 14:38:22:283 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 14:38:22:283 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-08 14:38:22:283 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-08 14:38:22:283 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-08 14:38:22:283 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($NIL.line, $NIL.pos, nil, environment.NULL) 
2023-09-08 14:38:22:283 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-08 14:38:22:283 action-translator LogManager.java:25 qattr [@-1,32:34='NIL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-08 14:38:22:284 action-translator LogManager.java:25 qattr [@-1,43:45='NIL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-08 14:38:22:286 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 14:38:22:287 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:287 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:160]
2023-09-08 14:38:22:287 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:190].[@-1,37:41='start',<0>,35:195]
2023-09-08 14:38:22:287 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:213].[@-1,60:64='start',<0>,35:218]
2023-09-08 14:38:22:288 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:238].[@-1,85:85='e',<0>,35:243]
2023-09-08 14:38:22:288 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:247].[@-1,92:95='text',<0>,35:250]
2023-09-08 14:38:22:288 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:257].[@-1,105:105='e',<0>,35:263]
2023-09-08 14:38:22:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 14:38:22:288 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:288 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-09-08 14:38:22:289 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 14:38:22:290 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:290 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:153]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:183].[@-1,37:41='start',<0>,37:188]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:206].[@-1,60:64='start',<0>,37:211]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:231].[@-1,85:85='e',<0>,37:236]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:240].[@-1,92:95='text',<0>,37:243]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:250].[@-1,105:105='e',<0>,37:256]
2023-09-08 14:38:22:290 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 14:38:22:291 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:291 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:153]
2023-09-08 14:38:22:291 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:183].[@-1,37:41='start',<0>,38:188]
2023-09-08 14:38:22:291 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:206].[@-1,60:64='start',<0>,38:211]
2023-09-08 14:38:22:291 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:231].[@-1,85:85='e',<0>,38:236]
2023-09-08 14:38:22:291 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:240].[@-1,92:95='text',<0>,38:243]
2023-09-08 14:38:22:291 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:250].[@-1,105:105='e',<0>,38:256]
2023-09-08 14:38:22:292 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 14:38:22:292 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:292 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:152]
2023-09-08 14:38:22:292 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:182].[@-1,37:41='start',<0>,39:187]
2023-09-08 14:38:22:292 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:205].[@-1,60:64='start',<0>,39:210]
2023-09-08 14:38:22:292 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:230].[@-1,85:85='e',<0>,39:235]
2023-09-08 14:38:22:293 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:239].[@-1,92:95='text',<0>,39:242]
2023-09-08 14:38:22:293 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:249].[@-1,105:105='e',<0>,39:255]
2023-09-08 14:38:22:293 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 14:38:22:293 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:293 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-09-08 14:38:22:293 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-09-08 14:38:22:294 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-09-08 14:38:22:294 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-09-08 14:38:22:294 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-09-08 14:38:22:294 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-09-08 14:38:22:294 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 14:38:22:294 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:38:22:295 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-09-08 14:38:22:295 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-09-08 14:38:22:295 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-09-08 14:38:22:295 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-09-08 14:38:22:295 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-09-08 14:38:22:296 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-09-08 14:38:22:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-08 14:38:22:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-08 14:38:22:297 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-08 14:38:22:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-08 14:38:22:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-08 14:38:22:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-09-08 14:38:22:298 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-09-08 14:38:22:299 action-translator LogManager.java:25 translate  $conv = expressions.NewToInt($INT.line, $INT.pos, $expr.e) 
2023-09-08 14:38:22:299 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,167:29]
2023-09-08 14:38:22:299 action-translator LogManager.java:25 qattr [@-1,31:33='INT',<0>,167:58].[@-1,35:38='line',<0>,167:62]
2023-09-08 14:38:22:299 action-translator LogManager.java:25 qattr [@-1,42:44='INT',<0>,167:69].[@-1,46:48='pos',<0>,167:73]
2023-09-08 14:38:22:299 action-translator LogManager.java:25 qattr [@-1,52:55='expr',<0>,167:79].[@-1,57:57='e',<0>,167:84]
2023-09-08 14:38:22:300 action-translator LogManager.java:25 translate  $conv = expressions.NewToFloat($FLOAT.line, $FLOAT.pos, $expr.e) 
2023-09-08 14:38:22:300 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,168:31]
2023-09-08 14:38:22:300 action-translator LogManager.java:25 qattr [@-1,33:37='FLOAT',<0>,168:62].[@-1,39:42='line',<0>,168:68]
2023-09-08 14:38:22:300 action-translator LogManager.java:25 qattr [@-1,46:50='FLOAT',<0>,168:75].[@-1,52:54='pos',<0>,168:81]
2023-09-08 14:38:22:300 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,168:87].[@-1,63:63='e',<0>,168:92]
2023-09-08 14:38:22:302 action-translator LogManager.java:25 translate  $conv = expressions.NewToString($STR.line, $STR.pos, $expr.e) 
2023-09-08 14:38:22:302 action-translator LogManager.java:25 attr [@-1,2:5='conv',<0>,169:29]
2023-09-08 14:38:22:304 action-translator LogManager.java:25 qattr [@-1,34:36='STR',<0>,169:61].[@-1,38:41='line',<0>,169:65]
2023-09-08 14:38:22:304 action-translator LogManager.java:25 qattr [@-1,45:47='STR',<0>,169:72].[@-1,49:51='pos',<0>,169:76]
2023-09-08 14:38:22:304 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,169:82].[@-1,60:60='e',<0>,169:87]
2023-09-08 14:38:22:309 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, $listParams.l) 
2023-09-08 14:38:22:309 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,173:31]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,173:62].[@-1,41:44='line',<0>,173:70]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,173:77].[@-1,56:58='pos',<0>,173:85]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 qattr [@-1,62:71='listParams',<0>,173:91].[@-1,73:73='l',<0>,173:102]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 translate  $exprv = expressions.NewVector($COR_IZQ.line, $COR_IZQ.pos, nil) 
2023-09-08 14:38:22:310 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,174:20]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 qattr [@-1,33:39='COR_IZQ',<0>,174:51].[@-1,41:44='line',<0>,174:59]
2023-09-08 14:38:22:310 action-translator LogManager.java:25 qattr [@-1,48:54='COR_IZQ',<0>,174:66].[@-1,56:58='pos',<0>,174:74]
2023-09-08 14:38:22:312 action-translator LogManager.java:25 translate  $exprv = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 14:38:22:312 action-translator LogManager.java:25 attr [@-1,2:6='exprv',<0>,175:7]
2023-09-08 14:38:22:312 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,175:42].[@-1,40:43='line',<0>,175:45]
2023-09-08 14:38:22:312 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,175:52].[@-1,50:52='pos',<0>,175:55]
2023-09-08 14:38:22:312 action-translator LogManager.java:25 qattr [@-1,56:57='ID',<0>,175:61].[@-1,59:62='text',<0>,175:64]
2023-09-08 14:38:22:313 action-translator LogManager.java:25 translate 
2023-09-08 14:38:22:313 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-08 14:38:22:313 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-08 14:38:22:314 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-08 14:38:22:314 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-08 14:38:22:314 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-08 14:38:22:315 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:38:22:315 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-08 14:38:22:315 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-08 14:38:22:315 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-08 14:38:22:315 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-08 14:38:22:316 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:38:22:317 action-translator LogManager.java:25 translate 
2023-09-08 14:38:22:317 action-translator LogManager.java:25 translate  $p = expressions.NewLlamadoVar($ID.line, $ID.pos, $ID.text)
2023-09-08 14:38:22:317 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-08 14:38:22:317 action-translator LogManager.java:25 qattr [@-1,33:34='ID',<0>,2:65].[@-1,36:39='line',<0>,2:68]
2023-09-08 14:38:22:317 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,2:75].[@-1,46:48='pos',<0>,2:78]
2023-09-08 14:38:22:317 action-translator LogManager.java:25 qattr [@-1,52:53='ID',<0>,2:84].[@-1,55:58='text',<0>,2:87]
2023-09-08 14:38:22:319 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:38:22:319 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-08 14:38:22:319 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:129]
2023-09-08 14:38:22:319 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:161].[@-1,39:43='start',<0>,5:166]
2023-09-08 14:38:22:319 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:184].[@-1,62:66='start',<0>,5:189]
2023-09-08 14:38:22:320 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:209].[@-1,87:87='p',<0>,5:214]
2023-09-08 14:38:22:320 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:218].[@-1,96:96='e',<0>,5:223]
2023-09-08 14:38:22:321 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-08 14:38:22:968 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:38:22:968 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:38:23:325 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

2023-09-08 14:38:23:326 action-translator LogManager.java:25 translate 
    import "Proyecto1_OLC2_2S2023_202101648/interfaces"
    import "Proyecto1_OLC2_2S2023_202101648/Environment"
    import "Proyecto1_OLC2_2S2023_202101648/expressions"
    import "Proyecto1_OLC2_2S2023_202101648/instructions"
    import "strings"

